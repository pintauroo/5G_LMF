/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ExemptionInd.h"

namespace oai {
namespace smf_server {
namespace model {

ExemptionInd::ExemptionInd() {
  m_DnnCongestion             = false;
  m_DnnCongestionIsSet        = false;
  m_SnssaiOnlyCongestion      = false;
  m_SnssaiOnlyCongestionIsSet = false;
  m_SnssaiDnnCongestion       = false;
  m_SnssaiDnnCongestionIsSet  = false;
}

ExemptionInd::~ExemptionInd() {}

void ExemptionInd::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json& j, const ExemptionInd& o) {
  j = nlohmann::json();
  if (o.dnnCongestionIsSet()) j["dnnCongestion"] = o.m_DnnCongestion;
  if (o.snssaiOnlyCongestionIsSet())
    j["snssaiOnlyCongestion"] = o.m_SnssaiOnlyCongestion;
  if (o.snssaiDnnCongestionIsSet())
    j["snssaiDnnCongestion"] = o.m_SnssaiDnnCongestion;
}

void from_json(const nlohmann::json& j, ExemptionInd& o) {
  if (j.find("dnnCongestion") != j.end()) {
    j.at("dnnCongestion").get_to(o.m_DnnCongestion);
    o.m_DnnCongestionIsSet = true;
  }
  if (j.find("snssaiOnlyCongestion") != j.end()) {
    j.at("snssaiOnlyCongestion").get_to(o.m_SnssaiOnlyCongestion);
    o.m_SnssaiOnlyCongestionIsSet = true;
  }
  if (j.find("snssaiDnnCongestion") != j.end()) {
    j.at("snssaiDnnCongestion").get_to(o.m_SnssaiDnnCongestion);
    o.m_SnssaiDnnCongestionIsSet = true;
  }
}

bool ExemptionInd::isDnnCongestion() const {
  return m_DnnCongestion;
}
void ExemptionInd::setDnnCongestion(bool const value) {
  m_DnnCongestion      = value;
  m_DnnCongestionIsSet = true;
}
bool ExemptionInd::dnnCongestionIsSet() const {
  return m_DnnCongestionIsSet;
}
void ExemptionInd::unsetDnnCongestion() {
  m_DnnCongestionIsSet = false;
}
bool ExemptionInd::isSnssaiOnlyCongestion() const {
  return m_SnssaiOnlyCongestion;
}
void ExemptionInd::setSnssaiOnlyCongestion(bool const value) {
  m_SnssaiOnlyCongestion      = value;
  m_SnssaiOnlyCongestionIsSet = true;
}
bool ExemptionInd::snssaiOnlyCongestionIsSet() const {
  return m_SnssaiOnlyCongestionIsSet;
}
void ExemptionInd::unsetSnssaiOnlyCongestion() {
  m_SnssaiOnlyCongestionIsSet = false;
}
bool ExemptionInd::isSnssaiDnnCongestion() const {
  return m_SnssaiDnnCongestion;
}
void ExemptionInd::setSnssaiDnnCongestion(bool const value) {
  m_SnssaiDnnCongestion      = value;
  m_SnssaiDnnCongestionIsSet = true;
}
bool ExemptionInd::snssaiDnnCongestionIsSet() const {
  return m_SnssaiDnnCongestionIsSet;
}
void ExemptionInd::unsetSnssaiDnnCongestion() {
  m_SnssaiDnnCongestionIsSet = false;
}

}  // namespace model
}  // namespace smf_server
}  // namespace oai
