/**
 * Namf_Communication
 * AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeContextCreatedData.h"

namespace oai {
namespace amf {
namespace model {

UeContextCreatedData::UeContextCreatedData() {
  m_FailedSessionListIsSet = false;
  m_SupportedFeatures      = "";
  m_SupportedFeaturesIsSet = false;
  m_PcfReselectedInd       = false;
  m_PcfReselectedIndIsSet  = false;
}

UeContextCreatedData::~UeContextCreatedData() {}

void UeContextCreatedData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json& j, const UeContextCreatedData& o) {
  j                       = nlohmann::json();
  j["ueContext"]          = o.m_UeContext;
  j["targetToSourceData"] = o.m_TargetToSourceData;
  j["pduSessionList"]     = o.m_PduSessionList;
  if (o.failedSessionListIsSet())
    j["failedSessionList"] = o.m_FailedSessionList;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.pcfReselectedIndIsSet()) j["pcfReselectedInd"] = o.m_PcfReselectedInd;
}

void from_json(const nlohmann::json& j, UeContextCreatedData& o) {
  j.at("ueContext").get_to(o.m_UeContext);
  j.at("targetToSourceData").get_to(o.m_TargetToSourceData);
  j.at("pduSessionList").get_to(o.m_PduSessionList);
  if (j.find("failedSessionList") != j.end()) {
    j.at("failedSessionList").get_to(o.m_FailedSessionList);
    o.m_FailedSessionListIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("pcfReselectedInd") != j.end()) {
    j.at("pcfReselectedInd").get_to(o.m_PcfReselectedInd);
    o.m_PcfReselectedIndIsSet = true;
  }
}

UeContext UeContextCreatedData::getUeContext() const {
  return m_UeContext;
}
void UeContextCreatedData::setUeContext(UeContext const& value) {
  m_UeContext = value;
}
N2InfoContent UeContextCreatedData::getTargetToSourceData() const {
  return m_TargetToSourceData;
}
void UeContextCreatedData::setTargetToSourceData(N2InfoContent const& value) {
  m_TargetToSourceData = value;
}
std::vector<N2SmInformation>& UeContextCreatedData::getPduSessionList() {
  return m_PduSessionList;
}
std::vector<N2SmInformation>& UeContextCreatedData::getFailedSessionList() {
  return m_FailedSessionList;
}
bool UeContextCreatedData::failedSessionListIsSet() const {
  return m_FailedSessionListIsSet;
}
void UeContextCreatedData::unsetFailedSessionList() {
  m_FailedSessionListIsSet = false;
}
std::string UeContextCreatedData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void UeContextCreatedData::setSupportedFeatures(std::string const& value) {
  m_SupportedFeatures      = value;
  m_SupportedFeaturesIsSet = true;
}
bool UeContextCreatedData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void UeContextCreatedData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
bool UeContextCreatedData::isPcfReselectedInd() const {
  return m_PcfReselectedInd;
}
void UeContextCreatedData::setPcfReselectedInd(bool const value) {
  m_PcfReselectedInd      = value;
  m_PcfReselectedIndIsSet = true;
}
bool UeContextCreatedData::pcfReselectedIndIsSet() const {
  return m_PcfReselectedIndIsSet;
}
void UeContextCreatedData::unsetPcfReselectedInd() {
  m_PcfReselectedIndIsSet = false;
}

}  // namespace model
}  // namespace amf
}  // namespace oai
