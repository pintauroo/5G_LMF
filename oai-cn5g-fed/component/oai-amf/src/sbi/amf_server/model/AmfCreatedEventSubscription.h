/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AmfCreatedEventSubscription.h
 *
 *
 */

#ifndef AmfCreatedEventSubscription_H_
#define AmfCreatedEventSubscription_H_

#include "AmfEventReport.h"
#include <string>
#include "AmfEventSubscription.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace oai::amf::model {

/// <summary>
///
/// </summary>
class AmfCreatedEventSubscription {
 public:
  AmfCreatedEventSubscription();
  virtual ~AmfCreatedEventSubscription() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  bool operator==(const AmfCreatedEventSubscription& rhs) const;
  bool operator!=(const AmfCreatedEventSubscription& rhs) const;

  /////////////////////////////////////////////
  /// AmfCreatedEventSubscription members

  /// <summary>
  ///
  /// </summary>
  AmfEventSubscription getSubscription() const;
  void setSubscription(AmfEventSubscription const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getSubscriptionId() const;
  void setSubscriptionId(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::vector<AmfEventReport> getReportList() const;
  void setReportList(std::vector<AmfEventReport> const& value);
  bool reportListIsSet() const;
  void unsetReportList();
  /// <summary>
  ///
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const& value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();

  friend void to_json(nlohmann::json& j, const AmfCreatedEventSubscription& o);
  friend void from_json(
      const nlohmann::json& j, AmfCreatedEventSubscription& o);

 protected:
  AmfEventSubscription m_Subscription;

  std::string m_SubscriptionId;

  std::vector<AmfEventReport> m_ReportList;
  bool m_ReportListIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;

  // Helper overload for validate. Used when one model stores another model and
  // calls it's validate.
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;
};

}  // namespace oai::amf::model

#endif /* AmfCreatedEventSubscription_H_ */
