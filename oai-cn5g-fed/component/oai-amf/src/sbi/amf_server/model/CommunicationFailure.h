/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * CommunicationFailure.h
 *
 *
 */

#ifndef CommunicationFailure_H_
#define CommunicationFailure_H_

#include "NgApCause.h"
#include <string>
#include <nlohmann/json.hpp>

namespace oai::amf::model {

/// <summary>
///
/// </summary>
class CommunicationFailure {
 public:
  CommunicationFailure();
  virtual ~CommunicationFailure() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  bool operator==(const CommunicationFailure& rhs) const;
  bool operator!=(const CommunicationFailure& rhs) const;

  /////////////////////////////////////////////
  /// CommunicationFailure members

  /// <summary>
  ///
  /// </summary>
  std::string getNasReleaseCode() const;
  void setNasReleaseCode(std::string const& value);
  bool nasReleaseCodeIsSet() const;
  void unsetNasReleaseCode();
  /// <summary>
  ///
  /// </summary>
  NgApCause getRanReleaseCode() const;
  void setRanReleaseCode(NgApCause const& value);
  bool ranReleaseCodeIsSet() const;
  void unsetRanReleaseCode();

  friend void to_json(nlohmann::json& j, const CommunicationFailure& o);
  friend void from_json(const nlohmann::json& j, CommunicationFailure& o);

 protected:
  std::string m_NasReleaseCode;
  bool m_NasReleaseCodeIsSet;
  NgApCause m_RanReleaseCode;
  bool m_RanReleaseCodeIsSet;

  // Helper overload for validate. Used when one model stores another model and
  // calls it's validate.
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;
};

}  // namespace oai::amf::model

#endif /* CommunicationFailure_H_ */
