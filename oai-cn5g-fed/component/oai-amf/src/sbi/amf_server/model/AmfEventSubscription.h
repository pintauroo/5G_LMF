/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AmfEventSubscription.h
 *
 *
 */

#ifndef AmfEventSubscription_H_
#define AmfEventSubscription_H_

#include "AmfEvent.h"
#include <string>
#include "AmfEventMode.h"
#include <vector>
#include <nlohmann/json.hpp>

namespace oai::amf::model {

/// <summary>
///
/// </summary>
class AmfEventSubscription {
 public:
  AmfEventSubscription();
  virtual ~AmfEventSubscription() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  bool operator==(const AmfEventSubscription& rhs) const;
  bool operator!=(const AmfEventSubscription& rhs) const;

  /////////////////////////////////////////////
  /// AmfEventSubscription members

  /// <summary>
  ///
  /// </summary>
  std::vector<AmfEvent> getEventList() const;
  void setEventList(std::vector<AmfEvent> const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getEventNotifyUri() const;
  void setEventNotifyUri(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getNotifyCorrelationId() const;
  void setNotifyCorrelationId(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getNfId() const;
  void setNfId(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getSubsChangeNotifyUri() const;
  void setSubsChangeNotifyUri(std::string const& value);
  bool subsChangeNotifyUriIsSet() const;
  void unsetSubsChangeNotifyUri();
  /// <summary>
  ///
  /// </summary>
  std::string getSubsChangeNotifyCorrelationId() const;
  void setSubsChangeNotifyCorrelationId(std::string const& value);
  bool subsChangeNotifyCorrelationIdIsSet() const;
  void unsetSubsChangeNotifyCorrelationId();
  /// <summary>
  ///
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const& value);
  bool supiIsSet() const;
  void unsetSupi();
  /// <summary>
  ///
  /// </summary>
  std::string getGroupId() const;
  void setGroupId(std::string const& value);
  bool groupIdIsSet() const;
  void unsetGroupId();
  /// <summary>
  ///
  /// </summary>
  std::string getGpsi() const;
  void setGpsi(std::string const& value);
  bool gpsiIsSet() const;
  void unsetGpsi();
  /// <summary>
  ///
  /// </summary>
  std::string getPei() const;
  void setPei(std::string const& value);
  bool peiIsSet() const;
  void unsetPei();
  /// <summary>
  ///
  /// </summary>
  bool isAnyUE() const;
  void setAnyUE(bool const value);
  bool anyUEIsSet() const;
  void unsetAnyUE();
  /// <summary>
  ///
  /// </summary>
  AmfEventMode getOptions() const;
  void setOptions(AmfEventMode const& value);
  bool optionsIsSet() const;
  void unsetOptions();

  friend void to_json(nlohmann::json& j, const AmfEventSubscription& o);
  friend void from_json(const nlohmann::json& j, AmfEventSubscription& o);

 protected:
  std::vector<AmfEvent> m_EventList;

  std::string m_EventNotifyUri;

  std::string m_NotifyCorrelationId;

  std::string m_NfId;

  std::string m_SubsChangeNotifyUri;
  bool m_SubsChangeNotifyUriIsSet;
  std::string m_SubsChangeNotifyCorrelationId;
  bool m_SubsChangeNotifyCorrelationIdIsSet;
  std::string m_Supi;
  bool m_SupiIsSet;
  std::string m_GroupId;
  bool m_GroupIdIsSet;
  std::string m_Gpsi;
  bool m_GpsiIsSet;
  std::string m_Pei;
  bool m_PeiIsSet;
  bool m_AnyUE;
  bool m_AnyUEIsSet;
  AmfEventMode m_Options;
  bool m_OptionsIsSet;

  // Helper overload for validate. Used when one model stores another model and
  // calls it's validate.
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;
};

}  // namespace oai::amf::model

#endif /* AmfEventSubscription_H_ */
