/**
 * Namf_Communication
 * AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UeN1N2InfoSubscriptionCreateData.h
 *
 *
 */

#ifndef UeN1N2InfoSubscriptionCreateData_H_
#define UeN1N2InfoSubscriptionCreateData_H_

#include "N1MessageClass.h"
#include "N2InformationClass.h"
#include <string>
#include <nlohmann/json.hpp>

namespace oai {
namespace amf {
namespace model {

/// <summary>
///
/// </summary>
class UeN1N2InfoSubscriptionCreateData {
 public:
  UeN1N2InfoSubscriptionCreateData();
  virtual ~UeN1N2InfoSubscriptionCreateData();

  void validate();

  /////////////////////////////////////////////
  /// UeN1N2InfoSubscriptionCreateData members

  /// <summary>
  ///
  /// </summary>
  N2InformationClass getN2InformationClass() const;
  void setN2InformationClass(N2InformationClass const& value);
  bool n2InformationClassIsSet() const;
  void unsetN2InformationClass();
  /// <summary>
  ///
  /// </summary>
  std::string getN2NotifyCallbackUri() const;
  void setN2NotifyCallbackUri(std::string const& value);
  bool n2NotifyCallbackUriIsSet() const;
  void unsetN2NotifyCallbackUri();
  /// <summary>
  ///
  /// </summary>
  N1MessageClass getN1MessageClass() const;
  void setN1MessageClass(N1MessageClass const& value);
  bool n1MessageClassIsSet() const;
  void unsetN1MessageClass();
  /// <summary>
  ///
  /// </summary>
  std::string getN1NotifyCallbackUri() const;
  void setN1NotifyCallbackUri(std::string const& value);
  bool n1NotifyCallbackUriIsSet() const;
  void unsetN1NotifyCallbackUri();
  /// <summary>
  ///
  /// </summary>
  std::string getNfId() const;
  void setNfId(std::string const& value);
  bool nfIdIsSet() const;
  void unsetNfId();
  /// <summary>
  ///
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const& value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();

  friend void to_json(
      nlohmann::json& j, const UeN1N2InfoSubscriptionCreateData& o);
  friend void from_json(
      const nlohmann::json& j, UeN1N2InfoSubscriptionCreateData& o);

 protected:
  N2InformationClass m_N2InformationClass;
  bool m_N2InformationClassIsSet;
  std::string m_N2NotifyCallbackUri;
  bool m_N2NotifyCallbackUriIsSet;
  N1MessageClass m_N1MessageClass;
  bool m_N1MessageClassIsSet;
  std::string m_N1NotifyCallbackUri;
  bool m_N1NotifyCallbackUriIsSet;
  std::string m_NfId;
  bool m_NfIdIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
};

}  // namespace model
}  // namespace amf
}  // namespace oai

#endif /* UeN1N2InfoSubscriptionCreateData_H_ */
