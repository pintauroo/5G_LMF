/**
 * Namf_EventExposure
 * AMF Event Exposure Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AmfEvent.h
 *
 *
 */

#ifndef AmfEvent_H_
#define AmfEvent_H_

#include "LocationFilter.h"
#include "AmfEventArea.h"
#include <vector>
#include "AmfEventType.h"
#include <nlohmann/json.hpp>

namespace oai::amf::model {
using namespace oai::amf::model;
/// <summary>
///
/// </summary>
class AmfEvent {
 public:
  AmfEvent();
  virtual ~AmfEvent() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  bool operator==(const AmfEvent& rhs) const;
  bool operator!=(const AmfEvent& rhs) const;

  /////////////////////////////////////////////
  /// AmfEvent members

  /// <summary>
  ///
  /// </summary>
  AmfEventType getType() const;
  void setType(AmfEventType const& value);
  /// <summary>
  ///
  /// </summary>
  bool isImmediateFlag() const;
  void setImmediateFlag(bool const value);
  bool immediateFlagIsSet() const;
  void unsetImmediateFlag();
  /// <summary>
  ///
  /// </summary>
  std::vector<AmfEventArea> getAreaList() const;
  void setAreaList(std::vector<AmfEventArea> const& value);
  bool areaListIsSet() const;
  void unsetAreaList();
  /// <summary>
  ///
  /// </summary>
  std::vector<LocationFilter> getLocationFilterList() const;
  void setLocationFilterList(std::vector<LocationFilter> const& value);
  bool locationFilterListIsSet() const;
  void unsetLocationFilterList();
  /// <summary>
  ///
  /// </summary>
  int32_t getRefId() const;
  void setRefId(int32_t const value);
  bool refIdIsSet() const;
  void unsetRefId();

  friend void to_json(nlohmann::json& j, const AmfEvent& o);
  friend void from_json(const nlohmann::json& j, AmfEvent& o);

  // Helper overload for validate. Used when one model stores another model and
  // calls it's validate.
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

 protected:
  AmfEventType m_Type;

  bool m_ImmediateFlag;
  bool m_ImmediateFlagIsSet;
  std::vector<AmfEventArea> m_AreaList;
  bool m_AreaListIsSet;
  std::vector<LocationFilter> m_LocationFilterList;
  bool m_LocationFilterListIsSet;
  int32_t m_RefId;
  bool m_RefIdIsSet;
};

}  // namespace oai::amf::model

#endif /* AmfEvent_H_ */
