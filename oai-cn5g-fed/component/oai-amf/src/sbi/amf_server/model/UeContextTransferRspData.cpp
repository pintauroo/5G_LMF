/**
 * Namf_Communication
 * AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeContextTransferRspData.h"

namespace oai {
namespace amf {
namespace model {

UeContextTransferRspData::UeContextTransferRspData() {
  m_UeRadioCapabilityIsSet      = false;
  m_UeNbiotRadioCapabilityIsSet = false;
  m_SupportedFeatures           = "";
  m_SupportedFeaturesIsSet      = false;
}

UeContextTransferRspData::~UeContextTransferRspData() {}

void UeContextTransferRspData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json& j, const UeContextTransferRspData& o) {
  j              = nlohmann::json();
  j["ueContext"] = o.m_UeContext;
  if (o.ueRadioCapabilityIsSet())
    j["ueRadioCapability"] = o.m_UeRadioCapability;
  if (o.ueNbiotRadioCapabilityIsSet())
    j["ueNbiotRadioCapability"] = o.m_UeNbiotRadioCapability;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json& j, UeContextTransferRspData& o) {
  j.at("ueContext").get_to(o.m_UeContext);
  if (j.find("ueRadioCapability") != j.end()) {
    j.at("ueRadioCapability").get_to(o.m_UeRadioCapability);
    o.m_UeRadioCapabilityIsSet = true;
  }
  if (j.find("ueNbiotRadioCapability") != j.end()) {
    j.at("ueNbiotRadioCapability").get_to(o.m_UeNbiotRadioCapability);
    o.m_UeNbiotRadioCapabilityIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

UeContext UeContextTransferRspData::getUeContext() const {
  return m_UeContext;
}
void UeContextTransferRspData::setUeContext(UeContext const& value) {
  m_UeContext = value;
}
N2InfoContent UeContextTransferRspData::getUeRadioCapability() const {
  return m_UeRadioCapability;
}
void UeContextTransferRspData::setUeRadioCapability(
    N2InfoContent const& value) {
  m_UeRadioCapability      = value;
  m_UeRadioCapabilityIsSet = true;
}
bool UeContextTransferRspData::ueRadioCapabilityIsSet() const {
  return m_UeRadioCapabilityIsSet;
}
void UeContextTransferRspData::unsetUeRadioCapability() {
  m_UeRadioCapabilityIsSet = false;
}
N2InfoContent UeContextTransferRspData::getUeNbiotRadioCapability() const {
  return m_UeNbiotRadioCapability;
}
void UeContextTransferRspData::setUeNbiotRadioCapability(
    N2InfoContent const& value) {
  m_UeNbiotRadioCapability      = value;
  m_UeNbiotRadioCapabilityIsSet = true;
}
bool UeContextTransferRspData::ueNbiotRadioCapabilityIsSet() const {
  return m_UeNbiotRadioCapabilityIsSet;
}
void UeContextTransferRspData::unsetUeNbiotRadioCapability() {
  m_UeNbiotRadioCapabilityIsSet = false;
}
std::string UeContextTransferRspData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void UeContextTransferRspData::setSupportedFeatures(std::string const& value) {
  m_SupportedFeatures      = value;
  m_SupportedFeaturesIsSet = true;
}
bool UeContextTransferRspData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void UeContextTransferRspData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

}  // namespace model
}  // namespace amf
}  // namespace oai
