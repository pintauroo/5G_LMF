/**
 * Namf_Communication
 * AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NonUeN2InfoSubscriptionCreateData.h"

namespace oai {
namespace amf {
namespace model {

NonUeN2InfoSubscriptionCreateData::NonUeN2InfoSubscriptionCreateData() {
  m_GlobalRanNodeListIsSet = false;
  m_AnTypeListIsSet        = false;
  m_N2NotifyCallbackUri    = "";
  m_NfId                   = "";
  m_NfIdIsSet              = false;
  m_SupportedFeatures      = "";
  m_SupportedFeaturesIsSet = false;
}

NonUeN2InfoSubscriptionCreateData::~NonUeN2InfoSubscriptionCreateData() {}

void NonUeN2InfoSubscriptionCreateData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json& j, const NonUeN2InfoSubscriptionCreateData& o) {
  j = nlohmann::json();
  if (o.globalRanNodeListIsSet())
    j["globalRanNodeList"] = o.m_GlobalRanNodeList;
  if (o.anTypeListIsSet()) j["anTypeList"] = o.m_AnTypeList;
  j["n2InformationClass"]  = o.m_N2InformationClass;
  j["n2NotifyCallbackUri"] = o.m_N2NotifyCallbackUri;
  if (o.nfIdIsSet()) j["nfId"] = o.m_NfId;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json& j, NonUeN2InfoSubscriptionCreateData& o) {
  if (j.find("globalRanNodeList") != j.end()) {
    j.at("globalRanNodeList").get_to(o.m_GlobalRanNodeList);
    o.m_GlobalRanNodeListIsSet = true;
  }
  if (j.find("anTypeList") != j.end()) {
    j.at("anTypeList").get_to(o.m_AnTypeList);
    o.m_AnTypeListIsSet = true;
  }
  j.at("n2InformationClass").get_to(o.m_N2InformationClass);
  j.at("n2NotifyCallbackUri").get_to(o.m_N2NotifyCallbackUri);
  if (j.find("nfId") != j.end()) {
    j.at("nfId").get_to(o.m_NfId);
    o.m_NfIdIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

std::vector<GlobalRanNodeId>&
NonUeN2InfoSubscriptionCreateData::getGlobalRanNodeList() {
  return m_GlobalRanNodeList;
}
bool NonUeN2InfoSubscriptionCreateData::globalRanNodeListIsSet() const {
  return m_GlobalRanNodeListIsSet;
}
void NonUeN2InfoSubscriptionCreateData::unsetGlobalRanNodeList() {
  m_GlobalRanNodeListIsSet = false;
}
std::vector<AccessType>& NonUeN2InfoSubscriptionCreateData::getAnTypeList() {
  return m_AnTypeList;
}
bool NonUeN2InfoSubscriptionCreateData::anTypeListIsSet() const {
  return m_AnTypeListIsSet;
}
void NonUeN2InfoSubscriptionCreateData::unsetAnTypeList() {
  m_AnTypeListIsSet = false;
}
N2InformationClass NonUeN2InfoSubscriptionCreateData::getN2InformationClass()
    const {
  return m_N2InformationClass;
}
void NonUeN2InfoSubscriptionCreateData::setN2InformationClass(
    N2InformationClass const& value) {
  m_N2InformationClass = value;
}
std::string NonUeN2InfoSubscriptionCreateData::getN2NotifyCallbackUri() const {
  return m_N2NotifyCallbackUri;
}
void NonUeN2InfoSubscriptionCreateData::setN2NotifyCallbackUri(
    std::string const& value) {
  m_N2NotifyCallbackUri = value;
}
std::string NonUeN2InfoSubscriptionCreateData::getNfId() const {
  return m_NfId;
}
void NonUeN2InfoSubscriptionCreateData::setNfId(std::string const& value) {
  m_NfId      = value;
  m_NfIdIsSet = true;
}
bool NonUeN2InfoSubscriptionCreateData::nfIdIsSet() const {
  return m_NfIdIsSet;
}
void NonUeN2InfoSubscriptionCreateData::unsetNfId() {
  m_NfIdIsSet = false;
}
std::string NonUeN2InfoSubscriptionCreateData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void NonUeN2InfoSubscriptionCreateData::setSupportedFeatures(
    std::string const& value) {
  m_SupportedFeatures      = value;
  m_SupportedFeaturesIsSet = true;
}
bool NonUeN2InfoSubscriptionCreateData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void NonUeN2InfoSubscriptionCreateData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

}  // namespace model
}  // namespace amf
}  // namespace oai
