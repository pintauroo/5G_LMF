/**
 * Namf_Communication
 * AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "N2InfoContainer.h"

namespace oai {
namespace amf {
namespace model {

N2InfoContainer::N2InfoContainer() {
  m_SmInfoIsSet    = false;
  m_RanInfoIsSet   = false;
  m_NrppaInfoIsSet = false;
  m_PwsInfoIsSet   = false;
}

N2InfoContainer::~N2InfoContainer() {}

void N2InfoContainer::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json& j, const N2InfoContainer& o) {
  j                       = nlohmann::json();
  j["n2InformationClass"] = o.m_N2InformationClass;
  if (o.smInfoIsSet()) j["smInfo"] = o.m_SmInfo;
  if (o.ranInfoIsSet()) j["ranInfo"] = o.m_RanInfo;
  if (o.nrppaInfoIsSet()) j["nrppaInfo"] = o.m_NrppaInfo;
  if (o.pwsInfoIsSet()) j["pwsInfo"] = o.m_PwsInfo;
}

void from_json(const nlohmann::json& j, N2InfoContainer& o) {
  j.at("n2InformationClass").get_to(o.m_N2InformationClass);
  if (j.find("smInfo") != j.end()) {
    j.at("smInfo").get_to(o.m_SmInfo);
    o.m_SmInfoIsSet = true;
  }
  if (j.find("ranInfo") != j.end()) {
    j.at("ranInfo").get_to(o.m_RanInfo);
    o.m_RanInfoIsSet = true;
  }
  if (j.find("nrppaInfo") != j.end()) {
    j.at("nrppaInfo").get_to(o.m_NrppaInfo);
    o.m_NrppaInfoIsSet = true;
  }
  if (j.find("pwsInfo") != j.end()) {
    j.at("pwsInfo").get_to(o.m_PwsInfo);
    o.m_PwsInfoIsSet = true;
  }
}

N2InformationClass N2InfoContainer::getN2InformationClass() const {
  return m_N2InformationClass;
}
void N2InfoContainer::setN2InformationClass(N2InformationClass const& value) {
  m_N2InformationClass = value;
}
N2SmInformation N2InfoContainer::getSmInfo() const {
  return m_SmInfo;
}
void N2InfoContainer::setSmInfo(N2SmInformation const& value) {
  m_SmInfo      = value;
  m_SmInfoIsSet = true;
}
bool N2InfoContainer::smInfoIsSet() const {
  return m_SmInfoIsSet;
}
void N2InfoContainer::unsetSmInfo() {
  m_SmInfoIsSet = false;
}
N2RanInformation N2InfoContainer::getRanInfo() const {
  return m_RanInfo;
}
void N2InfoContainer::setRanInfo(N2RanInformation const& value) {
  m_RanInfo      = value;
  m_RanInfoIsSet = true;
}
bool N2InfoContainer::ranInfoIsSet() const {
  return m_RanInfoIsSet;
}
void N2InfoContainer::unsetRanInfo() {
  m_RanInfoIsSet = false;
}
NrppaInformation N2InfoContainer::getNrppaInfo() const {
  return m_NrppaInfo;
}
void N2InfoContainer::setNrppaInfo(NrppaInformation const& value) {
  m_NrppaInfo      = value;
  m_NrppaInfoIsSet = true;
}
bool N2InfoContainer::nrppaInfoIsSet() const {
  return m_NrppaInfoIsSet;
}
void N2InfoContainer::unsetNrppaInfo() {
  m_NrppaInfoIsSet = false;
}
PwsInformation N2InfoContainer::getPwsInfo() const {
  return m_PwsInfo;
}
void N2InfoContainer::setPwsInfo(PwsInformation const& value) {
  m_PwsInfo      = value;
  m_PwsInfoIsSet = true;
}
bool N2InfoContainer::pwsInfoIsSet() const {
  return m_PwsInfoIsSet;
}
void N2InfoContainer::unsetPwsInfo() {
  m_PwsInfoIsSet = false;
}

}  // namespace model
}  // namespace amf
}  // namespace oai
