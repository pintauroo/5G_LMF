/**
 * Namf_Communication
 * AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "N2InformationTransferRspData.h"

namespace oai {
namespace amf {
namespace model {

N2InformationTransferRspData::N2InformationTransferRspData() {
  m_PwsRspDataIsSet        = false;
  m_SupportedFeatures      = "";
  m_SupportedFeaturesIsSet = false;
}

N2InformationTransferRspData::~N2InformationTransferRspData() {}

void N2InformationTransferRspData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json& j, const N2InformationTransferRspData& o) {
  j           = nlohmann::json();
  j["result"] = o.m_Result;
  if (o.pwsRspDataIsSet()) j["pwsRspData"] = o.m_PwsRspData;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json& j, N2InformationTransferRspData& o) {
  j.at("result").get_to(o.m_Result);
  if (j.find("pwsRspData") != j.end()) {
    j.at("pwsRspData").get_to(o.m_PwsRspData);
    o.m_PwsRspDataIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

N2InformationTransferResult N2InformationTransferRspData::getResult() const {
  return m_Result;
}
void N2InformationTransferRspData::setResult(
    N2InformationTransferResult const& value) {
  m_Result = value;
}
PWSResponseData N2InformationTransferRspData::getPwsRspData() const {
  return m_PwsRspData;
}
void N2InformationTransferRspData::setPwsRspData(PWSResponseData const& value) {
  m_PwsRspData      = value;
  m_PwsRspDataIsSet = true;
}
bool N2InformationTransferRspData::pwsRspDataIsSet() const {
  return m_PwsRspDataIsSet;
}
void N2InformationTransferRspData::unsetPwsRspData() {
  m_PwsRspDataIsSet = false;
}
std::string N2InformationTransferRspData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void N2InformationTransferRspData::setSupportedFeatures(
    std::string const& value) {
  m_SupportedFeatures      = value;
  m_SupportedFeaturesIsSet = true;
}
bool N2InformationTransferRspData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void N2InformationTransferRspData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

}  // namespace model
}  // namespace amf
}  // namespace oai
