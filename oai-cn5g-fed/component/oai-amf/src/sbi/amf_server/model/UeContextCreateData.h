/**
 * Namf_Communication
 * AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * UeContextCreateData.h
 *
 *
 */

#ifndef UeContextCreateData_H_
#define UeContextCreateData_H_

#include "NgApCause.h"
#include "N2InfoContent.h"
#include "N2SmInformation.h"
#include "NgRanTargetId.h"
#include "UeContext.h"
#include <string>
#include <vector>
#include <nlohmann/json.hpp>

namespace oai {
namespace amf {
namespace model {

/// <summary>
///
/// </summary>
class UeContextCreateData {
 public:
  UeContextCreateData();
  virtual ~UeContextCreateData();

  void validate();

  /////////////////////////////////////////////
  /// UeContextCreateData members

  /// <summary>
  ///
  /// </summary>
  UeContext getUeContext() const;
  void setUeContext(UeContext const& value);
  /// <summary>
  ///
  /// </summary>
  NgRanTargetId getTargetId() const;
  void setTargetId(NgRanTargetId const& value);
  /// <summary>
  ///
  /// </summary>
  N2InfoContent getSourceToTargetData() const;
  void setSourceToTargetData(N2InfoContent const& value);
  /// <summary>
  ///
  /// </summary>
  std::vector<N2SmInformation>& getPduSessionList();
  /// <summary>
  ///
  /// </summary>
  std::string getMmeControlFteid() const;
  void setMmeControlFteid(std::string const& value);
  bool mmeControlFteidIsSet() const;
  void unsetMmeControlFteid();
  /// <summary>
  ///
  /// </summary>
  std::string getN2NotifyUri() const;
  void setN2NotifyUri(std::string const& value);
  bool n2NotifyUriIsSet() const;
  void unsetN2NotifyUri();
  /// <summary>
  ///
  /// </summary>
  N2InfoContent getUeRadioCapability() const;
  void setUeRadioCapability(N2InfoContent const& value);
  bool ueRadioCapabilityIsSet() const;
  void unsetUeRadioCapability();
  /// <summary>
  ///
  /// </summary>
  NgApCause getNgapCause() const;
  void setNgapCause(NgApCause const& value);
  bool ngapCauseIsSet() const;
  void unsetNgapCause();
  /// <summary>
  ///
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const& value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();

  friend void to_json(nlohmann::json& j, const UeContextCreateData& o);
  friend void from_json(const nlohmann::json& j, UeContextCreateData& o);

 protected:
  UeContext m_UeContext;

  NgRanTargetId m_TargetId;

  N2InfoContent m_SourceToTargetData;

  std::vector<N2SmInformation> m_PduSessionList;

  std::string m_MmeControlFteid;
  bool m_MmeControlFteidIsSet;
  std::string m_N2NotifyUri;
  bool m_N2NotifyUriIsSet;
  N2InfoContent m_UeRadioCapability;
  bool m_UeRadioCapabilityIsSet;
  NgApCause m_NgapCause;
  bool m_NgapCauseIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
};

}  // namespace model
}  // namespace amf
}  // namespace oai

#endif /* UeContextCreateData_H_ */
