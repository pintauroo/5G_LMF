/**
 * Namf_Communication
 * AMF Communication Service Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AssignedEbiData.h"

namespace oai {
namespace amf {
namespace model {

AssignedEbiData::AssignedEbiData() {
  m_PduSessionId         = 0;
  m_FailedArpListIsSet   = false;
  m_ReleasedEbiListIsSet = false;
}

AssignedEbiData::~AssignedEbiData() {}

void AssignedEbiData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json& j, const AssignedEbiData& o) {
  j                    = nlohmann::json();
  j["pduSessionId"]    = o.m_PduSessionId;
  j["assignedEbiList"] = o.m_AssignedEbiList;
  if (o.failedArpListIsSet()) j["failedArpList"] = o.m_FailedArpList;
  if (o.releasedEbiListIsSet()) j["releasedEbiList"] = o.m_ReleasedEbiList;
}

void from_json(const nlohmann::json& j, AssignedEbiData& o) {
  j.at("pduSessionId").get_to(o.m_PduSessionId);
  j.at("assignedEbiList").get_to(o.m_AssignedEbiList);
  if (j.find("failedArpList") != j.end()) {
    j.at("failedArpList").get_to(o.m_FailedArpList);
    o.m_FailedArpListIsSet = true;
  }
  if (j.find("releasedEbiList") != j.end()) {
    j.at("releasedEbiList").get_to(o.m_ReleasedEbiList);
    o.m_ReleasedEbiListIsSet = true;
  }
}

int32_t AssignedEbiData::getPduSessionId() const {
  return m_PduSessionId;
}
void AssignedEbiData::setPduSessionId(int32_t const value) {
  m_PduSessionId = value;
}
std::vector<EbiArpMapping>& AssignedEbiData::getAssignedEbiList() {
  return m_AssignedEbiList;
}
std::vector<Arp>& AssignedEbiData::getFailedArpList() {
  return m_FailedArpList;
}
bool AssignedEbiData::failedArpListIsSet() const {
  return m_FailedArpListIsSet;
}
void AssignedEbiData::unsetFailedArpList() {
  m_FailedArpListIsSet = false;
}
std::vector<int32_t>& AssignedEbiData::getReleasedEbiList() {
  return m_ReleasedEbiList;
}
bool AssignedEbiData::releasedEbiListIsSet() const {
  return m_ReleasedEbiListIsSet;
}
void AssignedEbiData::unsetReleasedEbiList() {
  m_ReleasedEbiListIsSet = false;
}

}  // namespace model
}  // namespace amf
}  // namespace oai
