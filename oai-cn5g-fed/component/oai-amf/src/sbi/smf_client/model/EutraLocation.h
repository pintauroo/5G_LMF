/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EutraLocation.h
 *
 *
 */

#ifndef OAI_SMF_MODEL_EutraLocation_H_
#define OAI_SMF_MODEL_EutraLocation_H_

#include "../ModelBase.h"

#include "Ecgi.h"
#include "Tai.h"
#include <cpprest/details/basic_types.h>
#include "GlobalRanNodeId.h"

namespace oai {
namespace smf {
namespace model {

/// <summary>
///
/// </summary>
class EutraLocation : public ModelBase {
 public:
  EutraLocation();
  virtual ~EutraLocation();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  void fromJson(const web::json::value& json) override;

  void toMultipart(
      std::shared_ptr<MultipartFormData> multipart,
      const utility::string_t& namePrefix) const override;
  void fromMultiPart(
      std::shared_ptr<MultipartFormData> multipart,
      const utility::string_t& namePrefix) override;

  /////////////////////////////////////////////
  /// EutraLocation members

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Tai> getTai() const;

  void setTai(const std::shared_ptr<Tai>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Ecgi> getEcgi() const;

  void setEcgi(const std::shared_ptr<Ecgi>& value);

  /// <summary>
  ///
  /// </summary>
  int32_t getAgeOfLocationInformation() const;
  bool ageOfLocationInformationIsSet() const;
  void unsetAgeOfLocationInformation();

  void setAgeOfLocationInformation(int32_t value);

  /// <summary>
  ///
  /// </summary>
  utility::datetime getUeLocationTimestamp() const;
  bool ueLocationTimestampIsSet() const;
  void unsetUeLocationTimestamp();

  void setUeLocationTimestamp(const utility::datetime& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getGeographicalInformation() const;
  bool geographicalInformationIsSet() const;
  void unsetGeographicalInformation();

  void setGeographicalInformation(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getGeodeticInformation() const;
  bool geodeticInformationIsSet() const;
  void unsetGeodeticInformation();

  void setGeodeticInformation(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<GlobalRanNodeId> getGlobalNgenbId() const;
  bool globalNgenbIdIsSet() const;
  void unsetGlobalNgenbId();

  void setGlobalNgenbId(const std::shared_ptr<GlobalRanNodeId>& value);

 protected:
  std::shared_ptr<Tai> m_Tai;
  std::shared_ptr<Ecgi> m_Ecgi;
  int32_t m_AgeOfLocationInformation;
  bool m_AgeOfLocationInformationIsSet;
  utility::datetime m_UeLocationTimestamp;
  bool m_UeLocationTimestampIsSet;
  utility::string_t m_GeographicalInformation;
  bool m_GeographicalInformationIsSet;
  utility::string_t m_GeodeticInformation;
  bool m_GeodeticInformationIsSet;
  std::shared_ptr<GlobalRanNodeId> m_GlobalNgenbId;
  bool m_GlobalNgenbIdIsSet;
};

}  // namespace model
}  // namespace smf
}  // namespace oai

#endif /* OAI_SMF_MODEL_EutraLocation_H_ */
