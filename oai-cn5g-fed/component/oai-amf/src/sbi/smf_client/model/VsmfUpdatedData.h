/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * VsmfUpdatedData.h
 *
 *
 */

#ifndef OAI_SMF_MODEL_VsmfUpdatedData_H_
#define OAI_SMF_MODEL_VsmfUpdatedData_H_

#include "../ModelBase.h"

#include "SecondaryRatUsageInfo.h"
#include "EbiArpMapping.h"
#include "RefToBinaryData.h"
#include "UserLocation.h"
#include <cpprest/details/basic_types.h>
#include "QosFlowItem.h"
#include "SecondaryRatUsageReport.h"
#include <vector>

namespace oai {
namespace smf {
namespace model {

/// <summary>
///
/// </summary>
class VsmfUpdatedData : public ModelBase {
 public:
  VsmfUpdatedData();
  virtual ~VsmfUpdatedData();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  void fromJson(const web::json::value& json) override;

  void toMultipart(
      std::shared_ptr<MultipartFormData> multipart,
      const utility::string_t& namePrefix) const override;
  void fromMultiPart(
      std::shared_ptr<MultipartFormData> multipart,
      const utility::string_t& namePrefix) override;

  /////////////////////////////////////////////
  /// VsmfUpdatedData members

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<QosFlowItem>>& getQosFlowsAddModList();
  bool qosFlowsAddModListIsSet() const;
  void unsetQosFlowsAddModList();

  void setQosFlowsAddModList(
      const std::vector<std::shared_ptr<QosFlowItem>>& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<QosFlowItem>>& getQosFlowsRelList();
  bool qosFlowsRelListIsSet() const;
  void unsetQosFlowsRelList();

  void setQosFlowsRelList(
      const std::vector<std::shared_ptr<QosFlowItem>>& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<QosFlowItem>>& getQosFlowsFailedtoAddModList();
  bool qosFlowsFailedtoAddModListIsSet() const;
  void unsetQosFlowsFailedtoAddModList();

  void setQosFlowsFailedtoAddModList(
      const std::vector<std::shared_ptr<QosFlowItem>>& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<QosFlowItem>>& getQosFlowsFailedtoRelList();
  bool qosFlowsFailedtoRelListIsSet() const;
  void unsetQosFlowsFailedtoRelList();

  void setQosFlowsFailedtoRelList(
      const std::vector<std::shared_ptr<QosFlowItem>>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RefToBinaryData> getN1SmInfoFromUe() const;
  bool n1SmInfoFromUeIsSet() const;
  void unsetN1SmInfoFromUe();

  void setN1SmInfoFromUe(const std::shared_ptr<RefToBinaryData>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RefToBinaryData> getUnknownN1SmInfo() const;
  bool unknownN1SmInfoIsSet() const;
  void unsetUnknownN1SmInfo();

  void setUnknownN1SmInfo(const std::shared_ptr<RefToBinaryData>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<UserLocation> getUeLocation() const;
  bool ueLocationIsSet() const;
  void unsetUeLocation();

  void setUeLocation(const std::shared_ptr<UserLocation>& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getUeTimeZone() const;
  bool ueTimeZoneIsSet() const;
  void unsetUeTimeZone();

  void setUeTimeZone(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<UserLocation> getAddUeLocation() const;
  bool addUeLocationIsSet() const;
  void unsetAddUeLocation();

  void setAddUeLocation(const std::shared_ptr<UserLocation>& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<EbiArpMapping>>& getAssignedEbiList();
  bool assignedEbiListIsSet() const;
  void unsetAssignedEbiList();

  void setAssignedEbiList(
      const std::vector<std::shared_ptr<EbiArpMapping>>& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<int32_t>& getFailedToAssignEbiList();
  bool failedToAssignEbiListIsSet() const;
  void unsetFailedToAssignEbiList();

  void setFailedToAssignEbiList(std::vector<int32_t> value);

  /// <summary>
  ///
  /// </summary>
  std::vector<int32_t>& getReleasedEbiList();
  bool releasedEbiListIsSet() const;
  void unsetReleasedEbiList();

  void setReleasedEbiList(std::vector<int32_t> value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<SecondaryRatUsageReport>>&
  getSecondaryRatUsageReport();
  bool secondaryRatUsageReportIsSet() const;
  void unsetSecondaryRatUsageReport();

  void setSecondaryRatUsageReport(
      const std::vector<std::shared_ptr<SecondaryRatUsageReport>>& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<SecondaryRatUsageInfo>>&
  getSecondaryRatUsageInfo();
  bool secondaryRatUsageInfoIsSet() const;
  void unsetSecondaryRatUsageInfo();

  void setSecondaryRatUsageInfo(
      const std::vector<std::shared_ptr<SecondaryRatUsageInfo>>& value);

 protected:
  std::vector<std::shared_ptr<QosFlowItem>> m_QosFlowsAddModList;
  bool m_QosFlowsAddModListIsSet;
  std::vector<std::shared_ptr<QosFlowItem>> m_QosFlowsRelList;
  bool m_QosFlowsRelListIsSet;
  std::vector<std::shared_ptr<QosFlowItem>> m_QosFlowsFailedtoAddModList;
  bool m_QosFlowsFailedtoAddModListIsSet;
  std::vector<std::shared_ptr<QosFlowItem>> m_QosFlowsFailedtoRelList;
  bool m_QosFlowsFailedtoRelListIsSet;
  std::shared_ptr<RefToBinaryData> m_N1SmInfoFromUe;
  bool m_N1SmInfoFromUeIsSet;
  std::shared_ptr<RefToBinaryData> m_UnknownN1SmInfo;
  bool m_UnknownN1SmInfoIsSet;
  std::shared_ptr<UserLocation> m_UeLocation;
  bool m_UeLocationIsSet;
  utility::string_t m_UeTimeZone;
  bool m_UeTimeZoneIsSet;
  std::shared_ptr<UserLocation> m_AddUeLocation;
  bool m_AddUeLocationIsSet;
  std::vector<std::shared_ptr<EbiArpMapping>> m_AssignedEbiList;
  bool m_AssignedEbiListIsSet;
  std::vector<int32_t> m_FailedToAssignEbiList;
  bool m_FailedToAssignEbiListIsSet;
  std::vector<int32_t> m_ReleasedEbiList;
  bool m_ReleasedEbiListIsSet;
  std::vector<std::shared_ptr<SecondaryRatUsageReport>>
      m_SecondaryRatUsageReport;
  bool m_SecondaryRatUsageReportIsSet;
  std::vector<std::shared_ptr<SecondaryRatUsageInfo>> m_SecondaryRatUsageInfo;
  bool m_SecondaryRatUsageInfoIsSet;
};

}  // namespace model
}  // namespace smf
}  // namespace oai

#endif /* OAI_SMF_MODEL_VsmfUpdatedData_H_ */
