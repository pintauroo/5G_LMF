/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SmContextUpdateData.h
 *
 *
 */

#ifndef OAI_SMF_MODEL_SmContextUpdateData_H_
#define OAI_SMF_MODEL_SmContextUpdateData_H_

#include "../ModelBase.h"

#include "MaReleaseIndication.h"
#include "ExemptionInd.h"
#include "NgRanTargetId.h"
#include "RatType.h"
#include "RefToBinaryData.h"
#include "BackupAmfInfo.h"
#include "UpCnxState.h"
#include "N2SmInfoType.h"
#include "PlmnId.h"
#include "Snssai.h"
#include "TraceData.h"
#include <vector>
#include "AccessType.h"
#include "NgApCause.h"
#include "EpsInterworkingIndication.h"
#include "Cause.h"
#include "UserLocation.h"
#include "HoState.h"
#include <cpprest/details/basic_types.h>
#include "PresenceState.h"
#include "Guami.h"

namespace oai {
namespace smf {
namespace model {

/// <summary>
///
/// </summary>
class SmContextUpdateData : public ModelBase {
 public:
  SmContextUpdateData();
  virtual ~SmContextUpdateData();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  void fromJson(const web::json::value& json) override;

  void toMultipart(
      std::shared_ptr<MultipartFormData> multipart,
      const utility::string_t& namePrefix) const override;
  void fromMultiPart(
      std::shared_ptr<MultipartFormData> multipart,
      const utility::string_t& namePrefix) override;

  /////////////////////////////////////////////
  /// SmContextUpdateData members

  /// <summary>
  ///
  /// </summary>
  utility::string_t getPei() const;
  bool peiIsSet() const;
  void unsetPei();

  void setPei(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getServingNfId() const;
  bool servingNfIdIsSet() const;
  void unsetServingNfId();

  void setServingNfId(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Guami> getGuami() const;
  bool guamiIsSet() const;
  void unsetGuami();

  void setGuami(const std::shared_ptr<Guami>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<PlmnId> getServingNetwork() const;
  bool servingNetworkIsSet() const;
  void unsetServingNetwork();

  void setServingNetwork(const std::shared_ptr<PlmnId>& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<BackupAmfInfo>>& getBackupAmfInfo();
  bool backupAmfInfoIsSet() const;
  void unsetBackupAmfInfo();

  void setBackupAmfInfo(
      const std::vector<std::shared_ptr<BackupAmfInfo>>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<AccessType> getAnType() const;
  bool anTypeIsSet() const;
  void unsetAnType();

  void setAnType(const std::shared_ptr<AccessType>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<AccessType> getSecondAnType() const;
  bool secondAnTypeIsSet() const;
  void unsetSecondAnType();

  void setSecondAnType(const std::shared_ptr<AccessType>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RatType> getRatType() const;
  bool ratTypeIsSet() const;
  void unsetRatType();

  void setRatType(const std::shared_ptr<RatType>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<PresenceState> getPresenceInLadn() const;
  bool presenceInLadnIsSet() const;
  void unsetPresenceInLadn();

  void setPresenceInLadn(const std::shared_ptr<PresenceState>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<UserLocation> getUeLocation() const;
  bool ueLocationIsSet() const;
  void unsetUeLocation();

  void setUeLocation(const std::shared_ptr<UserLocation>& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getUeTimeZone() const;
  bool ueTimeZoneIsSet() const;
  void unsetUeTimeZone();

  void setUeTimeZone(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<UserLocation> getAddUeLocation() const;
  bool addUeLocationIsSet() const;
  void unsetAddUeLocation();

  void setAddUeLocation(const std::shared_ptr<UserLocation>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<UpCnxState> getUpCnxState() const;
  bool upCnxStateIsSet() const;
  void unsetUpCnxState();

  void setUpCnxState(const std::shared_ptr<UpCnxState>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<HoState> getHoState() const;
  bool hoStateIsSet() const;
  void unsetHoState();

  void setHoState(const std::shared_ptr<HoState>& value);

  /// <summary>
  ///
  /// </summary>
  bool isToBeSwitched() const;
  bool toBeSwitchedIsSet() const;
  void unsetToBeSwitched();

  void setToBeSwitched(bool value);

  /// <summary>
  ///
  /// </summary>
  bool isFailedToBeSwitched() const;
  bool failedToBeSwitchedIsSet() const;
  void unsetFailedToBeSwitched();

  void setFailedToBeSwitched(bool value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RefToBinaryData> getN1SmMsg() const;
  bool n1SmMsgIsSet() const;
  void unsetN1SmMsg();

  void setN1SmMsg(const std::shared_ptr<RefToBinaryData>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RefToBinaryData> getN2SmInfo() const;
  bool n2SmInfoIsSet() const;
  void unsetN2SmInfo();

  void setN2SmInfo(const std::shared_ptr<RefToBinaryData>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<N2SmInfoType> getN2SmInfoType() const;
  bool n2SmInfoTypeIsSet() const;
  void unsetN2SmInfoType();

  void setN2SmInfoType(const std::shared_ptr<N2SmInfoType>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<NgRanTargetId> getTargetId() const;
  bool targetIdIsSet() const;
  void unsetTargetId();

  void setTargetId(const std::shared_ptr<NgRanTargetId>& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getTargetServingNfId() const;
  bool targetServingNfIdIsSet() const;
  void unsetTargetServingNfId();

  void setTargetServingNfId(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getSmContextStatusUri() const;
  bool smContextStatusUriIsSet() const;
  void unsetSmContextStatusUri();

  void setSmContextStatusUri(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  bool isDataForwarding() const;
  bool dataForwardingIsSet() const;
  void unsetDataForwarding();

  void setDataForwarding(bool value);

  /// <summary>
  ///
  /// </summary>
  std::vector<utility::string_t>& getEpsBearerSetup();
  bool epsBearerSetupIsSet() const;
  void unsetEpsBearerSetup();

  void setEpsBearerSetup(const std::vector<utility::string_t>& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<int32_t>& getRevokeEbiList();
  bool revokeEbiListIsSet() const;
  void unsetRevokeEbiList();

  void setRevokeEbiList(std::vector<int32_t> value);

  /// <summary>
  ///
  /// </summary>
  bool isRelease() const;
  bool releaseIsSet() const;
  void unsetRelease();

  void setRelease(bool value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Cause> getCause() const;
  bool causeIsSet() const;
  void unsetCause();

  void setCause(const std::shared_ptr<Cause>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<NgApCause> getNgApCause() const;
  bool ngApCauseIsSet() const;
  void unsetNgApCause();

  void setNgApCause(const std::shared_ptr<NgApCause>& value);

  /// <summary>
  ///
  /// </summary>
  int32_t get5gMmCauseValue() const;
  bool _5gMmCauseValueIsSet() const;
  void unset_5gMmCauseValue();

  void set5gMmCauseValue(int32_t value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Snssai> getSNssai() const;
  bool sNssaiIsSet() const;
  void unsetSNssai();

  void setSNssai(const std::shared_ptr<Snssai>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<TraceData> getTraceData() const;
  bool traceDataIsSet() const;
  void unsetTraceData();

  void setTraceData(const std::shared_ptr<TraceData>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<EpsInterworkingIndication> getEpsInterworkingInd() const;
  bool epsInterworkingIndIsSet() const;
  void unsetEpsInterworkingInd();

  void setEpsInterworkingInd(
      const std::shared_ptr<EpsInterworkingIndication>& value);

  /// <summary>
  ///
  /// </summary>
  bool isAnTypeCanBeChanged() const;
  bool anTypeCanBeChangedIsSet() const;
  void unsetAnTypeCanBeChanged();

  void setAnTypeCanBeChanged(bool value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RefToBinaryData> getN2SmInfoExt1() const;
  bool n2SmInfoExt1IsSet() const;
  void unsetN2SmInfoExt1();

  void setN2SmInfoExt1(const std::shared_ptr<RefToBinaryData>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<N2SmInfoType> getN2SmInfoTypeExt1() const;
  bool n2SmInfoTypeExt1IsSet() const;
  void unsetN2SmInfoTypeExt1();

  void setN2SmInfoTypeExt1(const std::shared_ptr<N2SmInfoType>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<MaReleaseIndication> getMaReleaseInd() const;
  bool maReleaseIndIsSet() const;
  void unsetMaReleaseInd();

  void setMaReleaseInd(const std::shared_ptr<MaReleaseIndication>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<ExemptionInd> getExemptionInd() const;
  bool exemptionIndIsSet() const;
  void unsetExemptionInd();

  void setExemptionInd(const std::shared_ptr<ExemptionInd>& value);

 protected:
  utility::string_t m_Pei;
  bool m_PeiIsSet;
  utility::string_t m_ServingNfId;
  bool m_ServingNfIdIsSet;
  std::shared_ptr<Guami> m_Guami;
  bool m_GuamiIsSet;
  std::shared_ptr<PlmnId> m_ServingNetwork;
  bool m_ServingNetworkIsSet;
  std::vector<std::shared_ptr<BackupAmfInfo>> m_BackupAmfInfo;
  bool m_BackupAmfInfoIsSet;
  std::shared_ptr<AccessType> m_AnType;
  bool m_AnTypeIsSet;
  std::shared_ptr<AccessType> m_SecondAnType;
  bool m_SecondAnTypeIsSet;
  std::shared_ptr<RatType> m_RatType;
  bool m_RatTypeIsSet;
  std::shared_ptr<PresenceState> m_PresenceInLadn;
  bool m_PresenceInLadnIsSet;
  std::shared_ptr<UserLocation> m_UeLocation;
  bool m_UeLocationIsSet;
  utility::string_t m_UeTimeZone;
  bool m_UeTimeZoneIsSet;
  std::shared_ptr<UserLocation> m_AddUeLocation;
  bool m_AddUeLocationIsSet;
  std::shared_ptr<UpCnxState> m_UpCnxState;
  bool m_UpCnxStateIsSet;
  std::shared_ptr<HoState> m_HoState;
  bool m_HoStateIsSet;
  bool m_ToBeSwitched;
  bool m_ToBeSwitchedIsSet;
  bool m_FailedToBeSwitched;
  bool m_FailedToBeSwitchedIsSet;
  std::shared_ptr<RefToBinaryData> m_N1SmMsg;
  bool m_N1SmMsgIsSet;
  std::shared_ptr<RefToBinaryData> m_N2SmInfo;
  bool m_N2SmInfoIsSet;
  std::shared_ptr<N2SmInfoType> m_N2SmInfoType;
  bool m_N2SmInfoTypeIsSet;
  std::shared_ptr<NgRanTargetId> m_TargetId;
  bool m_TargetIdIsSet;
  utility::string_t m_TargetServingNfId;
  bool m_TargetServingNfIdIsSet;
  utility::string_t m_SmContextStatusUri;
  bool m_SmContextStatusUriIsSet;
  bool m_DataForwarding;
  bool m_DataForwardingIsSet;
  std::vector<utility::string_t> m_EpsBearerSetup;
  bool m_EpsBearerSetupIsSet;
  std::vector<int32_t> m_RevokeEbiList;
  bool m_RevokeEbiListIsSet;
  bool m_Release;
  bool m_ReleaseIsSet;
  std::shared_ptr<Cause> m_Cause;
  bool m_CauseIsSet;
  std::shared_ptr<NgApCause> m_NgApCause;
  bool m_NgApCauseIsSet;
  int32_t m__5gMmCauseValue;
  bool m__5gMmCauseValueIsSet;
  std::shared_ptr<Snssai> m_SNssai;
  bool m_SNssaiIsSet;
  std::shared_ptr<TraceData> m_TraceData;
  bool m_TraceDataIsSet;
  std::shared_ptr<EpsInterworkingIndication> m_EpsInterworkingInd;
  bool m_EpsInterworkingIndIsSet;
  bool m_AnTypeCanBeChanged;
  bool m_AnTypeCanBeChangedIsSet;
  std::shared_ptr<RefToBinaryData> m_N2SmInfoExt1;
  bool m_N2SmInfoExt1IsSet;
  std::shared_ptr<N2SmInfoType> m_N2SmInfoTypeExt1;
  bool m_N2SmInfoTypeExt1IsSet;
  std::shared_ptr<MaReleaseIndication> m_MaReleaseInd;
  bool m_MaReleaseIndIsSet;
  std::shared_ptr<ExemptionInd> m_ExemptionInd;
  bool m_ExemptionIndIsSet;
};

}  // namespace model
}  // namespace smf
}  // namespace oai

#endif /* OAI_SMF_MODEL_SmContextUpdateData_H_ */
