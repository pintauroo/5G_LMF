/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * HsmfUpdateData.h
 *
 *
 */

#ifndef OAI_SMF_MODEL_HsmfUpdateData_H_
#define OAI_SMF_MODEL_HsmfUpdateData_H_

#include "../ModelBase.h"

#include "MaReleaseIndication.h"
#include "RatType.h"
#include "RefToBinaryData.h"
#include "QosFlowNotifyItem.h"
#include "PlmnId.h"
#include "QosFlowItem.h"
#include "SecondaryRatUsageReport.h"
#include <vector>
#include "AccessType.h"
#include "RequestIndication.h"
#include "NgApCause.h"
#include "SecondaryRatUsageInfo.h"
#include "EpsInterworkingIndication.h"
#include "Cause.h"
#include "UserLocation.h"
#include <cpprest/details/basic_types.h>
#include "PduSessionNotifyItem.h"
#include "TunnelInfo.h"

namespace oai {
namespace smf {
namespace model {

/// <summary>
///
/// </summary>
class HsmfUpdateData : public ModelBase {
 public:
  HsmfUpdateData();
  virtual ~HsmfUpdateData();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  void fromJson(const web::json::value& json) override;

  void toMultipart(
      std::shared_ptr<MultipartFormData> multipart,
      const utility::string_t& namePrefix) const override;
  void fromMultiPart(
      std::shared_ptr<MultipartFormData> multipart,
      const utility::string_t& namePrefix) override;

  /////////////////////////////////////////////
  /// HsmfUpdateData members

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RequestIndication> getRequestIndication() const;

  void setRequestIndication(const std::shared_ptr<RequestIndication>& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getPei() const;
  bool peiIsSet() const;
  void unsetPei();

  void setPei(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<TunnelInfo> getVcnTunnelInfo() const;
  bool vcnTunnelInfoIsSet() const;
  void unsetVcnTunnelInfo();

  void setVcnTunnelInfo(const std::shared_ptr<TunnelInfo>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<PlmnId> getServingNetwork() const;
  bool servingNetworkIsSet() const;
  void unsetServingNetwork();

  void setServingNetwork(const std::shared_ptr<PlmnId>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<AccessType> getAnType() const;
  bool anTypeIsSet() const;
  void unsetAnType();

  void setAnType(const std::shared_ptr<AccessType>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<AccessType> getSecondAnType() const;
  bool secondAnTypeIsSet() const;
  void unsetSecondAnType();

  void setSecondAnType(const std::shared_ptr<AccessType>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RatType> getRatType() const;
  bool ratTypeIsSet() const;
  void unsetRatType();

  void setRatType(const std::shared_ptr<RatType>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<UserLocation> getUeLocation() const;
  bool ueLocationIsSet() const;
  void unsetUeLocation();

  void setUeLocation(const std::shared_ptr<UserLocation>& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getUeTimeZone() const;
  bool ueTimeZoneIsSet() const;
  void unsetUeTimeZone();

  void setUeTimeZone(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<UserLocation> getAddUeLocation() const;
  bool addUeLocationIsSet() const;
  void unsetAddUeLocation();

  void setAddUeLocation(const std::shared_ptr<UserLocation>& value);

  /// <summary>
  ///
  /// </summary>
  bool isPauseCharging() const;
  bool pauseChargingIsSet() const;
  void unsetPauseCharging();

  void setPauseCharging(bool value);

  /// <summary>
  ///
  /// </summary>
  int32_t getPti() const;
  bool ptiIsSet() const;
  void unsetPti();

  void setPti(int32_t value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RefToBinaryData> getN1SmInfoFromUe() const;
  bool n1SmInfoFromUeIsSet() const;
  void unsetN1SmInfoFromUe();

  void setN1SmInfoFromUe(const std::shared_ptr<RefToBinaryData>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RefToBinaryData> getUnknownN1SmInfo() const;
  bool unknownN1SmInfoIsSet() const;
  void unsetUnknownN1SmInfo();

  void setUnknownN1SmInfo(const std::shared_ptr<RefToBinaryData>& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<QosFlowItem>>& getQosFlowsRelNotifyList();
  bool qosFlowsRelNotifyListIsSet() const;
  void unsetQosFlowsRelNotifyList();

  void setQosFlowsRelNotifyList(
      const std::vector<std::shared_ptr<QosFlowItem>>& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<QosFlowNotifyItem>>& getQosFlowsNotifyList();
  bool qosFlowsNotifyListIsSet() const;
  void unsetQosFlowsNotifyList();

  void setQosFlowsNotifyList(
      const std::vector<std::shared_ptr<QosFlowNotifyItem>>& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<PduSessionNotifyItem>>& getNotifyList();
  bool notifyListIsSet() const;
  void unsetNotifyList();

  void setNotifyList(
      const std::vector<std::shared_ptr<PduSessionNotifyItem>>& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<int32_t>& getEpsBearerId();
  bool epsBearerIdIsSet() const;
  void unsetEpsBearerId();

  void setEpsBearerId(std::vector<int32_t> value);

  /// <summary>
  ///
  /// </summary>
  bool isHoPreparationIndication() const;
  bool hoPreparationIndicationIsSet() const;
  void unsetHoPreparationIndication();

  void setHoPreparationIndication(bool value);

  /// <summary>
  ///
  /// </summary>
  std::vector<int32_t>& getRevokeEbiList();
  bool revokeEbiListIsSet() const;
  void unsetRevokeEbiList();

  void setRevokeEbiList(std::vector<int32_t> value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Cause> getCause() const;
  bool causeIsSet() const;
  void unsetCause();

  void setCause(const std::shared_ptr<Cause>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<NgApCause> getNgApCause() const;
  bool ngApCauseIsSet() const;
  void unsetNgApCause();

  void setNgApCause(const std::shared_ptr<NgApCause>& value);

  /// <summary>
  ///
  /// </summary>
  int32_t get5gMmCauseValue() const;
  bool _5gMmCauseValueIsSet() const;
  void unset_5gMmCauseValue();

  void set5gMmCauseValue(int32_t value);

  /// <summary>
  ///
  /// </summary>
  bool isAlwaysOnRequested() const;
  bool alwaysOnRequestedIsSet() const;
  void unsetAlwaysOnRequested();

  void setAlwaysOnRequested(bool value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<EpsInterworkingIndication> getEpsInterworkingInd() const;
  bool epsInterworkingIndIsSet() const;
  void unsetEpsInterworkingInd();

  void setEpsInterworkingInd(
      const std::shared_ptr<EpsInterworkingIndication>& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<SecondaryRatUsageReport>>&
  getSecondaryRatUsageReport();
  bool secondaryRatUsageReportIsSet() const;
  void unsetSecondaryRatUsageReport();

  void setSecondaryRatUsageReport(
      const std::vector<std::shared_ptr<SecondaryRatUsageReport>>& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<SecondaryRatUsageInfo>>&
  getSecondaryRatUsageInfo();
  bool secondaryRatUsageInfoIsSet() const;
  void unsetSecondaryRatUsageInfo();

  void setSecondaryRatUsageInfo(
      const std::vector<std::shared_ptr<SecondaryRatUsageInfo>>& value);

  /// <summary>
  ///
  /// </summary>
  bool isAnTypeCanBeChanged() const;
  bool anTypeCanBeChangedIsSet() const;
  void unsetAnTypeCanBeChanged();

  void setAnTypeCanBeChanged(bool value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<MaReleaseIndication> getMaReleaseInd() const;
  bool maReleaseIndIsSet() const;
  void unsetMaReleaseInd();

  void setMaReleaseInd(const std::shared_ptr<MaReleaseIndication>& value);

 protected:
  std::shared_ptr<RequestIndication> m_RequestIndication;
  utility::string_t m_Pei;
  bool m_PeiIsSet;
  std::shared_ptr<TunnelInfo> m_VcnTunnelInfo;
  bool m_VcnTunnelInfoIsSet;
  std::shared_ptr<PlmnId> m_ServingNetwork;
  bool m_ServingNetworkIsSet;
  std::shared_ptr<AccessType> m_AnType;
  bool m_AnTypeIsSet;
  std::shared_ptr<AccessType> m_SecondAnType;
  bool m_SecondAnTypeIsSet;
  std::shared_ptr<RatType> m_RatType;
  bool m_RatTypeIsSet;
  std::shared_ptr<UserLocation> m_UeLocation;
  bool m_UeLocationIsSet;
  utility::string_t m_UeTimeZone;
  bool m_UeTimeZoneIsSet;
  std::shared_ptr<UserLocation> m_AddUeLocation;
  bool m_AddUeLocationIsSet;
  bool m_PauseCharging;
  bool m_PauseChargingIsSet;
  int32_t m_Pti;
  bool m_PtiIsSet;
  std::shared_ptr<RefToBinaryData> m_N1SmInfoFromUe;
  bool m_N1SmInfoFromUeIsSet;
  std::shared_ptr<RefToBinaryData> m_UnknownN1SmInfo;
  bool m_UnknownN1SmInfoIsSet;
  std::vector<std::shared_ptr<QosFlowItem>> m_QosFlowsRelNotifyList;
  bool m_QosFlowsRelNotifyListIsSet;
  std::vector<std::shared_ptr<QosFlowNotifyItem>> m_QosFlowsNotifyList;
  bool m_QosFlowsNotifyListIsSet;
  std::vector<std::shared_ptr<PduSessionNotifyItem>> m_NotifyList;
  bool m_NotifyListIsSet;
  std::vector<int32_t> m_EpsBearerId;
  bool m_EpsBearerIdIsSet;
  bool m_HoPreparationIndication;
  bool m_HoPreparationIndicationIsSet;
  std::vector<int32_t> m_RevokeEbiList;
  bool m_RevokeEbiListIsSet;
  std::shared_ptr<Cause> m_Cause;
  bool m_CauseIsSet;
  std::shared_ptr<NgApCause> m_NgApCause;
  bool m_NgApCauseIsSet;
  int32_t m__5gMmCauseValue;
  bool m__5gMmCauseValueIsSet;
  bool m_AlwaysOnRequested;
  bool m_AlwaysOnRequestedIsSet;
  std::shared_ptr<EpsInterworkingIndication> m_EpsInterworkingInd;
  bool m_EpsInterworkingIndIsSet;
  std::vector<std::shared_ptr<SecondaryRatUsageReport>>
      m_SecondaryRatUsageReport;
  bool m_SecondaryRatUsageReportIsSet;
  std::vector<std::shared_ptr<SecondaryRatUsageInfo>> m_SecondaryRatUsageInfo;
  bool m_SecondaryRatUsageInfoIsSet;
  bool m_AnTypeCanBeChanged;
  bool m_AnTypeCanBeChangedIsSet;
  std::shared_ptr<MaReleaseIndication> m_MaReleaseInd;
  bool m_MaReleaseIndIsSet;
};

}  // namespace model
}  // namespace smf
}  // namespace oai

#endif /* OAI_SMF_MODEL_HsmfUpdateData_H_ */
