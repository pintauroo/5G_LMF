/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SmContextCreateData.h
 *
 *
 */

#ifndef OAI_SMF_MODEL_SmContextCreateData_H_
#define OAI_SMF_MODEL_SmContextCreateData_H_

#include "../ModelBase.h"

#include "NgRanTargetId.h"
#include "RatType.h"
#include "RefToBinaryData.h"
#include "BackupAmfInfo.h"
#include "PlmnId.h"
#include "Snssai.h"
#include "TraceData.h"
#include <vector>
#include "AccessType.h"
#include "DnnSelectionMode.h"
#include "EpsInterworkingIndication.h"
#include "ServiceName.h"
#include "UserLocation.h"
#include "HoState.h"
#include <cpprest/details/basic_types.h>
#include "PresenceState.h"
#include "RequestType.h"
#include "Guami.h"

namespace oai {
namespace smf {
namespace model {

/// <summary>
///
/// </summary>
class SmContextCreateData : public ModelBase {
 public:
  SmContextCreateData();
  virtual ~SmContextCreateData();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  void fromJson(const web::json::value& json) override;

  void toMultipart(
      std::shared_ptr<MultipartFormData> multipart,
      const utility::string_t& namePrefix) const override;
  void fromMultiPart(
      std::shared_ptr<MultipartFormData> multipart,
      const utility::string_t& namePrefix) override;

  /////////////////////////////////////////////
  /// SmContextCreateData members

  /// <summary>
  ///
  /// </summary>
  utility::string_t getSupi() const;
  bool supiIsSet() const;
  void unsetSupi();

  void setSupi(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  bool isUnauthenticatedSupi() const;
  bool unauthenticatedSupiIsSet() const;
  void unsetUnauthenticatedSupi();

  void setUnauthenticatedSupi(bool value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getPei() const;
  bool peiIsSet() const;
  void unsetPei();

  void setPei(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getGpsi() const;
  bool gpsiIsSet() const;
  void unsetGpsi();

  void setGpsi(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  int32_t getPduSessionId() const;
  bool pduSessionIdIsSet() const;
  void unsetPduSessionId();

  void setPduSessionId(int32_t value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getDnn() const;
  bool dnnIsSet() const;
  void unsetDnn();

  void setDnn(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Snssai> getSNssai() const;
  bool sNssaiIsSet() const;
  void unsetSNssai();

  void setSNssai(const std::shared_ptr<Snssai>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Snssai> getHplmnSnssai() const;
  bool hplmnSnssaiIsSet() const;
  void unsetHplmnSnssai();

  void setHplmnSnssai(const std::shared_ptr<Snssai>& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getServingNfId() const;

  void setServingNfId(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Guami> getGuami() const;
  bool guamiIsSet() const;
  void unsetGuami();

  void setGuami(const std::shared_ptr<Guami>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<ServiceName> getServiceName() const;
  bool serviceNameIsSet() const;
  void unsetServiceName();

  void setServiceName(const std::shared_ptr<ServiceName>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<PlmnId> getServingNetwork() const;

  void setServingNetwork(const std::shared_ptr<PlmnId>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RequestType> getRequestType() const;
  bool requestTypeIsSet() const;
  void unsetRequestType();

  void setRequestType(const std::shared_ptr<RequestType>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RefToBinaryData> getN1SmMsg() const;
  bool n1SmMsgIsSet() const;
  void unsetN1SmMsg();

  void setN1SmMsg(const std::shared_ptr<RefToBinaryData>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<AccessType> getAnType() const;

  void setAnType(const std::shared_ptr<AccessType>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<AccessType> getSecondAnType() const;
  bool secondAnTypeIsSet() const;
  void unsetSecondAnType();

  void setSecondAnType(const std::shared_ptr<AccessType>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RatType> getRatType() const;
  bool ratTypeIsSet() const;
  void unsetRatType();

  void setRatType(const std::shared_ptr<RatType>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<PresenceState> getPresenceInLadn() const;
  bool presenceInLadnIsSet() const;
  void unsetPresenceInLadn();

  void setPresenceInLadn(const std::shared_ptr<PresenceState>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<UserLocation> getUeLocation() const;
  bool ueLocationIsSet() const;
  void unsetUeLocation();

  void setUeLocation(const std::shared_ptr<UserLocation>& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getUeTimeZone() const;
  bool ueTimeZoneIsSet() const;
  void unsetUeTimeZone();

  void setUeTimeZone(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<UserLocation> getAddUeLocation() const;
  bool addUeLocationIsSet() const;
  void unsetAddUeLocation();

  void setAddUeLocation(const std::shared_ptr<UserLocation>& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getSmContextStatusUri() const;

  void setSmContextStatusUri(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getHSmfUri() const;
  bool hSmfUriIsSet() const;
  void unsetHSmfUri();

  void setHSmfUri(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<utility::string_t>& getAdditionalHsmfUri();
  bool additionalHsmfUriIsSet() const;
  void unsetAdditionalHsmfUri();

  void setAdditionalHsmfUri(const std::vector<utility::string_t>& value);

  /// <summary>
  ///
  /// </summary>
  int32_t getOldPduSessionId() const;
  bool oldPduSessionIdIsSet() const;
  void unsetOldPduSessionId();

  void setOldPduSessionId(int32_t value);

  /// <summary>
  ///
  /// </summary>
  std::vector<int32_t>& getPduSessionsActivateList();
  bool pduSessionsActivateListIsSet() const;
  void unsetPduSessionsActivateList();

  void setPduSessionsActivateList(std::vector<int32_t> value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getUeEpsPdnConnection() const;
  bool ueEpsPdnConnectionIsSet() const;
  void unsetUeEpsPdnConnection();

  void setUeEpsPdnConnection(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<HoState> getHoState() const;
  bool hoStateIsSet() const;
  void unsetHoState();

  void setHoState(const std::shared_ptr<HoState>& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getPcfId() const;
  bool pcfIdIsSet() const;
  void unsetPcfId();

  void setPcfId(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getNrfUri() const;
  bool nrfUriIsSet() const;
  void unsetNrfUri();

  void setNrfUri(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getSupportedFeatures() const;
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();

  void setSupportedFeatures(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<DnnSelectionMode> getSelMode() const;
  bool selModeIsSet() const;
  void unsetSelMode();

  void setSelMode(const std::shared_ptr<DnnSelectionMode>& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<BackupAmfInfo>>& getBackupAmfInfo();
  bool backupAmfInfoIsSet() const;
  void unsetBackupAmfInfo();

  void setBackupAmfInfo(
      const std::vector<std::shared_ptr<BackupAmfInfo>>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<TraceData> getTraceData() const;
  bool traceDataIsSet() const;
  void unsetTraceData();

  void setTraceData(const std::shared_ptr<TraceData>& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getUdmGroupId() const;
  bool udmGroupIdIsSet() const;
  void unsetUdmGroupId();

  void setUdmGroupId(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getRoutingIndicator() const;
  bool routingIndicatorIsSet() const;
  void unsetRoutingIndicator();

  void setRoutingIndicator(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<EpsInterworkingIndication> getEpsInterworkingInd() const;
  bool epsInterworkingIndIsSet() const;
  void unsetEpsInterworkingInd();

  void setEpsInterworkingInd(
      const std::shared_ptr<EpsInterworkingIndication>& value);

  /// <summary>
  ///
  /// </summary>
  bool isIndirectForwardingFlag() const;
  bool indirectForwardingFlagIsSet() const;
  void unsetIndirectForwardingFlag();

  void setIndirectForwardingFlag(bool value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<NgRanTargetId> getTargetId() const;
  bool targetIdIsSet() const;
  void unsetTargetId();

  void setTargetId(const std::shared_ptr<NgRanTargetId>& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getEpsBearerCtxStatus() const;
  bool epsBearerCtxStatusIsSet() const;
  void unsetEpsBearerCtxStatus();

  void setEpsBearerCtxStatus(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  bool isCpCiotEnabled() const;
  bool cpCiotEnabledIsSet() const;
  void unsetCpCiotEnabled();

  void setCpCiotEnabled(bool value);

  /// <summary>
  ///
  /// </summary>
  bool isInvokeNef() const;
  bool invokeNefIsSet() const;
  void unsetInvokeNef();

  void setInvokeNef(bool value);

  /// <summary>
  ///
  /// </summary>
  bool isMaPduIndication() const;
  bool maPduIndicationIsSet() const;
  void unsetMaPduIndication();

  void setMaPduIndication(bool value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RefToBinaryData> getN2SmInfo() const;
  bool n2SmInfoIsSet() const;
  void unsetN2SmInfo();

  void setN2SmInfo(const std::shared_ptr<RefToBinaryData>& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getSmContextRef() const;
  bool smContextRefIsSet() const;
  void unsetSmContextRef();

  void setSmContextRef(const utility::string_t& value);

 protected:
  utility::string_t m_Supi;
  bool m_SupiIsSet;
  bool m_UnauthenticatedSupi;
  bool m_UnauthenticatedSupiIsSet;
  utility::string_t m_Pei;
  bool m_PeiIsSet;
  utility::string_t m_Gpsi;
  bool m_GpsiIsSet;
  int32_t m_PduSessionId;
  bool m_PduSessionIdIsSet;
  utility::string_t m_Dnn;
  bool m_DnnIsSet;
  std::shared_ptr<Snssai> m_SNssai;
  bool m_SNssaiIsSet;
  std::shared_ptr<Snssai> m_HplmnSnssai;
  bool m_HplmnSnssaiIsSet;
  utility::string_t m_ServingNfId;
  std::shared_ptr<Guami> m_Guami;
  bool m_GuamiIsSet;
  std::shared_ptr<ServiceName> m_ServiceName;
  bool m_ServiceNameIsSet;
  std::shared_ptr<PlmnId> m_ServingNetwork;
  std::shared_ptr<RequestType> m_RequestType;
  bool m_RequestTypeIsSet;
  std::shared_ptr<RefToBinaryData> m_N1SmMsg;
  bool m_N1SmMsgIsSet;
  std::shared_ptr<AccessType> m_AnType;
  std::shared_ptr<AccessType> m_SecondAnType;
  bool m_SecondAnTypeIsSet;
  std::shared_ptr<RatType> m_RatType;
  bool m_RatTypeIsSet;
  std::shared_ptr<PresenceState> m_PresenceInLadn;
  bool m_PresenceInLadnIsSet;
  std::shared_ptr<UserLocation> m_UeLocation;
  bool m_UeLocationIsSet;
  utility::string_t m_UeTimeZone;
  bool m_UeTimeZoneIsSet;
  std::shared_ptr<UserLocation> m_AddUeLocation;
  bool m_AddUeLocationIsSet;
  utility::string_t m_SmContextStatusUri;
  utility::string_t m_HSmfUri;
  bool m_HSmfUriIsSet;
  std::vector<utility::string_t> m_AdditionalHsmfUri;
  bool m_AdditionalHsmfUriIsSet;
  int32_t m_OldPduSessionId;
  bool m_OldPduSessionIdIsSet;
  std::vector<int32_t> m_PduSessionsActivateList;
  bool m_PduSessionsActivateListIsSet;
  utility::string_t m_UeEpsPdnConnection;
  bool m_UeEpsPdnConnectionIsSet;
  std::shared_ptr<HoState> m_HoState;
  bool m_HoStateIsSet;
  utility::string_t m_PcfId;
  bool m_PcfIdIsSet;
  utility::string_t m_NrfUri;
  bool m_NrfUriIsSet;
  utility::string_t m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  std::shared_ptr<DnnSelectionMode> m_SelMode;
  bool m_SelModeIsSet;
  std::vector<std::shared_ptr<BackupAmfInfo>> m_BackupAmfInfo;
  bool m_BackupAmfInfoIsSet;
  std::shared_ptr<TraceData> m_TraceData;
  bool m_TraceDataIsSet;
  utility::string_t m_UdmGroupId;
  bool m_UdmGroupIdIsSet;
  utility::string_t m_RoutingIndicator;
  bool m_RoutingIndicatorIsSet;
  std::shared_ptr<EpsInterworkingIndication> m_EpsInterworkingInd;
  bool m_EpsInterworkingIndIsSet;
  bool m_IndirectForwardingFlag;
  bool m_IndirectForwardingFlagIsSet;
  std::shared_ptr<NgRanTargetId> m_TargetId;
  bool m_TargetIdIsSet;
  utility::string_t m_EpsBearerCtxStatus;
  bool m_EpsBearerCtxStatusIsSet;
  bool m_CpCiotEnabled;
  bool m_CpCiotEnabledIsSet;
  bool m_InvokeNef;
  bool m_InvokeNefIsSet;
  bool m_MaPduIndication;
  bool m_MaPduIndicationIsSet;
  std::shared_ptr<RefToBinaryData> m_N2SmInfo;
  bool m_N2SmInfoIsSet;
  utility::string_t m_SmContextRef;
  bool m_SmContextRefIsSet;
};

}  // namespace model
}  // namespace smf
}  // namespace oai

#endif /* OAI_SMF_MODEL_SmContextCreateData_H_ */
