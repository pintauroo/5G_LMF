/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ProblemDetails.h
 *
 *
 */

#ifndef OAI_AMF_MODEL_ProblemDetails_H_
#define OAI_AMF_MODEL_ProblemDetails_H_

#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "InvalidParam.h"
#include <vector>

namespace oai {
namespace smf {
namespace model {

/// <summary>
///
/// </summary>
class ProblemDetails : public ModelBase {
 public:
  ProblemDetails();
  virtual ~ProblemDetails();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  void fromJson(const web::json::value& json) override;

  void toMultipart(
      std::shared_ptr<MultipartFormData> multipart,
      const utility::string_t& namePrefix) const override;
  void fromMultiPart(
      std::shared_ptr<MultipartFormData> multipart,
      const utility::string_t& namePrefix) override;

  /////////////////////////////////////////////
  /// ProblemDetails members

  /// <summary>
  ///
  /// </summary>
  utility::string_t getType() const;
  bool typeIsSet() const;
  void unsetType();

  void setType(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getTitle() const;
  bool titleIsSet() const;
  void unsetTitle();

  void setTitle(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  int32_t getStatus() const;
  bool statusIsSet() const;
  void unsetStatus();

  void setStatus(int32_t value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getDetail() const;
  bool detailIsSet() const;
  void unsetDetail();

  void setDetail(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getInstance() const;
  bool instanceIsSet() const;
  void unsetInstance();

  void setInstance(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getCause() const;
  bool causeIsSet() const;
  void unsetCause();

  void setCause(const utility::string_t& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<InvalidParam>>& getInvalidParams();
  bool invalidParamsIsSet() const;
  void unsetInvalidParams();

  void setInvalidParams(
      const std::vector<std::shared_ptr<InvalidParam>>& value);

  /// <summary>
  ///
  /// </summary>
  utility::string_t getSupportedFeatures() const;
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();

  void setSupportedFeatures(const utility::string_t& value);

 protected:
  utility::string_t m_Type;
  bool m_TypeIsSet;
  utility::string_t m_Title;
  bool m_TitleIsSet;
  int32_t m_Status;
  bool m_StatusIsSet;
  utility::string_t m_Detail;
  bool m_DetailIsSet;
  utility::string_t m_Instance;
  bool m_InstanceIsSet;
  utility::string_t m_Cause;
  bool m_CauseIsSet;
  std::vector<std::shared_ptr<InvalidParam>> m_InvalidParams;
  bool m_InvalidParamsIsSet;
  utility::string_t m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
};

}  // namespace model
}  // namespace smf
}  // namespace oai

#endif /* OAI_AMF_MODEL_ProblemDetails_H_ */
