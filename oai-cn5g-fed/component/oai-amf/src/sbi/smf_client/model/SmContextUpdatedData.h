/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SmContextUpdatedData.h
 *
 *
 */

#ifndef OAI_SMF_MODEL_SmContextUpdatedData_H_
#define OAI_SMF_MODEL_SmContextUpdatedData_H_

#include "../ModelBase.h"

#include "EbiArpMapping.h"
#include "Cause.h"
#include "RefToBinaryData.h"
#include "UpCnxState.h"
#include "HoState.h"
#include <cpprest/details/basic_types.h>
#include "N2SmInfoType.h"
#include <vector>

namespace oai {
namespace smf {
namespace model {

/// <summary>
///
/// </summary>
class SmContextUpdatedData : public ModelBase {
 public:
  SmContextUpdatedData();
  virtual ~SmContextUpdatedData();

  /////////////////////////////////////////////
  /// ModelBase overrides

  void validate() override;

  web::json::value toJson() const override;
  void fromJson(const web::json::value& json) override;

  void toMultipart(
      std::shared_ptr<MultipartFormData> multipart,
      const utility::string_t& namePrefix) const override;
  void fromMultiPart(
      std::shared_ptr<MultipartFormData> multipart,
      const utility::string_t& namePrefix) override;

  /////////////////////////////////////////////
  /// SmContextUpdatedData members

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<UpCnxState> getUpCnxState() const;
  bool upCnxStateIsSet() const;
  void unsetUpCnxState();

  void setUpCnxState(const std::shared_ptr<UpCnxState>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<HoState> getHoState() const;
  bool hoStateIsSet() const;
  void unsetHoState();

  void setHoState(const std::shared_ptr<HoState>& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<int32_t>& getReleaseEbiList();
  bool releaseEbiListIsSet() const;
  void unsetReleaseEbiList();

  void setReleaseEbiList(std::vector<int32_t> value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<EbiArpMapping>>& getAllocatedEbiList();
  bool allocatedEbiListIsSet() const;
  void unsetAllocatedEbiList();

  void setAllocatedEbiList(
      const std::vector<std::shared_ptr<EbiArpMapping>>& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<std::shared_ptr<EbiArpMapping>>& getModifiedEbiList();
  bool modifiedEbiListIsSet() const;
  void unsetModifiedEbiList();

  void setModifiedEbiList(
      const std::vector<std::shared_ptr<EbiArpMapping>>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RefToBinaryData> getN1SmMsg() const;
  bool n1SmMsgIsSet() const;
  void unsetN1SmMsg();

  void setN1SmMsg(const std::shared_ptr<RefToBinaryData>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<RefToBinaryData> getN2SmInfo() const;
  bool n2SmInfoIsSet() const;
  void unsetN2SmInfo();

  void setN2SmInfo(const std::shared_ptr<RefToBinaryData>& value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<N2SmInfoType> getN2SmInfoType() const;
  bool n2SmInfoTypeIsSet() const;
  void unsetN2SmInfoType();

  void setN2SmInfoType(const std::shared_ptr<N2SmInfoType>& value);

  /// <summary>
  ///
  /// </summary>
  std::vector<utility::string_t>& getEpsBearerSetup();
  bool epsBearerSetupIsSet() const;
  void unsetEpsBearerSetup();

  void setEpsBearerSetup(const std::vector<utility::string_t>& value);

  /// <summary>
  ///
  /// </summary>
  bool isDataForwarding() const;
  bool dataForwardingIsSet() const;
  void unsetDataForwarding();

  void setDataForwarding(bool value);

  /// <summary>
  ///
  /// </summary>
  std::shared_ptr<Cause> getCause() const;
  bool causeIsSet() const;
  void unsetCause();

  void setCause(const std::shared_ptr<Cause>& value);

 protected:
  std::shared_ptr<UpCnxState> m_UpCnxState;
  bool m_UpCnxStateIsSet;
  std::shared_ptr<HoState> m_HoState;
  bool m_HoStateIsSet;
  std::vector<int32_t> m_ReleaseEbiList;
  bool m_ReleaseEbiListIsSet;
  std::vector<std::shared_ptr<EbiArpMapping>> m_AllocatedEbiList;
  bool m_AllocatedEbiListIsSet;
  std::vector<std::shared_ptr<EbiArpMapping>> m_ModifiedEbiList;
  bool m_ModifiedEbiListIsSet;
  std::shared_ptr<RefToBinaryData> m_N1SmMsg;
  bool m_N1SmMsgIsSet;
  std::shared_ptr<RefToBinaryData> m_N2SmInfo;
  bool m_N2SmInfoIsSet;
  std::shared_ptr<N2SmInfoType> m_N2SmInfoType;
  bool m_N2SmInfoTypeIsSet;
  std::vector<utility::string_t> m_EpsBearerSetup;
  bool m_EpsBearerSetupIsSet;
  bool m_DataForwarding;
  bool m_DataForwardingIsSet;
  std::shared_ptr<Cause> m_Cause;
  bool m_CauseIsSet;
};

}  // namespace model
}  // namespace smf
}  // namespace oai

#endif /* OAI_SMF_MODEL_SmContextUpdatedData_H_ */
