/**
 * Nsmf_PDUSession
 * SMF PDU Session Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.1.1-SNAPSHOT.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ApiConfiguration.h
 *
 * This class represents a single item of a multipart-formdata request.
 */

#ifndef OAI_SMF_API_ApiConfiguration_H_
#define OAI_SMF_API_ApiConfiguration_H_

#include <map>

#include <cpprest/details/basic_types.h>
#include <cpprest/http_client.h>
namespace oai {
namespace smf {
namespace api {

class ApiConfiguration {
 public:
  ApiConfiguration();
  virtual ~ApiConfiguration();

  web::http::client::http_client_config& getHttpConfig();
  void setHttpConfig(web::http::client::http_client_config& value);

  utility::string_t getBaseUrl() const;
  void setBaseUrl(const utility::string_t value);

  utility::string_t getUserAgent() const;
  void setUserAgent(const utility::string_t value);

  std::map<utility::string_t, utility::string_t>& getDefaultHeaders();

  utility::string_t getApiKey(const utility::string_t& prefix) const;
  void setApiKey(
      const utility::string_t& prefix, const utility::string_t& apiKey);

 protected:
  utility::string_t m_BaseUrl;
  std::map<utility::string_t, utility::string_t> m_DefaultHeaders;
  std::map<utility::string_t, utility::string_t> m_ApiKeys;
  web::http::client::http_client_config m_HttpConfig;
  utility::string_t m_UserAgent;
};

}  // namespace api
}  // namespace smf
}  // namespace oai
#endif /* OAI_SMF_API_ApiConfiguration_H_ */
