/**
 * NSSF NSSAI Availability
 * NSSF NSSAI Availability Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NSSAIAvailabilityStoreApi.h
 *
 *
 */

#ifndef NSSAIAvailabilityStoreApi_H_
#define NSSAIAvailabilityStoreApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include <utility>

#include "ProblemDetails.h"
#include "RedirectResponse.h"

namespace oai {
namespace nssf_server {
namespace api {

using namespace oai::nssf_server::model;

class NSSAIAvailabilityStoreApi {
 public:
  explicit NSSAIAvailabilityStoreApi(
      const std::shared_ptr<Pistache::Rest::Router>& rtr);
  virtual ~NSSAIAvailabilityStoreApi() = default;
  void init();

  static const std::string base;

 private:
  void setupRoutes();

  void n_ssai_availability_options_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);
  void nssai_availability_store_api_default_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);

  const std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Helper function to handle unexpected Exceptions during Parameter parsing
  /// and validation. May be overriden to return custom error formats. This is
  /// called inside a catch block. Important: When overriding, do not call
  /// `throw ex;`, but instead use `throw;`.
  /// </summary>
  virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(
      const std::exception& ex) const noexcept;

  /// <summary>
  /// Helper function to handle unexpected Exceptions during processing of the
  /// request in handler functions. May be overriden to return custom error
  /// formats. This is called inside a catch block. Important: When overriding,
  /// do not call `throw ex;`, but instead use `throw;`.
  /// </summary>
  virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(
      const std::exception& ex) const noexcept;

  /// <summary>
  /// Discover communication options supported by NSSF for NSSAI Availability
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  virtual void n_ssai_availability_options(
      Pistache::Http::ResponseWriter& response) = 0;
};

}  // namespace api
}  // namespace nssf_server
}  // namespace oai

#endif /* NSSAIAvailabilityStoreApi_H_ */
