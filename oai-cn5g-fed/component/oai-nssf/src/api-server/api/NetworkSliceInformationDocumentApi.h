/**
 * NSSF NS Selection
 * NSSF Network Slice Selection Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NetworkSliceInformationDocumentApi.h
 *
 *
 */

#ifndef NetworkSliceInformationDocumentApi_H_
#define NetworkSliceInformationDocumentApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include <utility>

#include "AuthorizedNetworkSliceInfo.h"
#include "NFType.h"
#include "PlmnId.h"
#include "ProblemDetails.h"
#include "RedirectResponse.h"
#include "SliceInfoForPDUSession.h"
#include "SliceInfoForRegistration.h"
#include "SliceInfoForUEConfigurationUpdate.h"
#include "Tai.h"

#include <string>

namespace oai {
namespace nssf_server {
namespace api {

using namespace oai::nssf_server::model;

class NetworkSliceInformationDocumentApi {
 public:
  explicit NetworkSliceInformationDocumentApi(
      const std::shared_ptr<Pistache::Rest::Router>& rtr);
  virtual ~NetworkSliceInformationDocumentApi() = default;
  void init();

  static const std::string base;

 private:
  void setupRoutes();

  void n_s_selection_get_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);
  void network_slice_information_document_api_default_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);

  const std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Helper function to handle unexpected Exceptions during Parameter parsing
  /// and validation. May be overriden to return custom error formats. This is
  /// called inside a catch block. Important: When overriding, do not call
  /// `throw ex;`, but instead use `throw;`.
  /// </summary>
  virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(
      const std::exception& ex) const noexcept;

  /// <summary>
  /// Helper function to handle unexpected Exceptions during processing of the
  /// request in handler functions. May be overriden to return custom error
  /// formats. This is called inside a catch block. Important: When overriding,
  /// do not call `throw ex;`, but instead use `throw;`.
  /// </summary>
  virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(
      const std::exception& ex) const noexcept;

  /// <summary>
  /// Retrieve the Network Slice Selection Information
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="nfType">NF type of the NF service consumer</param>
  /// <param name="nfId">NF Instance ID of the NF service consumer</param>
  /// <param name="sliceInfoRequestForRegistration">Requested network slice
  /// information during Registration procedure (optional, default to
  /// SliceInfoForRegistration())</param> <param
  /// name="sliceInfoRequestForPduSession">Requested network slice information
  /// during PDU session establishment procedure (optional, default to
  /// SliceInfoForPDUSession())</param> <param
  /// name="sliceInfoRequestForUeCu">Requested network slice information during
  /// UE confuguration update procedure (optional, default to
  /// SliceInfoForUEConfigurationUpdate())</param> <param name="homePlmnId">PLMN
  /// ID of the HPLMN (optional, default to PlmnId())</param> <param
  /// name="tai">TAI of the UE (optional, default to Tai())</param> <param
  /// name="supportedFeatures">Features required to be supported by the NFs in
  /// the target slice instance (optional, default to &quot;&quot;)</param>
  virtual void n_s_selection_get(
      const Pistache::Optional<NFType>& nfType,
      const Pistache::Optional<std::string>& nfId,
      const Pistache::Optional<SliceInfoForRegistration>&
          sliceInfoRequestForRegistration,
      const Pistache::Optional<SliceInfoForPDUSession>&
          sliceInfoRequestForPduSession,
      const Pistache::Optional<SliceInfoForUEConfigurationUpdate>&
          sliceInfoRequestForUeCu,
      const Pistache::Optional<PlmnId>& homePlmnId,
      const Pistache::Optional<Tai>& tai,
      const Pistache::Optional<std::string>& supportedFeatures,
      Pistache::Http::ResponseWriter& response) = 0;
};

}  // namespace api
}  // namespace nssf_server
}  // namespace oai

#endif /* NetworkSliceInformationDocumentApi_H_ */
