/**
 * NSSF NSSAI Availability
 * NSSF NSSAI Availability Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SubscriptionIDDocumentApi.h
 *
 *
 */

#ifndef SubscriptionIDDocumentApi_H_
#define SubscriptionIDDocumentApi_H_

#include <pistache/http.h>
#include <pistache/http_headers.h>
#include <pistache/optional.h>
#include <pistache/router.h>

#include <utility>

#include "NssfEventSubscriptionCreatedData.h"
#include "PatchItem.h"
#include "ProblemDetails.h"
#include "RedirectResponse.h"
#include <string>
#include <vector>

namespace oai {
namespace nssf_server {
namespace api {

using namespace oai::nssf_server::model;

class SubscriptionIDDocumentApi {
 public:
  explicit SubscriptionIDDocumentApi(
      const std::shared_ptr<Pistache::Rest::Router>& rtr);
  virtual ~SubscriptionIDDocumentApi() = default;
  void init();

  static const std::string base;

 private:
  void setupRoutes();

  void n_ssai_availability_sub_modify_patch_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);
  void n_ssai_availability_unsubscribe_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);
  void subscription_id_document_api_default_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);

  const std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Helper function to handle unexpected Exceptions during Parameter parsing
  /// and validation. May be overriden to return custom error formats. This is
  /// called inside a catch block. Important: When overriding, do not call
  /// `throw ex;`, but instead use `throw;`.
  /// </summary>
  virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(
      const std::exception& ex) const noexcept;

  /// <summary>
  /// Helper function to handle unexpected Exceptions during processing of the
  /// request in handler functions. May be overriden to return custom error
  /// formats. This is called inside a catch block. Important: When overriding,
  /// do not call `throw ex;`, but instead use `throw;`.
  /// </summary>
  virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(
      const std::exception& ex) const noexcept;

  /// <summary>
  /// updates an already existing NSSAI availability notification subscription
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="subscriptionId">Identifier of the subscription for
  /// notification</param> <param name="patchItem">JSON Patch instructions to
  /// update at the NSSF, the NSSAI availability notification
  /// subscription</param> <param name="contentEncoding">Content-Encoding,
  /// described in IETF RFC 7231 (optional, default to &quot;&quot;)</param>
  virtual void n_ssai_availability_sub_modify_patch(
      const std::string& subscriptionId,
      const std::vector<PatchItem>& patchItem,
      const Pistache::Optional<Pistache::Http::Header::Raw>& contentEncoding,
      Pistache::Http::ResponseWriter& response) = 0;
  /// <summary>
  /// Deletes an already existing NSSAI availability notification subscription
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="subscriptionId">Identifier of the subscription for
  /// notification</param>
  virtual void n_ssai_availability_unsubscribe(
      const std::string& subscriptionId,
      Pistache::Http::ResponseWriter& response) = 0;
};

}  // namespace api
}  // namespace nssf_server
}  // namespace oai

#endif /* SubscriptionIDDocumentApi_H_ */
