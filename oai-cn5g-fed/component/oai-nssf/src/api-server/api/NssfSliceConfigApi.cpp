/**
 * NSSF NS Selection
 * NSSF Network Slice Selection Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
#include "NssfSliceConfigApi.h"
#include "Helpers.h"

namespace oai {
namespace nssf_server {
namespace api {

using namespace oai::nssf_server::helpers;
using namespace oai::nssf_server::model;

const std::string NssfSliceConfigApi::base = "/";

NssfSliceConfigApi::NssfSliceConfigApi(
    const std::shared_ptr<Pistache::Rest::Router>& rtr)
    : router(rtr) {}

void NssfSliceConfigApi::init() {
  setupRoutes();
}

void NssfSliceConfigApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Get(
      *router, base,
      Routes::bind(
          &NssfSliceConfigApi::nssf_slice_config_get_apis_handler, this));
  Routes::Get(
      *router, base + "nnssf-slice-config",
      Routes::bind(&NssfSliceConfigApi::nssf_slice_config_get_handler, this));

  // Default handler, called when a route is not found
  // router->addCustomHandler(Routes::bind(&NssfSliceConfigApi=::nssf_slice_config_api_default_handler,
  // this));
}

std::pair<Pistache::Http::Code, std::string>
NssfSliceConfigApi::handleParsingException(const std::exception& ex) const
    noexcept {
  try {
    throw;
  } catch (nlohmann::detail::exception& e) {
    return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
    // } catch (oai::nssf_server::helpers::ValidationException &e) {
    //     return std::make_pair(Pistache::Http::Code::Bad_Request, e.what());
  } catch (std::exception& e) {
    return std::make_pair(
        Pistache::Http::Code::Internal_Server_Error, e.what());
  }
}

std::pair<Pistache::Http::Code, std::string>
NssfSliceConfigApi::handleOperationException(const std::exception& ex) const
    noexcept {
  return std::make_pair(Pistache::Http::Code::Internal_Server_Error, ex.what());
}

void NssfSliceConfigApi::nssf_slice_config_get_handler(
    const Pistache::Rest::Request& request,
    Pistache::Http::ResponseWriter response) {
  try {
    this->nssf_slice_config_get(response);
  } catch (Pistache::Http::HttpError& e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  }
}

void NssfSliceConfigApi::nssf_slice_config_get_apis_handler(
    const Pistache::Rest::Request& request,
    Pistache::Http::ResponseWriter response) {
  try {
    this->nssf_slice_config_get_apis(response);
  } catch (Pistache::Http::HttpError& e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  }
}
// void NssfSliceConfigApi::nssf_slice_config_api_default_handler(const
// Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
//     response.send(Pistache::Http::Code::Not_Found, "The requested method does
//     not exist");
// }

}  // namespace api
}  // namespace nssf_server
}  // namespace oai
