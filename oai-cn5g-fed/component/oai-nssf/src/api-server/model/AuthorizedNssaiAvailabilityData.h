/**
 * NSSF NSSAI Availability
 * NSSF NSSAI Availability Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AuthorizedNssaiAvailabilityData.h
 *
 *
 */

#ifndef AuthorizedNssaiAvailabilityData_H_
#define AuthorizedNssaiAvailabilityData_H_

#include "ExtSnssai.h"
#include "RestrictedSnssai.h"
#include "Tai.h"
#include "TaiRange.h"
#include <nlohmann/json.hpp>
#include <vector>

namespace oai {
namespace nssf_server {
namespace model {

/// <summary>
///
/// </summary>
class AuthorizedNssaiAvailabilityData {
 public:
  AuthorizedNssaiAvailabilityData();
  virtual ~AuthorizedNssaiAvailabilityData() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const AuthorizedNssaiAvailabilityData& rhs) const;
  bool operator!=(const AuthorizedNssaiAvailabilityData& rhs) const;

  /////////////////////////////////////////////
  /// AuthorizedNssaiAvailabilityData members

  /// <summary>
  ///
  /// </summary>
  Tai getTai() const;
  void setTai(Tai const& value);
  /// <summary>
  ///
  /// </summary>
  std::vector<ExtSnssai> getSupportedSnssaiList() const;
  void setSupportedSnssaiList(std::vector<ExtSnssai> const& value);
  /// <summary>
  ///
  /// </summary>
  std::vector<RestrictedSnssai> getRestrictedSnssaiList() const;
  void setRestrictedSnssaiList(std::vector<RestrictedSnssai> const& value);
  bool restrictedSnssaiListIsSet() const;
  void unsetRestrictedSnssaiList();
  /// <summary>
  ///
  /// </summary>
  std::vector<Tai> getTaiList() const;
  void setTaiList(std::vector<Tai> const& value);
  bool taiListIsSet() const;
  void unsetTaiList();
  /// <summary>
  ///
  /// </summary>
  std::vector<TaiRange> getTaiRangeList() const;
  void setTaiRangeList(std::vector<TaiRange> const& value);
  bool taiRangeListIsSet() const;
  void unsetTaiRangeList();

  friend void to_json(
      nlohmann::json& j, const AuthorizedNssaiAvailabilityData& o);
  friend void from_json(
      const nlohmann::json& j, AuthorizedNssaiAvailabilityData& o);

 protected:
  Tai m_Tai;

  std::vector<ExtSnssai> m_SupportedSnssaiList;

  std::vector<RestrictedSnssai> m_RestrictedSnssaiList;
  bool m_RestrictedSnssaiListIsSet;
  std::vector<Tai> m_TaiList;
  bool m_TaiListIsSet;
  std::vector<TaiRange> m_TaiRangeList;
  bool m_TaiRangeListIsSet;
};

}  // namespace model
}  // namespace nssf_server
}  // namespace oai

#endif /* AuthorizedNssaiAvailabilityData_H_ */
