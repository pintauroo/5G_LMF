/**
 * NSSF NS Selection
 * NSSF Network Slice Selection Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SliceInfoForUEConfigurationUpdate.h
 *
 *
 */

#ifndef SliceInfoForUEConfigurationUpdate_H_
#define SliceInfoForUEConfigurationUpdate_H_

#include "AllowedNssai.h"
#include "MappingOfSnssai.h"
#include "Snssai.h"
#include "SubscribedSnssai.h"
#include <nlohmann/json.hpp>
#include <vector>

namespace oai {
namespace nssf_server {
namespace model {

/// <summary>
///
/// </summary>
class SliceInfoForUEConfigurationUpdate {
 public:
  SliceInfoForUEConfigurationUpdate();
  virtual ~SliceInfoForUEConfigurationUpdate() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const SliceInfoForUEConfigurationUpdate& rhs) const;
  bool operator!=(const SliceInfoForUEConfigurationUpdate& rhs) const;

  /////////////////////////////////////////////
  /// SliceInfoForUEConfigurationUpdate members

  /// <summary>
  ///
  /// </summary>
  std::vector<SubscribedSnssai> getSubscribedNssai() const;
  void setSubscribedNssai(std::vector<SubscribedSnssai> const& value);
  bool subscribedNssaiIsSet() const;
  void unsetSubscribedNssai();
  /// <summary>
  ///
  /// </summary>
  AllowedNssai getAllowedNssaiCurrentAccess() const;
  void setAllowedNssaiCurrentAccess(AllowedNssai const& value);
  bool allowedNssaiCurrentAccessIsSet() const;
  void unsetAllowedNssaiCurrentAccess();
  /// <summary>
  ///
  /// </summary>
  AllowedNssai getAllowedNssaiOtherAccess() const;
  void setAllowedNssaiOtherAccess(AllowedNssai const& value);
  bool allowedNssaiOtherAccessIsSet() const;
  void unsetAllowedNssaiOtherAccess();
  /// <summary>
  ///
  /// </summary>
  bool isDefaultConfiguredSnssaiInd() const;
  void setDefaultConfiguredSnssaiInd(bool const value);
  bool defaultConfiguredSnssaiIndIsSet() const;
  void unsetDefaultConfiguredSnssaiInd();
  /// <summary>
  ///
  /// </summary>
  std::vector<Snssai> getRequestedNssai() const;
  void setRequestedNssai(std::vector<Snssai> const& value);
  bool requestedNssaiIsSet() const;
  void unsetRequestedNssai();
  /// <summary>
  ///
  /// </summary>
  std::vector<MappingOfSnssai> getMappingOfNssai() const;
  void setMappingOfNssai(std::vector<MappingOfSnssai> const& value);
  bool mappingOfNssaiIsSet() const;
  void unsetMappingOfNssai();

  friend void to_json(
      nlohmann::json& j, const SliceInfoForUEConfigurationUpdate& o);
  friend void from_json(
      const nlohmann::json& j, SliceInfoForUEConfigurationUpdate& o);

 protected:
  std::vector<SubscribedSnssai> m_SubscribedNssai;
  bool m_SubscribedNssaiIsSet;
  AllowedNssai m_AllowedNssaiCurrentAccess;
  bool m_AllowedNssaiCurrentAccessIsSet;
  AllowedNssai m_AllowedNssaiOtherAccess;
  bool m_AllowedNssaiOtherAccessIsSet;
  bool m_DefaultConfiguredSnssaiInd;
  bool m_DefaultConfiguredSnssaiIndIsSet;
  std::vector<Snssai> m_RequestedNssai;
  bool m_RequestedNssaiIsSet;
  std::vector<MappingOfSnssai> m_MappingOfNssai;
  bool m_MappingOfNssaiIsSet;
};

}  // namespace model
}  // namespace nssf_server
}  // namespace oai

#endif /* SliceInfoForUEConfigurationUpdate_H_ */
