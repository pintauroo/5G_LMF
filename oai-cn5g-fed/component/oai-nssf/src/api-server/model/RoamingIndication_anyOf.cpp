/**
 * NSSF NS Selection
 * NSSF Network Slice Selection Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RoamingIndication_anyOf.h"
#include "Helpers.h"
#include <sstream>
#include <stdexcept>

namespace oai {
namespace nssf_server {
namespace model {

RoamingIndication_anyOf::RoamingIndication_anyOf() {}

void RoamingIndication_anyOf::validate() const {
  std::stringstream msg;
  // if (!validate(msg))
  // {
  //     throw oai::nssf_server::helpers::ValidationException(msg.str());
  // }
}

bool RoamingIndication_anyOf::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool RoamingIndication_anyOf::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "RoamingIndication_anyOf" : pathPrefix;

  if (m_value == RoamingIndication_anyOf::eRoamingIndication_anyOf::
                     INVALID_VALUE_OPENAPI_GENERATED) {
    success = false;
    msg << _pathPrefix << ": has no value;";
  }

  return success;
}

bool RoamingIndication_anyOf::operator==(
    const RoamingIndication_anyOf& rhs) const {
  return getValue() == rhs.getValue()

      ;
}

bool RoamingIndication_anyOf::operator!=(
    const RoamingIndication_anyOf& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RoamingIndication_anyOf& o) {
  j = nlohmann::json();

  switch (o.getValue()) {
    case RoamingIndication_anyOf::eRoamingIndication_anyOf::
        INVALID_VALUE_OPENAPI_GENERATED:
      j = "INVALID_VALUE_OPENAPI_GENERATED";
      break;
    case RoamingIndication_anyOf::eRoamingIndication_anyOf::NON_ROAMING:
      j = "NON_ROAMING";
      break;
    case RoamingIndication_anyOf::eRoamingIndication_anyOf::LOCAL_BREAKOUT:
      j = "LOCAL_BREAKOUT";
      break;
    case RoamingIndication_anyOf::eRoamingIndication_anyOf::HOME_ROUTED_ROAMING:
      j = "HOME_ROUTED_ROAMING";
      break;
  }
}

void from_json(const nlohmann::json& j, RoamingIndication_anyOf& o) {
  auto s = j.get<std::string>();
  if (s == "NON_ROAMING") {
    o.setValue(RoamingIndication_anyOf::eRoamingIndication_anyOf::NON_ROAMING);
  } else if (s == "LOCAL_BREAKOUT") {
    o.setValue(
        RoamingIndication_anyOf::eRoamingIndication_anyOf::LOCAL_BREAKOUT);
  } else if (s == "HOME_ROUTED_ROAMING") {
    o.setValue(
        RoamingIndication_anyOf::eRoamingIndication_anyOf::HOME_ROUTED_ROAMING);
  } else {
    std::stringstream ss;
    ss << "Unexpected value " << s << " in json"
       << " cannot be converted to enum of type"
       << " RoamingIndication_anyOf::eRoamingIndication_anyOf";
    throw std::invalid_argument(ss.str());
  }
}

RoamingIndication_anyOf::eRoamingIndication_anyOf
RoamingIndication_anyOf::getValue() const {
  return m_value;
}
void RoamingIndication_anyOf::setValue(
    RoamingIndication_anyOf::eRoamingIndication_anyOf value) {
  m_value = value;
}

}  // namespace model
}  // namespace nssf_server
}  // namespace oai
