/**
 * NSSF NS Selection
 * NSSF Network Slice Selection Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SliceInfoForPDUSession.h"
#include "Helpers.h"

#include <sstream>

namespace oai {
namespace nssf_server {
namespace model {

SliceInfoForPDUSession::SliceInfoForPDUSession() {
  m_HomeSnssaiIsSet = false;
}

void SliceInfoForPDUSession::validate() const {
  std::stringstream msg;
  // if (!validate(msg))
  // {
  //     throw oai::nssf_server::helpers::ValidationException(msg.str());
  // }
}

bool SliceInfoForPDUSession::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool SliceInfoForPDUSession::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "SliceInfoForPDUSession" : pathPrefix;

  return success;
}

bool SliceInfoForPDUSession::operator==(
    const SliceInfoForPDUSession& rhs) const {
  return

      (getSNssai() == rhs.getSNssai()) &&

      (getRoamingIndication() == rhs.getRoamingIndication()) &&

      ((!homeSnssaiIsSet() && !rhs.homeSnssaiIsSet()) ||
       (homeSnssaiIsSet() && rhs.homeSnssaiIsSet() &&
        getHomeSnssai() == rhs.getHomeSnssai()))

          ;
}

bool SliceInfoForPDUSession::operator!=(
    const SliceInfoForPDUSession& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const SliceInfoForPDUSession& o) {
  j                      = nlohmann::json();
  j["sNssai"]            = o.m_SNssai;
  j["roamingIndication"] = o.m_RoamingIndication;
  if (o.homeSnssaiIsSet()) j["homeSnssai"] = o.m_HomeSnssai;
}

void from_json(const nlohmann::json& j, SliceInfoForPDUSession& o) {
  j.at("sNssai").get_to(o.m_SNssai);
  j.at("roamingIndication").get_to(o.m_RoamingIndication);
  if (j.find("homeSnssai") != j.end()) {
    j.at("homeSnssai").get_to(o.m_HomeSnssai);
    o.m_HomeSnssaiIsSet = true;
  }
}

Snssai SliceInfoForPDUSession::getSNssai() const {
  return m_SNssai;
}
void SliceInfoForPDUSession::setSNssai(Snssai const& value) {
  m_SNssai = value;
}
RoamingIndication SliceInfoForPDUSession::getRoamingIndication() const {
  return m_RoamingIndication;
}
void SliceInfoForPDUSession::setRoamingIndication(
    RoamingIndication const& value) {
  m_RoamingIndication = value;
}
Snssai SliceInfoForPDUSession::getHomeSnssai() const {
  return m_HomeSnssai;
}
void SliceInfoForPDUSession::setHomeSnssai(Snssai const& value) {
  m_HomeSnssai      = value;
  m_HomeSnssaiIsSet = true;
}
bool SliceInfoForPDUSession::homeSnssaiIsSet() const {
  return m_HomeSnssaiIsSet;
}
void SliceInfoForPDUSession::unsetHomeSnssai() {
  m_HomeSnssaiIsSet = false;
}

}  // namespace model
}  // namespace nssf_server
}  // namespace oai
