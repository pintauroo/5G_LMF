/**
 * NSSF NSSAI Availability
 * NSSF NSSAI Availability Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NssaiAvailabilityInfo.h"
#include "Helpers.h"

#include <sstream>

namespace oai {
namespace nssf_server {
namespace model {

NssaiAvailabilityInfo::NssaiAvailabilityInfo() {
  m_SupportedFeatures      = "";
  m_SupportedFeaturesIsSet = false;
  m_AmfSetId               = "";
  m_AmfSetIdIsSet          = false;
}

void NssaiAvailabilityInfo::validate() const {
  std::stringstream msg;
  // if (!validate(msg))
  // {
  //     throw oai::nssf_server::helpers::ValidationException(msg.str());
  // }
}

bool NssaiAvailabilityInfo::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool NssaiAvailabilityInfo::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "NssaiAvailabilityInfo" : pathPrefix;

  /* SupportedNssaiAvailabilityData */ {
    const std::vector<SupportedNssaiAvailabilityData>& value =
        m_SupportedNssaiAvailabilityData;
    const std::string currentValuePath =
        _pathPrefix + ".supportedNssaiAvailabilityData";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const SupportedNssaiAvailabilityData& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(
                msg, currentValuePath + ".supportedNssaiAvailabilityData") &&
            success;

        i++;
      }
    }
  }

  if (supportedFeaturesIsSet()) {
    const std::string& value           = m_SupportedFeatures;
    const std::string currentValuePath = _pathPrefix + ".supportedFeatures";
  }

  if (amfSetIdIsSet()) {
    const std::string& value           = m_AmfSetId;
    const std::string currentValuePath = _pathPrefix + ".amfSetId";
  }

  return success;
}

bool NssaiAvailabilityInfo::operator==(const NssaiAvailabilityInfo& rhs) const {
  return

      (getSupportedNssaiAvailabilityData() ==
       rhs.getSupportedNssaiAvailabilityData()) &&

      ((!supportedFeaturesIsSet() && !rhs.supportedFeaturesIsSet()) ||
       (supportedFeaturesIsSet() && rhs.supportedFeaturesIsSet() &&
        getSupportedFeatures() == rhs.getSupportedFeatures())) &&

      ((!amfSetIdIsSet() && !rhs.amfSetIdIsSet()) ||
       (amfSetIdIsSet() && rhs.amfSetIdIsSet() &&
        getAmfSetId() == rhs.getAmfSetId()))

          ;
}

bool NssaiAvailabilityInfo::operator!=(const NssaiAvailabilityInfo& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NssaiAvailabilityInfo& o) {
  j                                   = nlohmann::json();
  j["supportedNssaiAvailabilityData"] = o.m_SupportedNssaiAvailabilityData;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.amfSetIdIsSet()) j["amfSetId"] = o.m_AmfSetId;
}

void from_json(const nlohmann::json& j, NssaiAvailabilityInfo& o) {
  j.at("supportedNssaiAvailabilityData")
      .get_to(o.m_SupportedNssaiAvailabilityData);
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("amfSetId") != j.end()) {
    j.at("amfSetId").get_to(o.m_AmfSetId);
    o.m_AmfSetIdIsSet = true;
  }
}

std::vector<SupportedNssaiAvailabilityData>
NssaiAvailabilityInfo::getSupportedNssaiAvailabilityData() const {
  return m_SupportedNssaiAvailabilityData;
}
void NssaiAvailabilityInfo::setSupportedNssaiAvailabilityData(
    std::vector<SupportedNssaiAvailabilityData> const& value) {
  m_SupportedNssaiAvailabilityData = value;
}
std::string NssaiAvailabilityInfo::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void NssaiAvailabilityInfo::setSupportedFeatures(std::string const& value) {
  m_SupportedFeatures      = value;
  m_SupportedFeaturesIsSet = true;
}
bool NssaiAvailabilityInfo::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void NssaiAvailabilityInfo::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
std::string NssaiAvailabilityInfo::getAmfSetId() const {
  return m_AmfSetId;
}
void NssaiAvailabilityInfo::setAmfSetId(std::string const& value) {
  m_AmfSetId      = value;
  m_AmfSetIdIsSet = true;
}
bool NssaiAvailabilityInfo::amfSetIdIsSet() const {
  return m_AmfSetIdIsSet;
}
void NssaiAvailabilityInfo::unsetAmfSetId() {
  m_AmfSetIdIsSet = false;
}

}  // namespace model
}  // namespace nssf_server
}  // namespace oai
