/**
 * NSSF NSSAI Availability
 * NSSF NSSAI Availability Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RestrictedSnssai.h"
#include "Helpers.h"

#include <sstream>

namespace oai {
namespace nssf_server {
namespace model {

RestrictedSnssai::RestrictedSnssai() {
  m_HomePlmnIdListIsSet     = false;
  m_RoamingRestriction      = false;
  m_RoamingRestrictionIsSet = false;
}

void RestrictedSnssai::validate() const {
  std::stringstream msg;
  // if (!validate(msg))
  // {
  //     throw oai::nssf_server::helpers::ValidationException(msg.str());
  // }
}

bool RestrictedSnssai::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool RestrictedSnssai::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "RestrictedSnssai" : pathPrefix;

  /* SNssaiList */ {
    const std::vector<ExtSnssai>& value = m_SNssaiList;
    const std::string currentValuePath  = _pathPrefix + ".sNssaiList";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const ExtSnssai& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".sNssaiList") && success;

        i++;
      }
    }
  }

  if (homePlmnIdListIsSet()) {
    const std::vector<PlmnId>& value   = m_HomePlmnIdList;
    const std::string currentValuePath = _pathPrefix + ".homePlmnIdList";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const PlmnId& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".homePlmnIdList") &&
                  success;

        i++;
      }
    }
  }

  return success;
}

bool RestrictedSnssai::operator==(const RestrictedSnssai& rhs) const {
  return

      (getHomePlmnId() == rhs.getHomePlmnId()) &&

      (getSNssaiList() == rhs.getSNssaiList()) &&

      ((!homePlmnIdListIsSet() && !rhs.homePlmnIdListIsSet()) ||
       (homePlmnIdListIsSet() && rhs.homePlmnIdListIsSet() &&
        getHomePlmnIdList() == rhs.getHomePlmnIdList())) &&

      ((!roamingRestrictionIsSet() && !rhs.roamingRestrictionIsSet()) ||
       (roamingRestrictionIsSet() && rhs.roamingRestrictionIsSet() &&
        isRoamingRestriction() == rhs.isRoamingRestriction()))

          ;
}

bool RestrictedSnssai::operator!=(const RestrictedSnssai& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const RestrictedSnssai& o) {
  j               = nlohmann::json();
  j["homePlmnId"] = o.m_HomePlmnId;
  j["sNssaiList"] = o.m_SNssaiList;
  if (o.homePlmnIdListIsSet() || !o.m_HomePlmnIdList.empty())
    j["homePlmnIdList"] = o.m_HomePlmnIdList;
  if (o.roamingRestrictionIsSet())
    j["roamingRestriction"] = o.m_RoamingRestriction;
}

void from_json(const nlohmann::json& j, RestrictedSnssai& o) {
  j.at("homePlmnId").get_to(o.m_HomePlmnId);
  j.at("sNssaiList").get_to(o.m_SNssaiList);
  if (j.find("homePlmnIdList") != j.end()) {
    j.at("homePlmnIdList").get_to(o.m_HomePlmnIdList);
    o.m_HomePlmnIdListIsSet = true;
  }
  if (j.find("roamingRestriction") != j.end()) {
    j.at("roamingRestriction").get_to(o.m_RoamingRestriction);
    o.m_RoamingRestrictionIsSet = true;
  }
}

PlmnId RestrictedSnssai::getHomePlmnId() const {
  return m_HomePlmnId;
}
void RestrictedSnssai::setHomePlmnId(PlmnId const& value) {
  m_HomePlmnId = value;
}
std::vector<ExtSnssai> RestrictedSnssai::getSNssaiList() const {
  return m_SNssaiList;
}
void RestrictedSnssai::setSNssaiList(std::vector<ExtSnssai> const& value) {
  m_SNssaiList = value;
}
std::vector<PlmnId> RestrictedSnssai::getHomePlmnIdList() const {
  return m_HomePlmnIdList;
}
void RestrictedSnssai::setHomePlmnIdList(std::vector<PlmnId> const& value) {
  m_HomePlmnIdList      = value;
  m_HomePlmnIdListIsSet = true;
}
bool RestrictedSnssai::homePlmnIdListIsSet() const {
  return m_HomePlmnIdListIsSet;
}
void RestrictedSnssai::unsetHomePlmnIdList() {
  m_HomePlmnIdListIsSet = false;
}
bool RestrictedSnssai::isRoamingRestriction() const {
  return m_RoamingRestriction;
}
void RestrictedSnssai::setRoamingRestriction(bool const value) {
  m_RoamingRestriction      = value;
  m_RoamingRestrictionIsSet = true;
}
bool RestrictedSnssai::roamingRestrictionIsSet() const {
  return m_RoamingRestrictionIsSet;
}
void RestrictedSnssai::unsetRoamingRestriction() {
  m_RoamingRestrictionIsSet = false;
}

}  // namespace model
}  // namespace nssf_server
}  // namespace oai
