/**
 * NSSF NSSAI Availability
 * NSSF NSSAI Availability Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NssaiAvailabilityInfo.h
 *
 *
 */

#ifndef NssaiAvailabilityInfo_H_
#define NssaiAvailabilityInfo_H_

#include "SupportedNssaiAvailabilityData.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace oai {
namespace nssf_server {
namespace model {

/// <summary>
///
/// </summary>
class NssaiAvailabilityInfo {
 public:
  NssaiAvailabilityInfo();
  virtual ~NssaiAvailabilityInfo() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const NssaiAvailabilityInfo& rhs) const;
  bool operator!=(const NssaiAvailabilityInfo& rhs) const;

  /////////////////////////////////////////////
  /// NssaiAvailabilityInfo members

  /// <summary>
  ///
  /// </summary>
  std::vector<SupportedNssaiAvailabilityData>
  getSupportedNssaiAvailabilityData() const;
  void setSupportedNssaiAvailabilityData(
      std::vector<SupportedNssaiAvailabilityData> const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const& value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  std::string getAmfSetId() const;
  void setAmfSetId(std::string const& value);
  bool amfSetIdIsSet() const;
  void unsetAmfSetId();

  friend void to_json(nlohmann::json& j, const NssaiAvailabilityInfo& o);
  friend void from_json(const nlohmann::json& j, NssaiAvailabilityInfo& o);

 protected:
  std::vector<SupportedNssaiAvailabilityData> m_SupportedNssaiAvailabilityData;

  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  std::string m_AmfSetId;
  bool m_AmfSetIdIsSet;
};

}  // namespace model
}  // namespace nssf_server
}  // namespace oai

#endif /* NssaiAvailabilityInfo_H_ */
