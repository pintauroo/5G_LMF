/**
 * NSSF NSSAI Availability
 * NSSF NSSAI Availability Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NssfEventNotification.h"
#include "Helpers.h"

#include <sstream>

namespace oai {
namespace nssf_server {
namespace model {

NssfEventNotification::NssfEventNotification() {
  m_SubscriptionId = "";
}

void NssfEventNotification::validate() const {
  std::stringstream msg;
  // if (!validate(msg))
  // {
  //     throw oai::nssf_server::helpers::ValidationException(msg.str());
  // }
}

bool NssfEventNotification::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool NssfEventNotification::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "NssfEventNotification" : pathPrefix;

  /* AuthorizedNssaiAvailabilityData */ {
    const std::vector<AuthorizedNssaiAvailabilityData>& value =
        m_AuthorizedNssaiAvailabilityData;
    const std::string currentValuePath =
        _pathPrefix + ".authorizedNssaiAvailabilityData";

    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const AuthorizedNssaiAvailabilityData& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(
                msg, currentValuePath + ".authorizedNssaiAvailabilityData") &&
            success;

        i++;
      }
    }
  }

  return success;
}

bool NssfEventNotification::operator==(const NssfEventNotification& rhs) const {
  return

      (getSubscriptionId() == rhs.getSubscriptionId()) &&

      (getAuthorizedNssaiAvailabilityData() ==
       rhs.getAuthorizedNssaiAvailabilityData())

          ;
}

bool NssfEventNotification::operator!=(const NssfEventNotification& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const NssfEventNotification& o) {
  j                                    = nlohmann::json();
  j["subscriptionId"]                  = o.m_SubscriptionId;
  j["authorizedNssaiAvailabilityData"] = o.m_AuthorizedNssaiAvailabilityData;
}

void from_json(const nlohmann::json& j, NssfEventNotification& o) {
  j.at("subscriptionId").get_to(o.m_SubscriptionId);
  j.at("authorizedNssaiAvailabilityData")
      .get_to(o.m_AuthorizedNssaiAvailabilityData);
}

std::string NssfEventNotification::getSubscriptionId() const {
  return m_SubscriptionId;
}
void NssfEventNotification::setSubscriptionId(std::string const& value) {
  m_SubscriptionId = value;
}
std::vector<AuthorizedNssaiAvailabilityData>
NssfEventNotification::getAuthorizedNssaiAvailabilityData() const {
  return m_AuthorizedNssaiAvailabilityData;
}
void NssfEventNotification::setAuthorizedNssaiAvailabilityData(
    std::vector<AuthorizedNssaiAvailabilityData> const& value) {
  m_AuthorizedNssaiAvailabilityData = value;
}

}  // namespace model
}  // namespace nssf_server
}  // namespace oai
