/**
 * NSSF NSSAI Availability
 * NSSF NSSAI Availability Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AuthorizedNssaiAvailabilityData.h"
#include "Helpers.h"

#include <sstream>

namespace oai {
namespace nssf_server {
namespace model {

AuthorizedNssaiAvailabilityData::AuthorizedNssaiAvailabilityData() {
  m_RestrictedSnssaiListIsSet = false;
  m_TaiListIsSet              = false;
  m_TaiRangeListIsSet         = false;
}

void AuthorizedNssaiAvailabilityData::validate() const {
  std::stringstream msg;
  // if (!validate(msg))
  // {
  //     throw oai::nssf_server::helpers::ValidationException(msg.str());
  // }
}

bool AuthorizedNssaiAvailabilityData::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool AuthorizedNssaiAvailabilityData::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "AuthorizedNssaiAvailabilityData" : pathPrefix;

  /* SupportedSnssaiList */ {
    const std::vector<ExtSnssai>& value = m_SupportedSnssaiList;
    const std::string currentValuePath  = _pathPrefix + ".supportedSnssaiList";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const ExtSnssai& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".supportedSnssaiList") &&
            success;

        i++;
      }
    }
  }

  if (restrictedSnssaiListIsSet()) {
    const std::vector<RestrictedSnssai>& value = m_RestrictedSnssaiList;
    const std::string currentValuePath = _pathPrefix + ".restrictedSnssaiList";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const RestrictedSnssai& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".restrictedSnssaiList") &&
            success;

        i++;
      }
    }
  }

  if (taiListIsSet()) {
    const std::vector<Tai>& value      = m_TaiList;
    const std::string currentValuePath = _pathPrefix + ".taiList";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const Tai& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success = value.validate(msg, currentValuePath + ".taiList") && success;

        i++;
      }
    }
  }

  if (taiRangeListIsSet()) {
    const std::vector<TaiRange>& value = m_TaiRangeList;
    const std::string currentValuePath = _pathPrefix + ".taiRangeList";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const TaiRange& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".taiRangeList") && success;

        i++;
      }
    }
  }

  return success;
}

bool AuthorizedNssaiAvailabilityData::operator==(
    const AuthorizedNssaiAvailabilityData& rhs) const {
  return

      (getTai() == rhs.getTai()) &&

      (getSupportedSnssaiList() == rhs.getSupportedSnssaiList()) &&

      ((!restrictedSnssaiListIsSet() && !rhs.restrictedSnssaiListIsSet()) ||
       (restrictedSnssaiListIsSet() && rhs.restrictedSnssaiListIsSet() &&
        getRestrictedSnssaiList() == rhs.getRestrictedSnssaiList())) &&

      ((!taiListIsSet() && !rhs.taiListIsSet()) ||
       (taiListIsSet() && rhs.taiListIsSet() &&
        getTaiList() == rhs.getTaiList())) &&

      ((!taiRangeListIsSet() && !rhs.taiRangeListIsSet()) ||
       (taiRangeListIsSet() && rhs.taiRangeListIsSet() &&
        getTaiRangeList() == rhs.getTaiRangeList()))

          ;
}

bool AuthorizedNssaiAvailabilityData::operator!=(
    const AuthorizedNssaiAvailabilityData& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const AuthorizedNssaiAvailabilityData& o) {
  j                        = nlohmann::json();
  j["tai"]                 = o.m_Tai;
  j["supportedSnssaiList"] = o.m_SupportedSnssaiList;
  if (o.restrictedSnssaiListIsSet() || !o.m_RestrictedSnssaiList.empty())
    j["restrictedSnssaiList"] = o.m_RestrictedSnssaiList;
  if (o.taiListIsSet() || !o.m_TaiList.empty()) j["taiList"] = o.m_TaiList;
  if (o.taiRangeListIsSet() || !o.m_TaiRangeList.empty())
    j["taiRangeList"] = o.m_TaiRangeList;
}

void from_json(const nlohmann::json& j, AuthorizedNssaiAvailabilityData& o) {
  j.at("tai").get_to(o.m_Tai);
  j.at("supportedSnssaiList").get_to(o.m_SupportedSnssaiList);
  if (j.find("restrictedSnssaiList") != j.end()) {
    j.at("restrictedSnssaiList").get_to(o.m_RestrictedSnssaiList);
    o.m_RestrictedSnssaiListIsSet = true;
  }
  if (j.find("taiList") != j.end()) {
    j.at("taiList").get_to(o.m_TaiList);
    o.m_TaiListIsSet = true;
  }
  if (j.find("taiRangeList") != j.end()) {
    j.at("taiRangeList").get_to(o.m_TaiRangeList);
    o.m_TaiRangeListIsSet = true;
  }
}

Tai AuthorizedNssaiAvailabilityData::getTai() const {
  return m_Tai;
}
void AuthorizedNssaiAvailabilityData::setTai(Tai const& value) {
  m_Tai = value;
}
std::vector<ExtSnssai> AuthorizedNssaiAvailabilityData::getSupportedSnssaiList()
    const {
  return m_SupportedSnssaiList;
}
void AuthorizedNssaiAvailabilityData::setSupportedSnssaiList(
    std::vector<ExtSnssai> const& value) {
  m_SupportedSnssaiList = value;
}
std::vector<RestrictedSnssai>
AuthorizedNssaiAvailabilityData::getRestrictedSnssaiList() const {
  return m_RestrictedSnssaiList;
}
void AuthorizedNssaiAvailabilityData::setRestrictedSnssaiList(
    std::vector<RestrictedSnssai> const& value) {
  m_RestrictedSnssaiList      = value;
  m_RestrictedSnssaiListIsSet = true;
}
bool AuthorizedNssaiAvailabilityData::restrictedSnssaiListIsSet() const {
  return m_RestrictedSnssaiListIsSet;
}
void AuthorizedNssaiAvailabilityData::unsetRestrictedSnssaiList() {
  m_RestrictedSnssaiListIsSet = false;
}
std::vector<Tai> AuthorizedNssaiAvailabilityData::getTaiList() const {
  return m_TaiList;
}
void AuthorizedNssaiAvailabilityData::setTaiList(
    std::vector<Tai> const& value) {
  m_TaiList      = value;
  m_TaiListIsSet = true;
}
bool AuthorizedNssaiAvailabilityData::taiListIsSet() const {
  return m_TaiListIsSet;
}
void AuthorizedNssaiAvailabilityData::unsetTaiList() {
  m_TaiListIsSet = false;
}
std::vector<TaiRange> AuthorizedNssaiAvailabilityData::getTaiRangeList() const {
  return m_TaiRangeList;
}
void AuthorizedNssaiAvailabilityData::setTaiRangeList(
    std::vector<TaiRange> const& value) {
  m_TaiRangeList      = value;
  m_TaiRangeListIsSet = true;
}
bool AuthorizedNssaiAvailabilityData::taiRangeListIsSet() const {
  return m_TaiRangeListIsSet;
}
void AuthorizedNssaiAvailabilityData::unsetTaiRangeList() {
  m_TaiRangeListIsSet = false;
}

}  // namespace model
}  // namespace nssf_server
}  // namespace oai
