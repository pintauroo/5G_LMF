/**
 * NSSF NS Selection
 * NSSF Network Slice Selection Service. Â© 2021, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NetworkSliceInformationDocumentApiImpl.h"
#include "3gpp_29.500.h"
#include "Helpers.h"
#include "ProblemDetails.h"
#include "logger.hpp"
#include "nssf_app.hpp"
#include "nssf_config.hpp"
#include <string>

namespace oai {
namespace nssf_server {
namespace api {

using namespace oai::nssf_server::helpers;
using namespace oai::nssf_server::model;
// using namespace oai::nssf;

extern nssf::nssf_config nssf_cfg;

NetworkSliceInformationDocumentApiImpl::NetworkSliceInformationDocumentApiImpl(
    std::shared_ptr<Pistache::Rest::Router> rtr, nssf_app* nssf_app_inst,
    std::string address)
    : NetworkSliceInformationDocumentApi(rtr),
      m_nssf_app(nssf_app_inst),
      m_address(address) {}

void NetworkSliceInformationDocumentApiImpl::n_s_selection_get(
    const Pistache::Optional<NFType>& nfType,
    const Pistache::Optional<std::string>& nfId,
    const Pistache::Optional<SliceInfoForRegistration>&
        sliceInfoRequestForRegistration,
    const Pistache::Optional<SliceInfoForPDUSession>&
        sliceInfoRequestForPduSession,
    const Pistache::Optional<SliceInfoForUEConfigurationUpdate>&
        sliceInfoRequestForUeCu,
    const Pistache::Optional<PlmnId>& homePlmnId,
    const Pistache::Optional<Tai>& tai,
    const Pistache::Optional<std::string>& supportedFeatures,
    Pistache::Http::ResponseWriter& response) {
  int http_code = 0;

  std::string nf_id = {};
  if (!nfId.isEmpty()) {
    nf_id = nfId.get();
    Logger::nssf_sbi().info(" Query_PARAM::NF_ID - %s", nf_id.c_str());
  }

  NFType nf_type = {};
  if (!nfType.isEmpty())
    nf_type = nfType.get();
  else {
    http_code = HTTP_STATUS_CODE_400_BAD_REQUEST;
    response.send(Pistache::Http::Code(http_code));
    Logger::nssf_sbi().error(
        "Invalid NF_Type (Valid NF_Type is AMF, NSSF, NWDAP, SMF)");
    Logger::nssf_sbi().info("");
    return;
  }

  Tai tai_ = {};
  if (!tai.isEmpty()) tai_ = tai.get();

  PlmnId homePlmnId_ = {};
  if (!homePlmnId.isEmpty()) homePlmnId_ = homePlmnId.get();

  SliceInfoForPDUSession sliceInfoRequestForPduSession_ = {};
  if (!sliceInfoRequestForPduSession.isEmpty())
    sliceInfoRequestForPduSession_ = sliceInfoRequestForPduSession.get();

  std::string supportedFeatures_ = {};
  if (!supportedFeatures.isEmpty())
    supportedFeatures_ = supportedFeatures.get();

  ProblemDetails problem_details = {};
  nlohmann::json json_data       = {};
  std::string content_type       = "application/json";
  std::string json_format;
  AuthorizedNetworkSliceInfo auth_slice_info;

  if (!sliceInfoRequestForPduSession.isEmpty()) {
    Logger::nssf_sbi().info("");
    Logger::nssf_sbi().info(
        "NS Selection: Got a request with slice info for PDU Session, "
        "Instance ID: %s",
        nf_id.c_str());

    m_nssf_app->handle_slice_info_for_pdu_session(
        sliceInfoRequestForPduSession_, tai_, homePlmnId_, supportedFeatures_,
        http_code, 1, problem_details, auth_slice_info);

    if (http_code != HTTP_STATUS_CODE_200_OK) {
      to_json(json_data, problem_details);
      content_type = "application/problem+json";
      // content type
      response.headers().add<Pistache::Http::Header::ContentType>(
          Pistache::Http::Mime::MediaType(content_type));
      response.send(Pistache::Http::Code(http_code), json_data.dump().c_str());
      return;
    } else {
      to_json(json_data, auth_slice_info);
      response.headers().add<Pistache::Http::Header::ContentType>(
          Pistache::Http::Mime::MediaType(content_type));
      response.send(Pistache::Http::Code(http_code), json_data.dump().c_str());
    }
  }
}
// ToDo - UE Registration and UE Config Update

}  // namespace api
}  // namespace nssf_server
}  // namespace oai
