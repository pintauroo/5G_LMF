/**
 * NSSF NSSAI Availability
 * NSSF NSSAI Availability Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

/*
 * NFInstanceIDDocumentApiImpl.h
 *
 *
 */

#ifndef NF_INSTANCE_ID_DOCUMENT_API_IMPL_H
#define NF_INSTANCE_ID_DOCUMENT_API_IMPL_H

#include <memory>
#include <pistache/endpoint.h>
#include <pistache/http.h>
#include <pistache/router.h>

#include <NFInstanceIDDocumentApi.h>

#include <pistache/optional.h>

#include "AuthorizedNssaiAvailabilityInfo.h"
#include "NssaiAvailabilityInfo.h"
#include "PatchItem.h"
#include "ProblemDetails.h"
#include "RedirectResponse.h"
#include "nssf_app.hpp"
#include <string>
#include <vector>

namespace oai {
namespace nssf_server {
namespace api {

using namespace oai::nssf_server::model;
using namespace nssf;

class NFInstanceIDDocumentApiImpl
    : public oai::nssf_server::api::NFInstanceIDDocumentApi {
 public:
  NFInstanceIDDocumentApiImpl(
      std::shared_ptr<Pistache::Rest::Router>, nssf_app* nssf_app_inst,
      std::string address);
  ~NFInstanceIDDocumentApiImpl() {}

  void n_ssai_availability_delete(
      const std::string& nfId, Pistache::Http::ResponseWriter& response);
  void n_ssai_availability_patch(
      const std::string& nfId, const std::vector<PatchItem>& patchItem,
      const Pistache::Optional<Pistache::Http::Header::Raw>& contentEncoding,
      const Pistache::Optional<Pistache::Http::Header::Raw>& acceptEncoding,
      Pistache::Http::ResponseWriter& response);
  void n_ssai_availability_put(
      const std::string& nfId,
      const NssaiAvailabilityInfo& nssaiAvailabilityInfo,
      const Pistache::Optional<Pistache::Http::Header::Raw>& contentEncoding,
      const Pistache::Optional<Pistache::Http::Header::Raw>& acceptEncoding,
      Pistache::Http::ResponseWriter& response);

 private:
  nssf_app* m_nssf_app;
  std::string m_address;
};

}  // namespace api
}  // namespace nssf_server
}  // namespace oai

#endif
