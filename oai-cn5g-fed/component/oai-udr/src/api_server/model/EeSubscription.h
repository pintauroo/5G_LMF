/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * EeSubscription.h
 *
 *
 */

#ifndef EeSubscription_H_
#define EeSubscription_H_

#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "ContextInfo.h"
#include "MonitoringConfiguration.h"
#include "ReportingOptions.h"

namespace oai::udr::model {

/// <summary>
///
/// </summary>
class EeSubscription {
public:
  EeSubscription();
  virtual ~EeSubscription();

  void validate();

  /////////////////////////////////////////////
  /// EeSubscription members

  /// <summary>
  ///
  /// </summary>
  std::string getCallbackReference() const;
  void setCallbackReference(std::string const &value);
  /// <summary>
  /// A map (list of key-value pairs where ReferenceId serves as key) of
  /// MonitoringConfigurations
  /// </summary>
  std::map<std::string, MonitoringConfiguration> &getMonitoringConfigurations();
  void setMonitoringConfigurations(
      std::map<std::string, MonitoringConfiguration> const &value);
  /// <summary>
  ///
  /// </summary>
  ReportingOptions getReportingOptions() const;
  void setReportingOptions(ReportingOptions const &value);
  bool reportingOptionsIsSet() const;
  void unsetReportingOptions();
  /// <summary>
  ///
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  std::string getSubscriptionId() const;
  void setSubscriptionId(std::string const &value);
  bool subscriptionIdIsSet() const;
  void unsetSubscriptionId();
  /// <summary>
  ///
  /// </summary>
  ContextInfo getContextInfo() const;
  void setContextInfo(ContextInfo const &value);
  bool contextInfoIsSet() const;
  void unsetContextInfo();
  /// <summary>
  ///
  /// </summary>
  bool isEpcAppliedInd() const;
  void setEpcAppliedInd(bool const value);
  bool epcAppliedIndIsSet() const;
  void unsetEpcAppliedInd();
  /// <summary>
  ///
  /// </summary>
  std::string getScefDiamHost() const;
  void setScefDiamHost(std::string const &value);
  bool scefDiamHostIsSet() const;
  void unsetScefDiamHost();
  /// <summary>
  ///
  /// </summary>
  std::string getScefDiamRealm() const;
  void setScefDiamRealm(std::string const &value);
  bool scefDiamRealmIsSet() const;
  void unsetScefDiamRealm();
  /// <summary>
  ///
  /// </summary>
  std::string getNotifyCorrelationId() const;
  void setNotifyCorrelationId(std::string const &value);
  bool notifyCorrelationIdIsSet() const;
  void unsetNotifyCorrelationId();

  friend void to_json(nlohmann::json &j, const EeSubscription &o);
  friend void from_json(const nlohmann::json &j, EeSubscription &o);

protected:
  std::string m_CallbackReference;

  std::map<std::string, MonitoringConfiguration> m_MonitoringConfigurations;

  ReportingOptions m_ReportingOptions;
  bool m_ReportingOptionsIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  std::string m_SubscriptionId;
  bool m_SubscriptionIdIsSet;
  ContextInfo m_ContextInfo;
  bool m_ContextInfoIsSet;
  bool m_EpcAppliedInd;
  bool m_EpcAppliedIndIsSet;
  std::string m_ScefDiamHost;
  bool m_ScefDiamHostIsSet;
  std::string m_ScefDiamRealm;
  bool m_ScefDiamRealmIsSet;
  std::string m_NotifyCorrelationId;
  bool m_NotifyCorrelationIdIsSet;
};

} // namespace oai::udr::model

#endif /* EeSubscription_H_ */
