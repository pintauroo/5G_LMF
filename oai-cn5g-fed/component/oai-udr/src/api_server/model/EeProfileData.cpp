/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "EeProfileData.h"

namespace oai::udr::model {

EeProfileData::EeProfileData() {
  m_RestrictedEventTypesIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
}

EeProfileData::~EeProfileData() {}

void EeProfileData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const EeProfileData &o) {
  j = nlohmann::json();
  if (o.restrictedEventTypesIsSet() || !o.m_RestrictedEventTypes.empty())
    j["restrictedEventTypes"] = o.m_RestrictedEventTypes;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
}

void from_json(const nlohmann::json &j, EeProfileData &o) {
  if (j.find("restrictedEventTypes") != j.end()) {
    j.at("restrictedEventTypes").get_to(o.m_RestrictedEventTypes);
    o.m_RestrictedEventTypesIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
}

std::vector<EventType> &EeProfileData::getRestrictedEventTypes() {
  return m_RestrictedEventTypes;
}
void EeProfileData::setRestrictedEventTypes(
    std::vector<EventType> const &value) {
  m_RestrictedEventTypes = value;
  m_RestrictedEventTypesIsSet = true;
}
bool EeProfileData::restrictedEventTypesIsSet() const {
  return m_RestrictedEventTypesIsSet;
}
void EeProfileData::unsetRestrictedEventTypes() {
  m_RestrictedEventTypesIsSet = false;
}
std::string EeProfileData::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void EeProfileData::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool EeProfileData::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void EeProfileData::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}

} // namespace oai::udr::model
