/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PpData.h"

namespace oai::udr::model {

PpData::PpData() {
  m_CommunicationCharacteristicsIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_ExpectedUeBehaviourParametersIsSet = false;
  m_EcRestrictionIsSet = false;
  m_AcsInfoIsSet = false;
  m_StnSr = "";
  m_StnSrIsSet = false;
  m_LcsPrivacyIsSet = false;
  m_SorInfoIsSet = false;
}

PpData::~PpData() {}

void PpData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PpData &o) {
  j = nlohmann::json();
  if (o.communicationCharacteristicsIsSet())
    j["communicationCharacteristics"] = o.m_CommunicationCharacteristics;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.expectedUeBehaviourParametersIsSet())
    j["expectedUeBehaviourParameters"] = o.m_ExpectedUeBehaviourParameters;
  if (o.ecRestrictionIsSet())
    j["ecRestriction"] = o.m_EcRestriction;
  if (o.acsInfoIsSet())
    j["acsInfo"] = o.m_AcsInfo;
  if (o.stnSrIsSet())
    j["stnSr"] = o.m_StnSr;
  if (o.lcsPrivacyIsSet())
    j["lcsPrivacy"] = o.m_LcsPrivacy;
  if (o.sorInfoIsSet())
    j["sorInfo"] = o.m_SorInfo;
}

void from_json(const nlohmann::json &j, PpData &o) {
  if (j.find("communicationCharacteristics") != j.end()) {
    j.at("communicationCharacteristics")
        .get_to(o.m_CommunicationCharacteristics);
    o.m_CommunicationCharacteristicsIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("expectedUeBehaviourParameters") != j.end()) {
    j.at("expectedUeBehaviourParameters")
        .get_to(o.m_ExpectedUeBehaviourParameters);
    o.m_ExpectedUeBehaviourParametersIsSet = true;
  }
  if (j.find("ecRestriction") != j.end()) {
    j.at("ecRestriction").get_to(o.m_EcRestriction);
    o.m_EcRestrictionIsSet = true;
  }
  if (j.find("acsInfo") != j.end()) {
    j.at("acsInfo").get_to(o.m_AcsInfo);
    o.m_AcsInfoIsSet = true;
  }
  if (j.find("stnSr") != j.end()) {
    j.at("stnSr").get_to(o.m_StnSr);
    o.m_StnSrIsSet = true;
  }
  if (j.find("lcsPrivacy") != j.end()) {
    j.at("lcsPrivacy").get_to(o.m_LcsPrivacy);
    o.m_LcsPrivacyIsSet = true;
  }
  if (j.find("sorInfo") != j.end()) {
    j.at("sorInfo").get_to(o.m_SorInfo);
    o.m_SorInfoIsSet = true;
  }
}

CommunicationCharacteristics PpData::getCommunicationCharacteristics() const {
  return m_CommunicationCharacteristics;
}
void PpData::setCommunicationCharacteristics(
    CommunicationCharacteristics const &value) {
  m_CommunicationCharacteristics = value;
  m_CommunicationCharacteristicsIsSet = true;
}
bool PpData::communicationCharacteristicsIsSet() const {
  return m_CommunicationCharacteristicsIsSet;
}
void PpData::unsetCommunicationCharacteristics() {
  m_CommunicationCharacteristicsIsSet = false;
}
std::string PpData::getSupportedFeatures() const { return m_SupportedFeatures; }
void PpData::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool PpData::supportedFeaturesIsSet() const { return m_SupportedFeaturesIsSet; }
void PpData::unsetSupportedFeatures() { m_SupportedFeaturesIsSet = false; }
ExpectedUeBehaviour PpData::getExpectedUeBehaviourParameters() const {
  return m_ExpectedUeBehaviourParameters;
}
void PpData::setExpectedUeBehaviourParameters(
    ExpectedUeBehaviour const &value) {
  m_ExpectedUeBehaviourParameters = value;
  m_ExpectedUeBehaviourParametersIsSet = true;
}
bool PpData::expectedUeBehaviourParametersIsSet() const {
  return m_ExpectedUeBehaviourParametersIsSet;
}
void PpData::unsetExpectedUeBehaviourParameters() {
  m_ExpectedUeBehaviourParametersIsSet = false;
}
EcRestriction PpData::getEcRestriction() const { return m_EcRestriction; }
void PpData::setEcRestriction(EcRestriction const &value) {
  m_EcRestriction = value;
  m_EcRestrictionIsSet = true;
}
bool PpData::ecRestrictionIsSet() const { return m_EcRestrictionIsSet; }
void PpData::unsetEcRestriction() { m_EcRestrictionIsSet = false; }
AcsInfoRm PpData::getAcsInfo() const { return m_AcsInfo; }
void PpData::setAcsInfo(AcsInfoRm const &value) {
  m_AcsInfo = value;
  m_AcsInfoIsSet = true;
}
bool PpData::acsInfoIsSet() const { return m_AcsInfoIsSet; }
void PpData::unsetAcsInfo() { m_AcsInfoIsSet = false; }
std::string PpData::getStnSr() const { return m_StnSr; }
void PpData::setStnSr(std::string const &value) {
  m_StnSr = value;
  m_StnSrIsSet = true;
}
bool PpData::stnSrIsSet() const { return m_StnSrIsSet; }
void PpData::unsetStnSr() { m_StnSrIsSet = false; }
LcsPrivacy PpData::getLcsPrivacy() const { return m_LcsPrivacy; }
void PpData::setLcsPrivacy(LcsPrivacy const &value) {
  m_LcsPrivacy = value;
  m_LcsPrivacyIsSet = true;
}
bool PpData::lcsPrivacyIsSet() const { return m_LcsPrivacyIsSet; }
void PpData::unsetLcsPrivacy() { m_LcsPrivacyIsSet = false; }
SorInfo PpData::getSorInfo() const { return m_SorInfo; }
void PpData::setSorInfo(SorInfo const &value) {
  m_SorInfo = value;
  m_SorInfoIsSet = true;
}
bool PpData::sorInfoIsSet() const { return m_SorInfoIsSet; }
void PpData::unsetSorInfo() { m_SorInfoIsSet = false; }

} // namespace oai::udr::model
