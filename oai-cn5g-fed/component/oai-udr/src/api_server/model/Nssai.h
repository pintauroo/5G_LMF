/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * Nssai.h
 *
 *
 */

#ifndef Nssai_H_
#define Nssai_H_

#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "AdditionalSnssaiData.h"
#include "Snssai.h"

namespace oai::udr::model {

/// <summary>
///
/// </summary>
class Nssai {
public:
  Nssai();
  virtual ~Nssai();

  void validate();

  /////////////////////////////////////////////
  /// Nssai members

  /// <summary>
  ///
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  std::vector<Snssai> &getDefaultSingleNssais();
  void setDefaultSingleNssais(std::vector<Snssai> const &value);
  /// <summary>
  ///
  /// </summary>
  std::vector<Snssai> &getSingleNssais();
  void setSingleNssais(std::vector<Snssai> const &value);
  bool singleNssaisIsSet() const;
  void unsetSingleNssais();
  /// <summary>
  ///
  /// </summary>
  std::string getProvisioningTime() const;
  void setProvisioningTime(std::string const &value);
  bool provisioningTimeIsSet() const;
  void unsetProvisioningTime();
  /// <summary>
  ///
  /// </summary>
  std::map<std::string, AdditionalSnssaiData> &getAdditionalSnssaiData();
  void setAdditionalSnssaiData(
      std::map<std::string, AdditionalSnssaiData> const &value);
  bool additionalSnssaiDataIsSet() const;
  void unsetAdditionalSnssaiData();

  friend void to_json(nlohmann::json &j, const Nssai &o);
  friend void from_json(const nlohmann::json &j, Nssai &o);

protected:
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  std::vector<Snssai> m_DefaultSingleNssais;

  std::vector<Snssai> m_SingleNssais;
  bool m_SingleNssaisIsSet;
  std::string m_ProvisioningTime;
  bool m_ProvisioningTimeIsSet;
  std::map<std::string, AdditionalSnssaiData> m_AdditionalSnssaiData;
  bool m_AdditionalSnssaiDataIsSet;
};

} // namespace oai::udr::model

#endif /* Nssai_H_ */
