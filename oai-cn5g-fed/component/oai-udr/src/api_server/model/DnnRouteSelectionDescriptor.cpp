/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "DnnRouteSelectionDescriptor.h"

namespace oai::udr::model {

DnnRouteSelectionDescriptor::DnnRouteSelectionDescriptor() {
  m_Dnn = "";
  m_SscModesIsSet = false;
  m_PduSessTypesIsSet = false;
  m_AtsssInfo = false;
  m_AtsssInfoIsSet = false;
}

DnnRouteSelectionDescriptor::~DnnRouteSelectionDescriptor() {}

void DnnRouteSelectionDescriptor::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const DnnRouteSelectionDescriptor &o) {
  j = nlohmann::json();
  j["dnn"] = o.m_Dnn;
  if (o.sscModesIsSet() || !o.m_SscModes.empty())
    j["sscModes"] = o.m_SscModes;
  if (o.pduSessTypesIsSet() || !o.m_PduSessTypes.empty())
    j["pduSessTypes"] = o.m_PduSessTypes;
  if (o.atsssInfoIsSet())
    j["atsssInfo"] = o.m_AtsssInfo;
}

void from_json(const nlohmann::json &j, DnnRouteSelectionDescriptor &o) {
  j.at("dnn").get_to(o.m_Dnn);
  if (j.find("sscModes") != j.end()) {
    j.at("sscModes").get_to(o.m_SscModes);
    o.m_SscModesIsSet = true;
  }
  if (j.find("pduSessTypes") != j.end()) {
    j.at("pduSessTypes").get_to(o.m_PduSessTypes);
    o.m_PduSessTypesIsSet = true;
  }
  if (j.find("atsssInfo") != j.end()) {
    j.at("atsssInfo").get_to(o.m_AtsssInfo);
    o.m_AtsssInfoIsSet = true;
  }
}

std::string DnnRouteSelectionDescriptor::getDnn() const { return m_Dnn; }
void DnnRouteSelectionDescriptor::setDnn(std::string const &value) {
  m_Dnn = value;
}
std::vector<SscMode> &DnnRouteSelectionDescriptor::getSscModes() {
  return m_SscModes;
}
void DnnRouteSelectionDescriptor::setSscModes(
    std::vector<SscMode> const &value) {
  m_SscModes = value;
  m_SscModesIsSet = true;
}
bool DnnRouteSelectionDescriptor::sscModesIsSet() const {
  return m_SscModesIsSet;
}
void DnnRouteSelectionDescriptor::unsetSscModes() { m_SscModesIsSet = false; }
std::vector<PduSessionType> &DnnRouteSelectionDescriptor::getPduSessTypes() {
  return m_PduSessTypes;
}
void DnnRouteSelectionDescriptor::setPduSessTypes(
    std::vector<PduSessionType> const &value) {
  m_PduSessTypes = value;
  m_PduSessTypesIsSet = true;
}
bool DnnRouteSelectionDescriptor::pduSessTypesIsSet() const {
  return m_PduSessTypesIsSet;
}
void DnnRouteSelectionDescriptor::unsetPduSessTypes() {
  m_PduSessTypesIsSet = false;
}
bool DnnRouteSelectionDescriptor::isAtsssInfo() const { return m_AtsssInfo; }
void DnnRouteSelectionDescriptor::setAtsssInfo(bool const value) {
  m_AtsssInfo = value;
  m_AtsssInfoIsSet = true;
}
bool DnnRouteSelectionDescriptor::atsssInfoIsSet() const {
  return m_AtsssInfoIsSet;
}
void DnnRouteSelectionDescriptor::unsetAtsssInfo() { m_AtsssInfoIsSet = false; }

} // namespace oai::udr::model
