/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * DnnInfo.h
 *
 *
 */

#ifndef DnnInfo_H_
#define DnnInfo_H_

//#include "AnyOfstringstring.h"
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

namespace oai::udr::model {

/// <summary>
///
/// </summary>
class DnnInfo {
public:
  DnnInfo();
  virtual ~DnnInfo();

  void validate();

  /////////////////////////////////////////////
  /// DnnInfo members

  /// <summary>
  ///
  /// </summary>
  //    AnyOfstringstring getDnn() const;
  //    void setDnn(AnyOfstringstring const& value);
  /// <summary>
  ///
  /// </summary>
  bool isDefaultDnnIndicator() const;
  void setDefaultDnnIndicator(bool const value);
  bool defaultDnnIndicatorIsSet() const;
  void unsetDefaultDnnIndicator();
  /// <summary>
  ///
  /// </summary>
  bool isLboRoamingAllowed() const;
  void setLboRoamingAllowed(bool const value);
  bool lboRoamingAllowedIsSet() const;
  void unsetLboRoamingAllowed();
  /// <summary>
  ///
  /// </summary>
  bool isIwkEpsInd() const;
  void setIwkEpsInd(bool const value);
  bool iwkEpsIndIsSet() const;
  void unsetIwkEpsInd();
  /// <summary>
  ///
  /// </summary>
  bool isDnnBarred() const;
  void setDnnBarred(bool const value);
  bool dnnBarredIsSet() const;
  void unsetDnnBarred();
  /// <summary>
  ///
  /// </summary>
  bool isInvokeNefInd() const;
  void setInvokeNefInd(bool const value);
  bool invokeNefIndIsSet() const;
  void unsetInvokeNefInd();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getSmfList();
  void setSmfList(std::vector<std::string> const &value);
  bool smfListIsSet() const;
  void unsetSmfList();
  /// <summary>
  ///
  /// </summary>
  bool isSameSmfInd() const;
  void setSameSmfInd(bool const value);
  bool sameSmfIndIsSet() const;
  void unsetSameSmfInd();

  friend void to_json(nlohmann::json &j, const DnnInfo &o);
  friend void from_json(const nlohmann::json &j, DnnInfo &o);

protected:
  //    AnyOfstringstring m_Dnn;

  bool m_DefaultDnnIndicator;
  bool m_DefaultDnnIndicatorIsSet;
  bool m_LboRoamingAllowed;
  bool m_LboRoamingAllowedIsSet;
  bool m_IwkEpsInd;
  bool m_IwkEpsIndIsSet;
  bool m_DnnBarred;
  bool m_DnnBarredIsSet;
  bool m_InvokeNefInd;
  bool m_InvokeNefIndIsSet;
  std::vector<std::string> m_SmfList;
  bool m_SmfListIsSet;
  bool m_SameSmfInd;
  bool m_SameSmfIndIsSet;
};

} // namespace oai::udr::model

#endif /* DnnInfo_H_ */
