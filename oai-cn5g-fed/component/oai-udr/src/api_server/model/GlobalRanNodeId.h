/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * GlobalRanNodeId.h
 *
 *
 */

#ifndef GlobalRanNodeId_H_
#define GlobalRanNodeId_H_

#include <nlohmann/json.hpp>
#include <string>

#include "GNbId.h"
#include "PlmnId.h"

namespace oai::udr::model {

/// <summary>
///
/// </summary>
class GlobalRanNodeId {
public:
  GlobalRanNodeId();
  virtual ~GlobalRanNodeId();

  void validate();

  /////////////////////////////////////////////
  /// GlobalRanNodeId members

  /// <summary>
  ///
  /// </summary>
  PlmnId getPlmnId() const;
  void setPlmnId(PlmnId const &value);
  /// <summary>
  ///
  /// </summary>
  std::string getN3IwfId() const;
  void setN3IwfId(std::string const &value);
  bool n3IwfIdIsSet() const;
  void unsetN3IwfId();
  /// <summary>
  ///
  /// </summary>
  GNbId getGNbId() const;
  void setGNbId(GNbId const &value);
  bool gNbIdIsSet() const;
  void unsetGNbId();
  /// <summary>
  ///
  /// </summary>
  std::string getNgeNbId() const;
  void setNgeNbId(std::string const &value);
  bool ngeNbIdIsSet() const;
  void unsetNgeNbId();
  /// <summary>
  ///
  /// </summary>
  std::string getWagfId() const;
  void setWagfId(std::string const &value);
  bool wagfIdIsSet() const;
  void unsetWagfId();
  /// <summary>
  ///
  /// </summary>
  std::string getTngfId() const;
  void setTngfId(std::string const &value);
  bool tngfIdIsSet() const;
  void unsetTngfId();
  /// <summary>
  ///
  /// </summary>
  std::string getNid() const;
  void setNid(std::string const &value);
  bool nidIsSet() const;
  void unsetNid();
  /// <summary>
  ///
  /// </summary>
  std::string getENbId() const;
  void setENbId(std::string const &value);
  bool eNbIdIsSet() const;
  void unsetENbId();

  friend void to_json(nlohmann::json &j, const GlobalRanNodeId &o);
  friend void from_json(const nlohmann::json &j, GlobalRanNodeId &o);

protected:
  PlmnId m_PlmnId;

  std::string m_N3IwfId;
  bool m_N3IwfIdIsSet;
  GNbId m_GNbId;
  bool m_GNbIdIsSet;
  std::string m_NgeNbId;
  bool m_NgeNbIdIsSet;
  std::string m_WagfId;
  bool m_WagfIdIsSet;
  std::string m_TngfId;
  bool m_TngfIdIsSet;
  std::string m_Nid;
  bool m_NidIsSet;
  std::string m_ENbId;
  bool m_ENbIdIsSet;
};

} // namespace oai::udr::model

#endif /* GlobalRanNodeId_H_ */
