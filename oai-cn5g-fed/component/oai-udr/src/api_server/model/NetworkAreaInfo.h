/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NetworkAreaInfo.h
 *
 * Describes a network area information in which the NF service consumer
 * requests the number of UEs.
 */

#ifndef NetworkAreaInfo_H_
#define NetworkAreaInfo_H_

#include <nlohmann/json.hpp>
#include <vector>

#include "Ecgi.h"
#include "GlobalRanNodeId.h"
#include "Ncgi.h"
#include "Tai.h"

namespace oai::udr::model {

/// <summary>
/// Describes a network area information in which the NF service consumer
/// requests the number of UEs.
/// </summary>
class NetworkAreaInfo {
public:
  NetworkAreaInfo();
  virtual ~NetworkAreaInfo();

  void validate();

  /////////////////////////////////////////////
  /// NetworkAreaInfo members

  /// <summary>
  /// Contains a list of E-UTRA cell identities.
  /// </summary>
  std::vector<Ecgi> &getEcgis();
  void setEcgis(std::vector<Ecgi> const &value);
  bool ecgisIsSet() const;
  void unsetEcgis();
  /// <summary>
  /// Contains a list of NR cell identities.
  /// </summary>
  std::vector<Ncgi> &getNcgis();
  void setNcgis(std::vector<Ncgi> const &value);
  bool ncgisIsSet() const;
  void unsetNcgis();
  /// <summary>
  /// Contains a list of NG RAN nodes.
  /// </summary>
  std::vector<GlobalRanNodeId> &getGRanNodeIds();
  void setGRanNodeIds(std::vector<GlobalRanNodeId> const &value);
  bool gRanNodeIdsIsSet() const;
  void unsetGRanNodeIds();
  /// <summary>
  /// Contains a list of tracking area identities.
  /// </summary>
  std::vector<Tai> &getTais();
  void setTais(std::vector<Tai> const &value);
  bool taisIsSet() const;
  void unsetTais();

  friend void to_json(nlohmann::json &j, const NetworkAreaInfo &o);
  friend void from_json(const nlohmann::json &j, NetworkAreaInfo &o);

protected:
  std::vector<Ecgi> m_Ecgis;
  bool m_EcgisIsSet;
  std::vector<Ncgi> m_Ncgis;
  bool m_NcgisIsSet;
  std::vector<GlobalRanNodeId> m_GRanNodeIds;
  bool m_GRanNodeIdsIsSet;
  std::vector<Tai> m_Tais;
  bool m_TaisIsSet;
};

} // namespace oai::udr::model

#endif /* NetworkAreaInfo_H_ */
