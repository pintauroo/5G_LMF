/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UpuData.h"

namespace oai::udr::model {

UpuData::UpuData() {
  m_ProvisioningTime = "";
  m_UpuXmacIue = "";
  m_UpuXmacIueIsSet = false;
  m_UpuMacIue = "";
  m_UpuMacIueIsSet = false;
}

UpuData::~UpuData() {}

void UpuData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UpuData &o) {
  j = nlohmann::json();
  j["provisioningTime"] = o.m_ProvisioningTime;
  j["ueUpdateStatus"] = o.m_UeUpdateStatus;
  if (o.upuXmacIueIsSet())
    j["upuXmacIue"] = o.m_UpuXmacIue;
  if (o.upuMacIueIsSet())
    j["upuMacIue"] = o.m_UpuMacIue;
}

void from_json(const nlohmann::json &j, UpuData &o) {
  j.at("provisioningTime").get_to(o.m_ProvisioningTime);
  j.at("ueUpdateStatus").get_to(o.m_UeUpdateStatus);
  if (j.find("upuXmacIue") != j.end()) {
    j.at("upuXmacIue").get_to(o.m_UpuXmacIue);
    o.m_UpuXmacIueIsSet = true;
  }
  if (j.find("upuMacIue") != j.end()) {
    j.at("upuMacIue").get_to(o.m_UpuMacIue);
    o.m_UpuMacIueIsSet = true;
  }
}

std::string UpuData::getProvisioningTime() const { return m_ProvisioningTime; }
void UpuData::setProvisioningTime(std::string const &value) {
  m_ProvisioningTime = value;
}
UeUpdateStatus UpuData::getUeUpdateStatus() const { return m_UeUpdateStatus; }
void UpuData::setUeUpdateStatus(UeUpdateStatus const &value) {
  m_UeUpdateStatus = value;
}
std::string UpuData::getUpuXmacIue() const { return m_UpuXmacIue; }
void UpuData::setUpuXmacIue(std::string const &value) {
  m_UpuXmacIue = value;
  m_UpuXmacIueIsSet = true;
}
bool UpuData::upuXmacIueIsSet() const { return m_UpuXmacIueIsSet; }
void UpuData::unsetUpuXmacIue() { m_UpuXmacIueIsSet = false; }
std::string UpuData::getUpuMacIue() const { return m_UpuMacIue; }
void UpuData::setUpuMacIue(std::string const &value) {
  m_UpuMacIue = value;
  m_UpuMacIueIsSet = true;
}
bool UpuData::upuMacIueIsSet() const { return m_UpuMacIueIsSet; }
void UpuData::unsetUpuMacIue() { m_UpuMacIueIsSet = false; }

} // namespace oai::udr::model
