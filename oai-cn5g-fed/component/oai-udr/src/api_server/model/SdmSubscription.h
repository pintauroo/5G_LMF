/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SdmSubscription.h
 *
 *
 */

#ifndef SdmSubscription_H_
#define SdmSubscription_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "ContextInfo.h"
#include "PlmnId.h"
#include "ServiceName.h"
#include "Snssai.h"
#include "SubscriptionDataSets.h"

namespace oai::udr::model {

/// <summary>
///
/// </summary>
class SdmSubscription {
public:
  SdmSubscription();
  virtual ~SdmSubscription();

  void validate();

  /////////////////////////////////////////////
  /// SdmSubscription members

  /// <summary>
  ///
  /// </summary>
  std::string getNfInstanceId() const;
  void setNfInstanceId(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  bool isImplicitUnsubscribe() const;
  void setImplicitUnsubscribe(bool const value);
  bool implicitUnsubscribeIsSet() const;
  void unsetImplicitUnsubscribe();
  /// <summary>
  ///
  /// </summary>
  std::string getExpires() const;
  void setExpires(std::string const &value);
  bool expiresIsSet() const;
  void unsetExpires();
  /// <summary>
  ///
  /// </summary>
  std::string getCallbackReference() const;
  void setCallbackReference(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  ServiceName getAmfServiceName() const;
  void setAmfServiceName(ServiceName const &value);
  bool amfServiceNameIsSet() const;
  void unsetAmfServiceName();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getMonitoredResourceUris();
  void setMonitoredResourceUris(std::vector<std::string> const &value);
  /// <summary>
  ///
  /// </summary>
  Snssai getSingleNssai() const;
  void setSingleNssai(Snssai const &value);
  bool singleNssaiIsSet() const;
  void unsetSingleNssai();
  /// <summary>
  ///
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  ///
  /// </summary>
  std::string getSubscriptionId() const;
  void setSubscriptionId(std::string const &value);
  bool subscriptionIdIsSet() const;
  void unsetSubscriptionId();
  /// <summary>
  ///
  /// </summary>
  PlmnId getPlmnId() const;
  void setPlmnId(PlmnId const &value);
  bool plmnIdIsSet() const;
  void unsetPlmnId();
  /// <summary>
  ///
  /// </summary>
  bool isImmediateReport() const;
  void setImmediateReport(bool const value);
  bool immediateReportIsSet() const;
  void unsetImmediateReport();
  /// <summary>
  ///
  /// </summary>
  SubscriptionDataSets getReport() const;
  void setReport(SubscriptionDataSets const &value);
  bool reportIsSet() const;
  void unsetReport();
  /// <summary>
  ///
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  ContextInfo getContextInfo() const;
  void setContextInfo(ContextInfo const &value);
  bool contextInfoIsSet() const;
  void unsetContextInfo();

  friend void to_json(nlohmann::json &j, const SdmSubscription &o);
  friend void from_json(const nlohmann::json &j, SdmSubscription &o);

protected:
  std::string m_NfInstanceId;

  bool m_ImplicitUnsubscribe;
  bool m_ImplicitUnsubscribeIsSet;
  std::string m_Expires;
  bool m_ExpiresIsSet;
  std::string m_CallbackReference;

  ServiceName m_AmfServiceName;
  bool m_AmfServiceNameIsSet;
  std::vector<std::string> m_MonitoredResourceUris;

  Snssai m_SingleNssai;
  bool m_SingleNssaiIsSet;
  std::string m_Dnn;
  bool m_DnnIsSet;
  std::string m_SubscriptionId;
  bool m_SubscriptionIdIsSet;
  PlmnId m_PlmnId;
  bool m_PlmnIdIsSet;
  bool m_ImmediateReport;
  bool m_ImmediateReportIsSet;
  SubscriptionDataSets m_Report;
  bool m_ReportIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  ContextInfo m_ContextInfo;
  bool m_ContextInfoIsSet;
};

} // namespace oai::udr::model

#endif /* SdmSubscription_H_ */
