/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * DnnConfiguration.h
 *
 *
 */

#ifndef DnnConfiguration_H_
#define DnnConfiguration_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "AcsInfo.h"
#include "Ambr.h"
#include "FrameRouteInfo.h"
#include "IpAddress.h"
#include "NiddInformation.h"
#include "PduSessionContinuityInd.h"
#include "PduSessionTypes.h"
#include "SscModes.h"
#include "SubscribedDefaultQos.h"
#include "UpSecurity.h"

namespace oai::udr::model {

/// <summary>
///
/// </summary>
class DnnConfiguration {
public:
  DnnConfiguration();
  virtual ~DnnConfiguration();

  void validate();

  /////////////////////////////////////////////
  /// DnnConfiguration members

  /// <summary>
  ///
  /// </summary>
  PduSessionTypes getPduSessionTypes() const;
  void setPduSessionTypes(PduSessionTypes const &value);
  /// <summary>
  ///
  /// </summary>
  SscModes getSscModes() const;
  void setSscModes(SscModes const &value);
  /// <summary>
  ///
  /// </summary>
  bool isIwkEpsInd() const;
  void setIwkEpsInd(bool const value);
  bool iwkEpsIndIsSet() const;
  void unsetIwkEpsInd();
  /// <summary>
  ///
  /// </summary>
  SubscribedDefaultQos getR5gQosProfile() const;
  void setR5gQosProfile(SubscribedDefaultQos const &value);
  bool r5gQosProfileIsSet() const;
  void unsetr_5gQosProfile();
  /// <summary>
  ///
  /// </summary>
  Ambr getSessionAmbr() const;
  void setSessionAmbr(Ambr const &value);
  bool sessionAmbrIsSet() const;
  void unsetSessionAmbr();
  /// <summary>
  ///
  /// </summary>
  std::string getR3gppChargingCharacteristics() const;
  void setR3gppChargingCharacteristics(std::string const &value);
  bool r3gppChargingCharacteristicsIsSet() const;
  void unsetr_3gppChargingCharacteristics();
  /// <summary>
  ///
  /// </summary>
  std::vector<IpAddress> &getStaticIpAddress();
  void setStaticIpAddress(std::vector<IpAddress> const &value);
  bool staticIpAddressIsSet() const;
  void unsetStaticIpAddress();
  /// <summary>
  ///
  /// </summary>
  UpSecurity getUpSecurity() const;
  void setUpSecurity(UpSecurity const &value);
  bool upSecurityIsSet() const;
  void unsetUpSecurity();
  /// <summary>
  ///
  /// </summary>
  PduSessionContinuityInd getPduSessionContinuityInd() const;
  void setPduSessionContinuityInd(PduSessionContinuityInd const &value);
  bool pduSessionContinuityIndIsSet() const;
  void unsetPduSessionContinuityInd();
  /// <summary>
  /// Identity of the NEF
  /// </summary>
  std::string getNiddNefId() const;
  void setNiddNefId(std::string const &value);
  bool niddNefIdIsSet() const;
  void unsetNiddNefId();
  /// <summary>
  ///
  /// </summary>
  NiddInformation getNiddInfo() const;
  void setNiddInfo(NiddInformation const &value);
  bool niddInfoIsSet() const;
  void unsetNiddInfo();
  /// <summary>
  ///
  /// </summary>
  bool isRedundantSessionAllowed() const;
  void setRedundantSessionAllowed(bool const value);
  bool redundantSessionAllowedIsSet() const;
  void unsetRedundantSessionAllowed();
  /// <summary>
  ///
  /// </summary>
  AcsInfo getAcsInfo() const;
  void setAcsInfo(AcsInfo const &value);
  bool acsInfoIsSet() const;
  void unsetAcsInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<FrameRouteInfo> &getIpv4FrameRouteList();
  void setIpv4FrameRouteList(std::vector<FrameRouteInfo> const &value);
  bool ipv4FrameRouteListIsSet() const;
  void unsetIpv4FrameRouteList();
  /// <summary>
  ///
  /// </summary>
  std::vector<FrameRouteInfo> &getIpv6FrameRouteList();
  void setIpv6FrameRouteList(std::vector<FrameRouteInfo> const &value);
  bool ipv6FrameRouteListIsSet() const;
  void unsetIpv6FrameRouteList();
  /// <summary>
  ///
  /// </summary>
  bool isAtsssAllowed() const;
  void setAtsssAllowed(bool const value);
  bool atsssAllowedIsSet() const;
  void unsetAtsssAllowed();
  /// <summary>
  ///
  /// </summary>
  bool isSecondaryAuth() const;
  void setSecondaryAuth(bool const value);
  bool secondaryAuthIsSet() const;
  void unsetSecondaryAuth();
  /// <summary>
  ///
  /// </summary>
  bool isDnAaaIpAddressAllocation() const;
  void setDnAaaIpAddressAllocation(bool const value);
  bool dnAaaIpAddressAllocationIsSet() const;
  void unsetDnAaaIpAddressAllocation();
  /// <summary>
  ///
  /// </summary>
  IpAddress getDnAaaAddress() const;
  void setDnAaaAddress(IpAddress const &value);
  bool dnAaaAddressIsSet() const;
  void unsetDnAaaAddress();

  friend void to_json(nlohmann::json &j, const DnnConfiguration &o);
  friend void from_json(const nlohmann::json &j, DnnConfiguration &o);

protected:
  PduSessionTypes m_PduSessionTypes;

  SscModes m_SscModes;

  bool m_IwkEpsInd;
  bool m_IwkEpsIndIsSet;
  SubscribedDefaultQos m_r_5gQosProfile;
  bool m_r_5gQosProfileIsSet;
  Ambr m_SessionAmbr;
  bool m_SessionAmbrIsSet;
  std::string m_r_3gppChargingCharacteristics;
  bool m_r_3gppChargingCharacteristicsIsSet;
  std::vector<IpAddress> m_StaticIpAddress;
  bool m_StaticIpAddressIsSet;
  UpSecurity m_UpSecurity;
  bool m_UpSecurityIsSet;
  PduSessionContinuityInd m_PduSessionContinuityInd;
  bool m_PduSessionContinuityIndIsSet;
  std::string m_NiddNefId;
  bool m_NiddNefIdIsSet;
  NiddInformation m_NiddInfo;
  bool m_NiddInfoIsSet;
  bool m_RedundantSessionAllowed;
  bool m_RedundantSessionAllowedIsSet;
  AcsInfo m_AcsInfo;
  bool m_AcsInfoIsSet;
  std::vector<FrameRouteInfo> m_Ipv4FrameRouteList;
  bool m_Ipv4FrameRouteListIsSet;
  std::vector<FrameRouteInfo> m_Ipv6FrameRouteList;
  bool m_Ipv6FrameRouteListIsSet;
  bool m_AtsssAllowed;
  bool m_AtsssAllowedIsSet;
  bool m_SecondaryAuth;
  bool m_SecondaryAuthIsSet;
  bool m_DnAaaIpAddressAllocation;
  bool m_DnAaaIpAddressAllocationIsSet;
  IpAddress m_DnAaaAddress;
  bool m_DnAaaAddressIsSet;
};

} // namespace oai::udr::model

#endif /* DnnConfiguration_H_ */
