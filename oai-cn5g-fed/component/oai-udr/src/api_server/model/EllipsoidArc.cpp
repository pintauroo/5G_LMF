/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "EllipsoidArc.h"

namespace oai::udr::model {

EllipsoidArc::EllipsoidArc() {
  m_InnerRadius = 0;
  m_UncertaintyRadius = 0.0f;
  m_OffsetAngle = 0;
  m_IncludedAngle = 0;
  m_Confidence = 0;
}

EllipsoidArc::~EllipsoidArc() {}

void EllipsoidArc::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const EllipsoidArc &o) {
  j = nlohmann::json();
  j["shape"] = o.m_Shape;
  j["point"] = o.m_Point;
  j["innerRadius"] = o.m_InnerRadius;
  j["uncertaintyRadius"] = o.m_UncertaintyRadius;
  j["offsetAngle"] = o.m_OffsetAngle;
  j["includedAngle"] = o.m_IncludedAngle;
  j["confidence"] = o.m_Confidence;
}

void from_json(const nlohmann::json &j, EllipsoidArc &o) {
  j.at("shape").get_to(o.m_Shape);
  j.at("point").get_to(o.m_Point);
  j.at("innerRadius").get_to(o.m_InnerRadius);
  j.at("uncertaintyRadius").get_to(o.m_UncertaintyRadius);
  j.at("offsetAngle").get_to(o.m_OffsetAngle);
  j.at("includedAngle").get_to(o.m_IncludedAngle);
  j.at("confidence").get_to(o.m_Confidence);
}

SupportedGADShapes EllipsoidArc::getShape() const { return m_Shape; }
void EllipsoidArc::setShape(SupportedGADShapes const &value) {
  m_Shape = value;
}
GeographicalCoordinates EllipsoidArc::getPoint() const { return m_Point; }
void EllipsoidArc::setPoint(GeographicalCoordinates const &value) {
  m_Point = value;
}
int32_t EllipsoidArc::getInnerRadius() const { return m_InnerRadius; }
void EllipsoidArc::setInnerRadius(int32_t const value) {
  m_InnerRadius = value;
}
float EllipsoidArc::getUncertaintyRadius() const { return m_UncertaintyRadius; }
void EllipsoidArc::setUncertaintyRadius(float const value) {
  m_UncertaintyRadius = value;
}
int32_t EllipsoidArc::getOffsetAngle() const { return m_OffsetAngle; }
void EllipsoidArc::setOffsetAngle(int32_t const value) {
  m_OffsetAngle = value;
}
int32_t EllipsoidArc::getIncludedAngle() const { return m_IncludedAngle; }
void EllipsoidArc::setIncludedAngle(int32_t const value) {
  m_IncludedAngle = value;
}
int32_t EllipsoidArc::getConfidence() const { return m_Confidence; }
void EllipsoidArc::setConfidence(int32_t const value) { m_Confidence = value; }

} // namespace oai::udr::model
