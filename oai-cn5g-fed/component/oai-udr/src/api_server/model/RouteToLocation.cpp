/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "RouteToLocation.h"

namespace oai::udr::model {

RouteToLocation::RouteToLocation() {
  m_Dnai = "";
  m_RouteInfoIsSet = false;
  m_RouteProfId = "";
  m_RouteProfIdIsSet = false;
}

RouteToLocation::~RouteToLocation() {}

void RouteToLocation::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const RouteToLocation &o) {
  j = nlohmann::json();
  j["dnai"] = o.m_Dnai;
  if (o.routeInfoIsSet())
    j["routeInfo"] = o.m_RouteInfo;
  if (o.routeProfIdIsSet())
    j["routeProfId"] = o.m_RouteProfId;
}

void from_json(const nlohmann::json &j, RouteToLocation &o) {
  j.at("dnai").get_to(o.m_Dnai);
  if (j.find("routeInfo") != j.end()) {
    j.at("routeInfo").get_to(o.m_RouteInfo);
    o.m_RouteInfoIsSet = true;
  }
  if (j.find("routeProfId") != j.end()) {
    j.at("routeProfId").get_to(o.m_RouteProfId);
    o.m_RouteProfIdIsSet = true;
  }
}

std::string RouteToLocation::getDnai() const { return m_Dnai; }
void RouteToLocation::setDnai(std::string const &value) { m_Dnai = value; }
RouteInformation RouteToLocation::getRouteInfo() const { return m_RouteInfo; }
void RouteToLocation::setRouteInfo(RouteInformation const &value) {
  m_RouteInfo = value;
  m_RouteInfoIsSet = true;
}
bool RouteToLocation::routeInfoIsSet() const { return m_RouteInfoIsSet; }
void RouteToLocation::unsetRouteInfo() { m_RouteInfoIsSet = false; }
std::string RouteToLocation::getRouteProfId() const { return m_RouteProfId; }
void RouteToLocation::setRouteProfId(std::string const &value) {
  m_RouteProfId = value;
  m_RouteProfIdIsSet = true;
}
bool RouteToLocation::routeProfIdIsSet() const { return m_RouteProfIdIsSet; }
void RouteToLocation::unsetRouteProfId() { m_RouteProfIdIsSet = false; }

} // namespace oai::udr::model
