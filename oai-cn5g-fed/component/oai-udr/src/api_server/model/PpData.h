/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PpData.h
 *
 *
 */

#ifndef PpData_H_
#define PpData_H_

#include <nlohmann/json.hpp>
#include <string>

#include "AcsInfoRm.h"
#include "CommunicationCharacteristics.h"
#include "EcRestriction.h"
#include "ExpectedUeBehaviour.h"
#include "LcsPrivacy.h"
#include "SorInfo.h"

namespace oai::udr::model {

/// <summary>
///
/// </summary>
class PpData {
public:
  PpData();
  virtual ~PpData();

  void validate();

  /////////////////////////////////////////////
  /// PpData members

  /// <summary>
  ///
  /// </summary>
  CommunicationCharacteristics getCommunicationCharacteristics() const;
  void
  setCommunicationCharacteristics(CommunicationCharacteristics const &value);
  bool communicationCharacteristicsIsSet() const;
  void unsetCommunicationCharacteristics();
  /// <summary>
  ///
  /// </summary>
  std::string getSupportedFeatures() const;
  void setSupportedFeatures(std::string const &value);
  bool supportedFeaturesIsSet() const;
  void unsetSupportedFeatures();
  /// <summary>
  ///
  /// </summary>
  ExpectedUeBehaviour getExpectedUeBehaviourParameters() const;
  void setExpectedUeBehaviourParameters(ExpectedUeBehaviour const &value);
  bool expectedUeBehaviourParametersIsSet() const;
  void unsetExpectedUeBehaviourParameters();
  /// <summary>
  ///
  /// </summary>
  EcRestriction getEcRestriction() const;
  void setEcRestriction(EcRestriction const &value);
  bool ecRestrictionIsSet() const;
  void unsetEcRestriction();
  /// <summary>
  ///
  /// </summary>
  AcsInfoRm getAcsInfo() const;
  void setAcsInfo(AcsInfoRm const &value);
  bool acsInfoIsSet() const;
  void unsetAcsInfo();
  /// <summary>
  ///
  /// </summary>
  std::string getStnSr() const;
  void setStnSr(std::string const &value);
  bool stnSrIsSet() const;
  void unsetStnSr();
  /// <summary>
  ///
  /// </summary>
  LcsPrivacy getLcsPrivacy() const;
  void setLcsPrivacy(LcsPrivacy const &value);
  bool lcsPrivacyIsSet() const;
  void unsetLcsPrivacy();
  /// <summary>
  ///
  /// </summary>
  SorInfo getSorInfo() const;
  void setSorInfo(SorInfo const &value);
  bool sorInfoIsSet() const;
  void unsetSorInfo();

  friend void to_json(nlohmann::json &j, const PpData &o);
  friend void from_json(const nlohmann::json &j, PpData &o);

protected:
  CommunicationCharacteristics m_CommunicationCharacteristics;
  bool m_CommunicationCharacteristicsIsSet;
  std::string m_SupportedFeatures;
  bool m_SupportedFeaturesIsSet;
  ExpectedUeBehaviour m_ExpectedUeBehaviourParameters;
  bool m_ExpectedUeBehaviourParametersIsSet;
  EcRestriction m_EcRestriction;
  bool m_EcRestrictionIsSet;
  AcsInfoRm m_AcsInfo;
  bool m_AcsInfoIsSet;
  std::string m_StnSr;
  bool m_StnSrIsSet;
  LcsPrivacy m_LcsPrivacy;
  bool m_LcsPrivacyIsSet;
  SorInfo m_SorInfo;
  bool m_SorInfoIsSet;
};

} // namespace oai::udr::model

#endif /* PpData_H_ */
