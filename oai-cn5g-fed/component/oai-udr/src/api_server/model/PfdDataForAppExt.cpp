/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "PfdDataForAppExt.h"

namespace oai::udr::model {

PfdDataForAppExt::PfdDataForAppExt() {
  m_ApplicationId = "";
  m_CachingTime = "";
  m_CachingTimeIsSet = false;
  m_SuppFeat = "";
  m_SuppFeatIsSet = false;
}

PfdDataForAppExt::~PfdDataForAppExt() {}

void PfdDataForAppExt::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const PfdDataForAppExt &o) {
  j = nlohmann::json();
  j["applicationId"] = o.m_ApplicationId;
  j["pfds"] = o.m_Pfds;
  if (o.cachingTimeIsSet())
    j["cachingTime"] = o.m_CachingTime;
  if (o.suppFeatIsSet())
    j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json &j, PfdDataForAppExt &o) {
  j.at("applicationId").get_to(o.m_ApplicationId);
  j.at("pfds").get_to(o.m_Pfds);
  if (j.find("cachingTime") != j.end()) {
    j.at("cachingTime").get_to(o.m_CachingTime);
    o.m_CachingTimeIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
}

std::string PfdDataForAppExt::getApplicationId() const {
  return m_ApplicationId;
}
void PfdDataForAppExt::setApplicationId(std::string const &value) {
  m_ApplicationId = value;
}
std::vector<PfdContent> &PfdDataForAppExt::getPfds() { return m_Pfds; }
void PfdDataForAppExt::setPfds(std::vector<PfdContent> const &value) {
  m_Pfds = value;
}
std::string PfdDataForAppExt::getCachingTime() const { return m_CachingTime; }
void PfdDataForAppExt::setCachingTime(std::string const &value) {
  m_CachingTime = value;
  m_CachingTimeIsSet = true;
}
bool PfdDataForAppExt::cachingTimeIsSet() const { return m_CachingTimeIsSet; }
void PfdDataForAppExt::unsetCachingTime() { m_CachingTimeIsSet = false; }
std::string PfdDataForAppExt::getSuppFeat() const { return m_SuppFeat; }
void PfdDataForAppExt::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
  m_SuppFeatIsSet = true;
}
bool PfdDataForAppExt::suppFeatIsSet() const { return m_SuppFeatIsSet; }
void PfdDataForAppExt::unsetSuppFeat() { m_SuppFeatIsSet = false; }

} // namespace oai::udr::model
