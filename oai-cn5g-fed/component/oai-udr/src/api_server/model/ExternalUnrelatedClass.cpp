/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ExternalUnrelatedClass.h"

namespace oai::udr::model {

ExternalUnrelatedClass::ExternalUnrelatedClass() {
  m_LcsClientExternalsIsSet = false;
  m_AfExternalsIsSet = false;
  m_LcsClientGroupExternalsIsSet = false;
}

ExternalUnrelatedClass::~ExternalUnrelatedClass() {}

void ExternalUnrelatedClass::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ExternalUnrelatedClass &o) {
  j = nlohmann::json();
  if (o.lcsClientExternalsIsSet() || !o.m_LcsClientExternals.empty())
    j["lcsClientExternals"] = o.m_LcsClientExternals;
  if (o.afExternalsIsSet() || !o.m_AfExternals.empty())
    j["afExternals"] = o.m_AfExternals;
  if (o.lcsClientGroupExternalsIsSet() || !o.m_LcsClientGroupExternals.empty())
    j["lcsClientGroupExternals"] = o.m_LcsClientGroupExternals;
}

void from_json(const nlohmann::json &j, ExternalUnrelatedClass &o) {
  if (j.find("lcsClientExternals") != j.end()) {
    j.at("lcsClientExternals").get_to(o.m_LcsClientExternals);
    o.m_LcsClientExternalsIsSet = true;
  }
  if (j.find("afExternals") != j.end()) {
    j.at("afExternals").get_to(o.m_AfExternals);
    o.m_AfExternalsIsSet = true;
  }
  if (j.find("lcsClientGroupExternals") != j.end()) {
    j.at("lcsClientGroupExternals").get_to(o.m_LcsClientGroupExternals);
    o.m_LcsClientGroupExternalsIsSet = true;
  }
}

std::vector<LcsClientExternal> &
ExternalUnrelatedClass::getLcsClientExternals() {
  return m_LcsClientExternals;
}
void ExternalUnrelatedClass::setLcsClientExternals(
    std::vector<LcsClientExternal> const &value) {
  m_LcsClientExternals = value;
  m_LcsClientExternalsIsSet = true;
}
bool ExternalUnrelatedClass::lcsClientExternalsIsSet() const {
  return m_LcsClientExternalsIsSet;
}
void ExternalUnrelatedClass::unsetLcsClientExternals() {
  m_LcsClientExternalsIsSet = false;
}
std::vector<AfExternal> &ExternalUnrelatedClass::getAfExternals() {
  return m_AfExternals;
}
void ExternalUnrelatedClass::setAfExternals(
    std::vector<AfExternal> const &value) {
  m_AfExternals = value;
  m_AfExternalsIsSet = true;
}
bool ExternalUnrelatedClass::afExternalsIsSet() const {
  return m_AfExternalsIsSet;
}
void ExternalUnrelatedClass::unsetAfExternals() { m_AfExternalsIsSet = false; }
std::vector<LcsClientGroupExternal> &
ExternalUnrelatedClass::getLcsClientGroupExternals() {
  return m_LcsClientGroupExternals;
}
void ExternalUnrelatedClass::setLcsClientGroupExternals(
    std::vector<LcsClientGroupExternal> const &value) {
  m_LcsClientGroupExternals = value;
  m_LcsClientGroupExternalsIsSet = true;
}
bool ExternalUnrelatedClass::lcsClientGroupExternalsIsSet() const {
  return m_LcsClientGroupExternalsIsSet;
}
void ExternalUnrelatedClass::unsetLcsClientGroupExternals() {
  m_LcsClientGroupExternalsIsSet = false;
}

} // namespace oai::udr::model
