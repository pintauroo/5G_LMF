/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PresenceInfo.h
 *
 *
 */

#ifndef PresenceInfo_H_
#define PresenceInfo_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "Ecgi.h"
#include "GlobalRanNodeId.h"
#include "Ncgi.h"
#include "PresenceState.h"
#include "Tai.h"

namespace oai::udr::model {

/// <summary>
///
/// </summary>
class PresenceInfo {
public:
  PresenceInfo();
  virtual ~PresenceInfo();

  void validate();

  /////////////////////////////////////////////
  /// PresenceInfo members

  /// <summary>
  ///
  /// </summary>
  std::string getPraId() const;
  void setPraId(std::string const &value);
  bool praIdIsSet() const;
  void unsetPraId();
  /// <summary>
  ///
  /// </summary>
  std::string getAdditionalPraId() const;
  void setAdditionalPraId(std::string const &value);
  bool additionalPraIdIsSet() const;
  void unsetAdditionalPraId();
  /// <summary>
  ///
  /// </summary>
  PresenceState getPresenceState() const;
  void setPresenceState(PresenceState const &value);
  bool presenceStateIsSet() const;
  void unsetPresenceState();
  /// <summary>
  ///
  /// </summary>
  std::vector<Tai> &getTrackingAreaList();
  void setTrackingAreaList(std::vector<Tai> const &value);
  bool trackingAreaListIsSet() const;
  void unsetTrackingAreaList();
  /// <summary>
  ///
  /// </summary>
  std::vector<Ecgi> &getEcgiList();
  void setEcgiList(std::vector<Ecgi> const &value);
  bool ecgiListIsSet() const;
  void unsetEcgiList();
  /// <summary>
  ///
  /// </summary>
  std::vector<Ncgi> &getNcgiList();
  void setNcgiList(std::vector<Ncgi> const &value);
  bool ncgiListIsSet() const;
  void unsetNcgiList();
  /// <summary>
  ///
  /// </summary>
  std::vector<GlobalRanNodeId> &getGlobalRanNodeIdList();
  void setGlobalRanNodeIdList(std::vector<GlobalRanNodeId> const &value);
  bool globalRanNodeIdListIsSet() const;
  void unsetGlobalRanNodeIdList();
  /// <summary>
  ///
  /// </summary>
  std::vector<GlobalRanNodeId> &getGlobaleNbIdList();
  void setGlobaleNbIdList(std::vector<GlobalRanNodeId> const &value);
  bool globaleNbIdListIsSet() const;
  void unsetGlobaleNbIdList();

  friend void to_json(nlohmann::json &j, const PresenceInfo &o);
  friend void from_json(const nlohmann::json &j, PresenceInfo &o);

protected:
  std::string m_PraId;
  bool m_PraIdIsSet;
  std::string m_AdditionalPraId;
  bool m_AdditionalPraIdIsSet;
  PresenceState m_PresenceState;
  bool m_PresenceStateIsSet;
  std::vector<Tai> m_TrackingAreaList;
  bool m_TrackingAreaListIsSet;
  std::vector<Ecgi> m_EcgiList;
  bool m_EcgiListIsSet;
  std::vector<Ncgi> m_NcgiList;
  bool m_NcgiListIsSet;
  std::vector<GlobalRanNodeId> m_GlobalRanNodeIdList;
  bool m_GlobalRanNodeIdListIsSet;
  std::vector<GlobalRanNodeId> m_GlobaleNbIdList;
  bool m_GlobaleNbIdListIsSet;
};

} // namespace oai::udr::model

#endif /* PresenceInfo_H_ */
