/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ServiceParameterData.h"

namespace oai::udr::model {

ServiceParameterData::ServiceParameterData() {
  m_AppId = "";
  m_AppIdIsSet = false;
  m_Dnn = "";
  m_DnnIsSet = false;
  m_SnssaiIsSet = false;
  m_InterGroupId = "";
  m_InterGroupIdIsSet = false;
  m_Supi = "";
  m_SupiIsSet = false;
  m_UeIpv4 = "";
  m_UeIpv4IsSet = false;
  m_UeIpv6 = "";
  m_UeIpv6IsSet = false;
  m_UeMac = "";
  m_UeMacIsSet = false;
  m_AnyUeInd = false;
  m_AnyUeIndIsSet = false;
  m_ParamOverPc5 = "";
  m_ParamOverPc5IsSet = false;
  m_ParamOverUu = "";
  m_ParamOverUuIsSet = false;
  m_SuppFeat = "";
  m_SuppFeatIsSet = false;
  m_ResUri = "";
  m_ResUriIsSet = false;
}

ServiceParameterData::~ServiceParameterData() {}

void ServiceParameterData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const ServiceParameterData &o) {
  j = nlohmann::json();
  if (o.appIdIsSet())
    j["appId"] = o.m_AppId;
  if (o.dnnIsSet())
    j["dnn"] = o.m_Dnn;
  if (o.snssaiIsSet())
    j["snssai"] = o.m_Snssai;
  if (o.interGroupIdIsSet())
    j["interGroupId"] = o.m_InterGroupId;
  if (o.supiIsSet())
    j["supi"] = o.m_Supi;
  if (o.ueIpv4IsSet())
    j["ueIpv4"] = o.m_UeIpv4;
  if (o.ueIpv6IsSet())
    j["ueIpv6"] = o.m_UeIpv6;
  if (o.ueMacIsSet())
    j["ueMac"] = o.m_UeMac;
  if (o.anyUeIndIsSet())
    j["anyUeInd"] = o.m_AnyUeInd;
  if (o.paramOverPc5IsSet())
    j["paramOverPc5"] = o.m_ParamOverPc5;
  if (o.paramOverUuIsSet())
    j["paramOverUu"] = o.m_ParamOverUu;
  if (o.suppFeatIsSet())
    j["suppFeat"] = o.m_SuppFeat;
  if (o.resUriIsSet())
    j["resUri"] = o.m_ResUri;
}

void from_json(const nlohmann::json &j, ServiceParameterData &o) {
  if (j.find("appId") != j.end()) {
    j.at("appId").get_to(o.m_AppId);
    o.m_AppIdIsSet = true;
  }
  if (j.find("dnn") != j.end()) {
    j.at("dnn").get_to(o.m_Dnn);
    o.m_DnnIsSet = true;
  }
  if (j.find("snssai") != j.end()) {
    j.at("snssai").get_to(o.m_Snssai);
    o.m_SnssaiIsSet = true;
  }
  if (j.find("interGroupId") != j.end()) {
    j.at("interGroupId").get_to(o.m_InterGroupId);
    o.m_InterGroupIdIsSet = true;
  }
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  if (j.find("ueIpv4") != j.end()) {
    j.at("ueIpv4").get_to(o.m_UeIpv4);
    o.m_UeIpv4IsSet = true;
  }
  if (j.find("ueIpv6") != j.end()) {
    j.at("ueIpv6").get_to(o.m_UeIpv6);
    o.m_UeIpv6IsSet = true;
  }
  if (j.find("ueMac") != j.end()) {
    j.at("ueMac").get_to(o.m_UeMac);
    o.m_UeMacIsSet = true;
  }
  if (j.find("anyUeInd") != j.end()) {
    j.at("anyUeInd").get_to(o.m_AnyUeInd);
    o.m_AnyUeIndIsSet = true;
  }
  if (j.find("paramOverPc5") != j.end()) {
    j.at("paramOverPc5").get_to(o.m_ParamOverPc5);
    o.m_ParamOverPc5IsSet = true;
  }
  if (j.find("paramOverUu") != j.end()) {
    j.at("paramOverUu").get_to(o.m_ParamOverUu);
    o.m_ParamOverUuIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
  if (j.find("resUri") != j.end()) {
    j.at("resUri").get_to(o.m_ResUri);
    o.m_ResUriIsSet = true;
  }
}

std::string ServiceParameterData::getAppId() const { return m_AppId; }
void ServiceParameterData::setAppId(std::string const &value) {
  m_AppId = value;
  m_AppIdIsSet = true;
}
bool ServiceParameterData::appIdIsSet() const { return m_AppIdIsSet; }
void ServiceParameterData::unsetAppId() { m_AppIdIsSet = false; }
std::string ServiceParameterData::getDnn() const { return m_Dnn; }
void ServiceParameterData::setDnn(std::string const &value) {
  m_Dnn = value;
  m_DnnIsSet = true;
}
bool ServiceParameterData::dnnIsSet() const { return m_DnnIsSet; }
void ServiceParameterData::unsetDnn() { m_DnnIsSet = false; }
Snssai ServiceParameterData::getSnssai() const { return m_Snssai; }
void ServiceParameterData::setSnssai(Snssai const &value) {
  m_Snssai = value;
  m_SnssaiIsSet = true;
}
bool ServiceParameterData::snssaiIsSet() const { return m_SnssaiIsSet; }
void ServiceParameterData::unsetSnssai() { m_SnssaiIsSet = false; }
std::string ServiceParameterData::getInterGroupId() const {
  return m_InterGroupId;
}
void ServiceParameterData::setInterGroupId(std::string const &value) {
  m_InterGroupId = value;
  m_InterGroupIdIsSet = true;
}
bool ServiceParameterData::interGroupIdIsSet() const {
  return m_InterGroupIdIsSet;
}
void ServiceParameterData::unsetInterGroupId() { m_InterGroupIdIsSet = false; }
std::string ServiceParameterData::getSupi() const { return m_Supi; }
void ServiceParameterData::setSupi(std::string const &value) {
  m_Supi = value;
  m_SupiIsSet = true;
}
bool ServiceParameterData::supiIsSet() const { return m_SupiIsSet; }
void ServiceParameterData::unsetSupi() { m_SupiIsSet = false; }
std::string ServiceParameterData::getUeIpv4() const { return m_UeIpv4; }
void ServiceParameterData::setUeIpv4(std::string const &value) {
  m_UeIpv4 = value;
  m_UeIpv4IsSet = true;
}
bool ServiceParameterData::ueIpv4IsSet() const { return m_UeIpv4IsSet; }
void ServiceParameterData::unsetUeIpv4() { m_UeIpv4IsSet = false; }
std::string ServiceParameterData::getUeIpv6() const { return m_UeIpv6; }
void ServiceParameterData::setUeIpv6(std::string const &value) {
  m_UeIpv6 = value;
  m_UeIpv6IsSet = true;
}
bool ServiceParameterData::ueIpv6IsSet() const { return m_UeIpv6IsSet; }
void ServiceParameterData::unsetUeIpv6() { m_UeIpv6IsSet = false; }
std::string ServiceParameterData::getUeMac() const { return m_UeMac; }
void ServiceParameterData::setUeMac(std::string const &value) {
  m_UeMac = value;
  m_UeMacIsSet = true;
}
bool ServiceParameterData::ueMacIsSet() const { return m_UeMacIsSet; }
void ServiceParameterData::unsetUeMac() { m_UeMacIsSet = false; }
bool ServiceParameterData::isAnyUeInd() const { return m_AnyUeInd; }
void ServiceParameterData::setAnyUeInd(bool const value) {
  m_AnyUeInd = value;
  m_AnyUeIndIsSet = true;
}
bool ServiceParameterData::anyUeIndIsSet() const { return m_AnyUeIndIsSet; }
void ServiceParameterData::unsetAnyUeInd() { m_AnyUeIndIsSet = false; }
std::string ServiceParameterData::getParamOverPc5() const {
  return m_ParamOverPc5;
}
void ServiceParameterData::setParamOverPc5(std::string const &value) {
  m_ParamOverPc5 = value;
  m_ParamOverPc5IsSet = true;
}
bool ServiceParameterData::paramOverPc5IsSet() const {
  return m_ParamOverPc5IsSet;
}
void ServiceParameterData::unsetParamOverPc5() { m_ParamOverPc5IsSet = false; }
std::string ServiceParameterData::getParamOverUu() const {
  return m_ParamOverUu;
}
void ServiceParameterData::setParamOverUu(std::string const &value) {
  m_ParamOverUu = value;
  m_ParamOverUuIsSet = true;
}
bool ServiceParameterData::paramOverUuIsSet() const {
  return m_ParamOverUuIsSet;
}
void ServiceParameterData::unsetParamOverUu() { m_ParamOverUuIsSet = false; }
std::string ServiceParameterData::getSuppFeat() const { return m_SuppFeat; }
void ServiceParameterData::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
  m_SuppFeatIsSet = true;
}
bool ServiceParameterData::suppFeatIsSet() const { return m_SuppFeatIsSet; }
void ServiceParameterData::unsetSuppFeat() { m_SuppFeatIsSet = false; }
std::string ServiceParameterData::getResUri() const { return m_ResUri; }
void ServiceParameterData::setResUri(std::string const &value) {
  m_ResUri = value;
  m_ResUriIsSet = true;
}
bool ServiceParameterData::resUriIsSet() const { return m_ResUriIsSet; }
void ServiceParameterData::unsetResUri() { m_ResUriIsSet = false; }

} // namespace oai::udr::model
