/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. © 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * BdtData.h
 *
 * Contains the background data transfer data.
 */

#ifndef BdtData_H_
#define BdtData_H_

#include <nlohmann/json.hpp>
#include <string>

#include "BdtPolicyStatus.h"
#include "NetworkAreaInfo_2.h"
#include "Snssai.h"
#include "TransferPolicy.h"
#include "UsageThreshold.h"

namespace oai::udr::model {

/// <summary>
/// Contains the background data transfer data.
/// </summary>
class BdtData {
public:
  BdtData();
  virtual ~BdtData();

  void validate();

  /////////////////////////////////////////////
  /// BdtData members

  /// <summary>
  ///
  /// </summary>
  std::string getAspId() const;
  void setAspId(std::string const &value);
  /// <summary>
  ///
  /// </summary>
  TransferPolicy getTransPolicy() const;
  void setTransPolicy(TransferPolicy const &value);
  /// <summary>
  /// string identifying a BDT Reference ID as defined in subclause 5.3.3 of
  /// 3GPP TS 29.154.
  /// </summary>
  std::string getBdtRefId() const;
  void setBdtRefId(std::string const &value);
  bool bdtRefIdIsSet() const;
  void unsetBdtRefId();
  /// <summary>
  ///
  /// </summary>
  NetworkAreaInfo_2 getNwAreaInfo() const;
  void setNwAreaInfo(NetworkAreaInfo_2 const &value);
  bool nwAreaInfoIsSet() const;
  void unsetNwAreaInfo();
  /// <summary>
  ///
  /// </summary>
  int32_t getNumOfUes() const;
  void setNumOfUes(int32_t const value);
  bool numOfUesIsSet() const;
  void unsetNumOfUes();
  /// <summary>
  ///
  /// </summary>
  UsageThreshold getVolPerUe() const;
  void setVolPerUe(UsageThreshold const &value);
  bool volPerUeIsSet() const;
  void unsetVolPerUe();
  /// <summary>
  ///
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const &value);
  bool snssaiIsSet() const;
  void unsetSnssai();
  /// <summary>
  /// Identify a traffic descriptor as defined in Figure 5.2.2 of 3GPP
  /// TS 24.526, octets v+5 to w.
  /// </summary>
  std::string getTrafficDes() const;
  void setTrafficDes(std::string const &value);
  bool trafficDesIsSet() const;
  void unsetTrafficDes();
  /// <summary>
  ///
  /// </summary>
  BdtPolicyStatus getBdtpStatus() const;
  void setBdtpStatus(BdtPolicyStatus const &value);
  bool bdtpStatusIsSet() const;
  void unsetBdtpStatus();
  /// <summary>
  ///
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);
  bool suppFeatIsSet() const;
  void unsetSuppFeat();

  friend void to_json(nlohmann::json &j, const BdtData &o);
  friend void from_json(const nlohmann::json &j, BdtData &o);

protected:
  std::string m_AspId;

  TransferPolicy m_TransPolicy;

  std::string m_BdtRefId;
  bool m_BdtRefIdIsSet;
  NetworkAreaInfo_2 m_NwAreaInfo;
  bool m_NwAreaInfoIsSet;
  int32_t m_NumOfUes;
  bool m_NumOfUesIsSet;
  UsageThreshold m_VolPerUe;
  bool m_VolPerUeIsSet;
  std::string m_Dnn;
  bool m_DnnIsSet;
  Snssai m_Snssai;
  bool m_SnssaiIsSet;
  std::string m_TrafficDes;
  bool m_TrafficDesIsSet;
  BdtPolicyStatus m_BdtpStatus;
  bool m_BdtpStatusIsSet;
  std::string m_SuppFeat;
  bool m_SuppFeatIsSet;
};

} // namespace oai::udr::model

#endif /* BdtData_H_ */
