/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "GroupIdentifiers.h"

namespace oai::udr::model {

GroupIdentifiers::GroupIdentifiers() {
  m_ExtGroupId = "";
  m_ExtGroupIdIsSet = false;
  m_IntGroupId = "";
  m_IntGroupIdIsSet = false;
  m_UeIdListIsSet = false;
}

GroupIdentifiers::~GroupIdentifiers() {}

void GroupIdentifiers::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const GroupIdentifiers &o) {
  j = nlohmann::json();
  if (o.extGroupIdIsSet())
    j["extGroupId"] = o.m_ExtGroupId;
  if (o.intGroupIdIsSet())
    j["intGroupId"] = o.m_IntGroupId;
  if (o.ueIdListIsSet() || !o.m_UeIdList.empty())
    j["ueIdList"] = o.m_UeIdList;
}

void from_json(const nlohmann::json &j, GroupIdentifiers &o) {
  if (j.find("extGroupId") != j.end()) {
    j.at("extGroupId").get_to(o.m_ExtGroupId);
    o.m_ExtGroupIdIsSet = true;
  }
  if (j.find("intGroupId") != j.end()) {
    j.at("intGroupId").get_to(o.m_IntGroupId);
    o.m_IntGroupIdIsSet = true;
  }
  if (j.find("ueIdList") != j.end()) {
    j.at("ueIdList").get_to(o.m_UeIdList);
    o.m_UeIdListIsSet = true;
  }
}

std::string GroupIdentifiers::getExtGroupId() const { return m_ExtGroupId; }
void GroupIdentifiers::setExtGroupId(std::string const &value) {
  m_ExtGroupId = value;
  m_ExtGroupIdIsSet = true;
}
bool GroupIdentifiers::extGroupIdIsSet() const { return m_ExtGroupIdIsSet; }
void GroupIdentifiers::unsetExtGroupId() { m_ExtGroupIdIsSet = false; }
std::string GroupIdentifiers::getIntGroupId() const { return m_IntGroupId; }
void GroupIdentifiers::setIntGroupId(std::string const &value) {
  m_IntGroupId = value;
  m_IntGroupIdIsSet = true;
}
bool GroupIdentifiers::intGroupIdIsSet() const { return m_IntGroupIdIsSet; }
void GroupIdentifiers::unsetIntGroupId() { m_IntGroupIdIsSet = false; }
std::vector<UeId> &GroupIdentifiers::getUeIdList() { return m_UeIdList; }
void GroupIdentifiers::setUeIdList(std::vector<UeId> const &value) {
  m_UeIdList = value;
  m_UeIdListIsSet = true;
}
bool GroupIdentifiers::ueIdListIsSet() const { return m_UeIdListIsSet; }
void GroupIdentifiers::unsetUeIdList() { m_UeIdListIsSet = false; }

} // namespace oai::udr::model
