/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "EeSubscription.h"

namespace oai::udr::model {

EeSubscription::EeSubscription() {
  m_CallbackReference = "";
  m_ReportingOptionsIsSet = false;
  m_SupportedFeatures = "";
  m_SupportedFeaturesIsSet = false;
  m_SubscriptionId = "";
  m_SubscriptionIdIsSet = false;
  m_ContextInfoIsSet = false;
  m_EpcAppliedInd = false;
  m_EpcAppliedIndIsSet = false;
  m_ScefDiamHost = "";
  m_ScefDiamHostIsSet = false;
  m_ScefDiamRealm = "";
  m_ScefDiamRealmIsSet = false;
  m_NotifyCorrelationId = "";
  m_NotifyCorrelationIdIsSet = false;
}

EeSubscription::~EeSubscription() {}

void EeSubscription::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const EeSubscription &o) {
  j = nlohmann::json();
  j["callbackReference"] = o.m_CallbackReference;
  j["monitoringConfigurations"] = o.m_MonitoringConfigurations;
  if (o.reportingOptionsIsSet())
    j["reportingOptions"] = o.m_ReportingOptions;
  if (o.supportedFeaturesIsSet())
    j["supportedFeatures"] = o.m_SupportedFeatures;
  if (o.subscriptionIdIsSet())
    j["subscriptionId"] = o.m_SubscriptionId;
  if (o.contextInfoIsSet())
    j["contextInfo"] = o.m_ContextInfo;
  if (o.epcAppliedIndIsSet())
    j["epcAppliedInd"] = o.m_EpcAppliedInd;
  if (o.scefDiamHostIsSet())
    j["scefDiamHost"] = o.m_ScefDiamHost;
  if (o.scefDiamRealmIsSet())
    j["scefDiamRealm"] = o.m_ScefDiamRealm;
  if (o.notifyCorrelationIdIsSet())
    j["notifyCorrelationId"] = o.m_NotifyCorrelationId;
}

void from_json(const nlohmann::json &j, EeSubscription &o) {
  j.at("callbackReference").get_to(o.m_CallbackReference);
  j.at("monitoringConfigurations").get_to(o.m_MonitoringConfigurations);
  if (j.find("reportingOptions") != j.end()) {
    j.at("reportingOptions").get_to(o.m_ReportingOptions);
    o.m_ReportingOptionsIsSet = true;
  }
  if (j.find("supportedFeatures") != j.end()) {
    j.at("supportedFeatures").get_to(o.m_SupportedFeatures);
    o.m_SupportedFeaturesIsSet = true;
  }
  if (j.find("subscriptionId") != j.end()) {
    j.at("subscriptionId").get_to(o.m_SubscriptionId);
    o.m_SubscriptionIdIsSet = true;
  }
  if (j.find("contextInfo") != j.end()) {
    j.at("contextInfo").get_to(o.m_ContextInfo);
    o.m_ContextInfoIsSet = true;
  }
  if (j.find("epcAppliedInd") != j.end()) {
    j.at("epcAppliedInd").get_to(o.m_EpcAppliedInd);
    o.m_EpcAppliedIndIsSet = true;
  }
  if (j.find("scefDiamHost") != j.end()) {
    j.at("scefDiamHost").get_to(o.m_ScefDiamHost);
    o.m_ScefDiamHostIsSet = true;
  }
  if (j.find("scefDiamRealm") != j.end()) {
    j.at("scefDiamRealm").get_to(o.m_ScefDiamRealm);
    o.m_ScefDiamRealmIsSet = true;
  }
  if (j.find("notifyCorrelationId") != j.end()) {
    j.at("notifyCorrelationId").get_to(o.m_NotifyCorrelationId);
    o.m_NotifyCorrelationIdIsSet = true;
  }
}

std::string EeSubscription::getCallbackReference() const {
  return m_CallbackReference;
}
void EeSubscription::setCallbackReference(std::string const &value) {
  m_CallbackReference = value;
}
std::map<std::string, MonitoringConfiguration> &
EeSubscription::getMonitoringConfigurations() {
  return m_MonitoringConfigurations;
}
void EeSubscription::setMonitoringConfigurations(
    std::map<std::string, MonitoringConfiguration> const &value) {
  m_MonitoringConfigurations = value;
}
ReportingOptions EeSubscription::getReportingOptions() const {
  return m_ReportingOptions;
}
void EeSubscription::setReportingOptions(ReportingOptions const &value) {
  m_ReportingOptions = value;
  m_ReportingOptionsIsSet = true;
}
bool EeSubscription::reportingOptionsIsSet() const {
  return m_ReportingOptionsIsSet;
}
void EeSubscription::unsetReportingOptions() {
  m_ReportingOptionsIsSet = false;
}
std::string EeSubscription::getSupportedFeatures() const {
  return m_SupportedFeatures;
}
void EeSubscription::setSupportedFeatures(std::string const &value) {
  m_SupportedFeatures = value;
  m_SupportedFeaturesIsSet = true;
}
bool EeSubscription::supportedFeaturesIsSet() const {
  return m_SupportedFeaturesIsSet;
}
void EeSubscription::unsetSupportedFeatures() {
  m_SupportedFeaturesIsSet = false;
}
std::string EeSubscription::getSubscriptionId() const {
  return m_SubscriptionId;
}
void EeSubscription::setSubscriptionId(std::string const &value) {
  m_SubscriptionId = value;
  m_SubscriptionIdIsSet = true;
}
bool EeSubscription::subscriptionIdIsSet() const {
  return m_SubscriptionIdIsSet;
}
void EeSubscription::unsetSubscriptionId() { m_SubscriptionIdIsSet = false; }
ContextInfo EeSubscription::getContextInfo() const { return m_ContextInfo; }
void EeSubscription::setContextInfo(ContextInfo const &value) {
  m_ContextInfo = value;
  m_ContextInfoIsSet = true;
}
bool EeSubscription::contextInfoIsSet() const { return m_ContextInfoIsSet; }
void EeSubscription::unsetContextInfo() { m_ContextInfoIsSet = false; }
bool EeSubscription::isEpcAppliedInd() const { return m_EpcAppliedInd; }
void EeSubscription::setEpcAppliedInd(bool const value) {
  m_EpcAppliedInd = value;
  m_EpcAppliedIndIsSet = true;
}
bool EeSubscription::epcAppliedIndIsSet() const { return m_EpcAppliedIndIsSet; }
void EeSubscription::unsetEpcAppliedInd() { m_EpcAppliedIndIsSet = false; }
std::string EeSubscription::getScefDiamHost() const { return m_ScefDiamHost; }
void EeSubscription::setScefDiamHost(std::string const &value) {
  m_ScefDiamHost = value;
  m_ScefDiamHostIsSet = true;
}
bool EeSubscription::scefDiamHostIsSet() const { return m_ScefDiamHostIsSet; }
void EeSubscription::unsetScefDiamHost() { m_ScefDiamHostIsSet = false; }
std::string EeSubscription::getScefDiamRealm() const { return m_ScefDiamRealm; }
void EeSubscription::setScefDiamRealm(std::string const &value) {
  m_ScefDiamRealm = value;
  m_ScefDiamRealmIsSet = true;
}
bool EeSubscription::scefDiamRealmIsSet() const { return m_ScefDiamRealmIsSet; }
void EeSubscription::unsetScefDiamRealm() { m_ScefDiamRealmIsSet = false; }
std::string EeSubscription::getNotifyCorrelationId() const {
  return m_NotifyCorrelationId;
}
void EeSubscription::setNotifyCorrelationId(std::string const &value) {
  m_NotifyCorrelationId = value;
  m_NotifyCorrelationIdIsSet = true;
}
bool EeSubscription::notifyCorrelationIdIsSet() const {
  return m_NotifyCorrelationIdIsSet;
}
void EeSubscription::unsetNotifyCorrelationId() {
  m_NotifyCorrelationIdIsSet = false;
}

} // namespace oai::udr::model
