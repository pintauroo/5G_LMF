/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SmPolicyData.h"

namespace oai::udr::model {

SmPolicyData::SmPolicyData() {
  m_UmDataLimitsIsSet = false;
  m_UmDataIsSet = false;
  m_SuppFeat = "";
  m_SuppFeatIsSet = false;
}

SmPolicyData::~SmPolicyData() {}

void SmPolicyData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const SmPolicyData &o) {
  j = nlohmann::json();
  j["smPolicySnssaiData"] = o.m_SmPolicySnssaiData;
  if (o.umDataLimitsIsSet() || !o.m_UmDataLimits.empty())
    j["umDataLimits"] = o.m_UmDataLimits;
  if (o.umDataIsSet() || !o.m_UmData.empty())
    j["umData"] = o.m_UmData;
  if (o.suppFeatIsSet())
    j["suppFeat"] = o.m_SuppFeat;
}

void from_json(const nlohmann::json &j, SmPolicyData &o) {
  j.at("smPolicySnssaiData").get_to(o.m_SmPolicySnssaiData);
  if (j.find("umDataLimits") != j.end()) {
    j.at("umDataLimits").get_to(o.m_UmDataLimits);
    o.m_UmDataLimitsIsSet = true;
  }
  if (j.find("umData") != j.end()) {
    j.at("umData").get_to(o.m_UmData);
    o.m_UmDataIsSet = true;
  }
  if (j.find("suppFeat") != j.end()) {
    j.at("suppFeat").get_to(o.m_SuppFeat);
    o.m_SuppFeatIsSet = true;
  }
}

std::map<std::string, SmPolicySnssaiData> &
SmPolicyData::getSmPolicySnssaiData() {
  return m_SmPolicySnssaiData;
}
void SmPolicyData::setSmPolicySnssaiData(
    std::map<std::string, SmPolicySnssaiData> const &value) {
  m_SmPolicySnssaiData = value;
}
std::map<std::string, UsageMonDataLimit> &SmPolicyData::getUmDataLimits() {
  return m_UmDataLimits;
}
void SmPolicyData::setUmDataLimits(
    std::map<std::string, UsageMonDataLimit> const &value) {
  m_UmDataLimits = value;
  m_UmDataLimitsIsSet = true;
}
bool SmPolicyData::umDataLimitsIsSet() const { return m_UmDataLimitsIsSet; }
void SmPolicyData::unsetUmDataLimits() { m_UmDataLimitsIsSet = false; }
std::map<std::string, UsageMonData> &SmPolicyData::getUmData() {
  return m_UmData;
}
void SmPolicyData::setUmData(std::map<std::string, UsageMonData> const &value) {
  m_UmData = value;
  m_UmDataIsSet = true;
}
bool SmPolicyData::umDataIsSet() const { return m_UmDataIsSet; }
void SmPolicyData::unsetUmData() { m_UmDataIsSet = false; }
std::string SmPolicyData::getSuppFeat() const { return m_SuppFeat; }
void SmPolicyData::setSuppFeat(std::string const &value) {
  m_SuppFeat = value;
  m_SuppFeatIsSet = true;
}
bool SmPolicyData::suppFeatIsSet() const { return m_SuppFeatIsSet; }
void SmPolicyData::unsetSuppFeat() { m_SuppFeatIsSet = false; }

} // namespace oai::udr::model
