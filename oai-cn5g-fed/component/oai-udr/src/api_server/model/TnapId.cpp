/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "TnapId.h"

namespace oai::udr::model {

TnapId::TnapId() {
  m_SsId = "";
  m_SsIdIsSet = false;
  m_BssId = "";
  m_BssIdIsSet = false;
  m_CivicAddressIsSet = false;
}

TnapId::~TnapId() {}

void TnapId::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const TnapId &o) {
  j = nlohmann::json();
  if (o.ssIdIsSet())
    j["ssId"] = o.m_SsId;
  if (o.bssIdIsSet())
    j["bssId"] = o.m_BssId;
  if (o.civicAddressIsSet())
    j["civicAddress"] = o.m_CivicAddress;
}

void from_json(const nlohmann::json &j, TnapId &o) {
  if (j.find("ssId") != j.end()) {
    j.at("ssId").get_to(o.m_SsId);
    o.m_SsIdIsSet = true;
  }
  if (j.find("bssId") != j.end()) {
    j.at("bssId").get_to(o.m_BssId);
    o.m_BssIdIsSet = true;
  }
  if (j.find("civicAddress") != j.end()) {
    j.at("civicAddress").get_to(o.m_CivicAddress);
    o.m_CivicAddressIsSet = true;
  }
}

std::string TnapId::getSsId() const { return m_SsId; }
void TnapId::setSsId(std::string const &value) {
  m_SsId = value;
  m_SsIdIsSet = true;
}
bool TnapId::ssIdIsSet() const { return m_SsIdIsSet; }
void TnapId::unsetSsId() { m_SsIdIsSet = false; }
std::string TnapId::getBssId() const { return m_BssId; }
void TnapId::setBssId(std::string const &value) {
  m_BssId = value;
  m_BssIdIsSet = true;
}
bool TnapId::bssIdIsSet() const { return m_BssIdIsSet; }
void TnapId::unsetBssId() { m_BssIdIsSet = false; }
std::string TnapId::getCivicAddress() const { return m_CivicAddress; }
void TnapId::setCivicAddress(std::string const &value) {
  m_CivicAddress = value;
  m_CivicAddressIsSet = true;
}
bool TnapId::civicAddressIsSet() const { return m_CivicAddressIsSet; }
void TnapId::unsetCivicAddress() { m_CivicAddressIsSet = false; }

} // namespace oai::udr::model
