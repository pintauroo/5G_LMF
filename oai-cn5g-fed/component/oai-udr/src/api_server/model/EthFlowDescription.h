/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * EthFlowDescription.h
 *
 * Identifies an Ethernet flow
 */

#ifndef EthFlowDescription_H_
#define EthFlowDescription_H_

#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "FlowDirection.h"

namespace oai::udr::model {

/// <summary>
/// Identifies an Ethernet flow
/// </summary>
class EthFlowDescription {
public:
  EthFlowDescription();
  virtual ~EthFlowDescription();

  void validate();

  /////////////////////////////////////////////
  /// EthFlowDescription members

  /// <summary>
  ///
  /// </summary>
  std::string getDestMacAddr() const;
  void setDestMacAddr(std::string const &value);
  bool destMacAddrIsSet() const;
  void unsetDestMacAddr();
  /// <summary>
  ///
  /// </summary>
  std::string getEthType() const;
  void setEthType(std::string const &value);
  /// <summary>
  /// Defines a packet filter of an IP flow.
  /// </summary>
  std::string getFDesc() const;
  void setFDesc(std::string const &value);
  bool fDescIsSet() const;
  void unsetFDesc();
  /// <summary>
  ///
  /// </summary>
  FlowDirection getFDir() const;
  void setFDir(FlowDirection const &value);
  bool fDirIsSet() const;
  void unsetFDir();
  /// <summary>
  ///
  /// </summary>
  std::string getSourceMacAddr() const;
  void setSourceMacAddr(std::string const &value);
  bool sourceMacAddrIsSet() const;
  void unsetSourceMacAddr();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> &getVlanTags();
  void setVlanTags(std::vector<std::string> const &value);
  bool vlanTagsIsSet() const;
  void unsetVlanTags();
  /// <summary>
  ///
  /// </summary>
  std::string getSrcMacAddrEnd() const;
  void setSrcMacAddrEnd(std::string const &value);
  bool srcMacAddrEndIsSet() const;
  void unsetSrcMacAddrEnd();
  /// <summary>
  ///
  /// </summary>
  std::string getDestMacAddrEnd() const;
  void setDestMacAddrEnd(std::string const &value);
  bool destMacAddrEndIsSet() const;
  void unsetDestMacAddrEnd();

  friend void to_json(nlohmann::json &j, const EthFlowDescription &o);
  friend void from_json(const nlohmann::json &j, EthFlowDescription &o);

protected:
  std::string m_DestMacAddr;
  bool m_DestMacAddrIsSet;
  std::string m_EthType;

  std::string m_FDesc;
  bool m_FDescIsSet;
  FlowDirection m_FDir;
  bool m_FDirIsSet;
  std::string m_SourceMacAddr;
  bool m_SourceMacAddrIsSet;
  std::vector<std::string> m_VlanTags;
  bool m_VlanTagsIsSet;
  std::string m_SrcMacAddrEnd;
  bool m_SrcMacAddrEndIsSet;
  std::string m_DestMacAddrEnd;
  bool m_DestMacAddrEndIsSet;
};

} // namespace oai::udr::model

#endif /* EthFlowDescription_H_ */
