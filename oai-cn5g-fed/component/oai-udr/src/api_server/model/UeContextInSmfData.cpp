/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeContextInSmfData.h"

namespace oai::udr::model {

UeContextInSmfData::UeContextInSmfData() {
  m_PduSessionsIsSet = false;
  m_PgwInfoIsSet = false;
  m_EmergencyInfoIsSet = false;
}

UeContextInSmfData::~UeContextInSmfData() {}

void UeContextInSmfData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json &j, const UeContextInSmfData &o) {
  j = nlohmann::json();
  if (o.pduSessionsIsSet() || !o.m_PduSessions.empty())
    j["pduSessions"] = o.m_PduSessions;
  if (o.pgwInfoIsSet() || !o.m_PgwInfo.empty())
    j["pgwInfo"] = o.m_PgwInfo;
  if (o.emergencyInfoIsSet())
    j["emergencyInfo"] = o.m_EmergencyInfo;
}

void from_json(const nlohmann::json &j, UeContextInSmfData &o) {
  if (j.find("pduSessions") != j.end()) {
    j.at("pduSessions").get_to(o.m_PduSessions);
    o.m_PduSessionsIsSet = true;
  }
  if (j.find("pgwInfo") != j.end()) {
    j.at("pgwInfo").get_to(o.m_PgwInfo);
    o.m_PgwInfoIsSet = true;
  }
  if (j.find("emergencyInfo") != j.end()) {
    j.at("emergencyInfo").get_to(o.m_EmergencyInfo);
    o.m_EmergencyInfoIsSet = true;
  }
}

std::map<std::string, PduSession> &UeContextInSmfData::getPduSessions() {
  return m_PduSessions;
}
void UeContextInSmfData::setPduSessions(
    std::map<std::string, PduSession> const &value) {
  m_PduSessions = value;
  m_PduSessionsIsSet = true;
}
bool UeContextInSmfData::pduSessionsIsSet() const { return m_PduSessionsIsSet; }
void UeContextInSmfData::unsetPduSessions() { m_PduSessionsIsSet = false; }
std::vector<PgwInfo> &UeContextInSmfData::getPgwInfo() { return m_PgwInfo; }
void UeContextInSmfData::setPgwInfo(std::vector<PgwInfo> const &value) {
  m_PgwInfo = value;
  m_PgwInfoIsSet = true;
}
bool UeContextInSmfData::pgwInfoIsSet() const { return m_PgwInfoIsSet; }
void UeContextInSmfData::unsetPgwInfo() { m_PgwInfoIsSet = false; }
EmergencyInfo UeContextInSmfData::getEmergencyInfo() const {
  return m_EmergencyInfo;
}
void UeContextInSmfData::setEmergencyInfo(EmergencyInfo const &value) {
  m_EmergencyInfo = value;
  m_EmergencyInfoIsSet = true;
}
bool UeContextInSmfData::emergencyInfoIsSet() const {
  return m_EmergencyInfoIsSet;
}
void UeContextInSmfData::unsetEmergencyInfo() { m_EmergencyInfoIsSet = false; }

} // namespace oai::udr::model
