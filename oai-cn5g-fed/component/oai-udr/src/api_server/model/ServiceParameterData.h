/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. © 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * ServiceParameterData.h
 *
 *
 */

#ifndef ServiceParameterData_H_
#define ServiceParameterData_H_

#include <nlohmann/json.hpp>
#include <string>

#include "Snssai.h"

namespace oai::udr::model {

/// <summary>
///
/// </summary>
class ServiceParameterData {
public:
  ServiceParameterData();
  virtual ~ServiceParameterData();

  void validate();

  /////////////////////////////////////////////
  /// ServiceParameterData members

  /// <summary>
  /// Identifies an application.
  /// </summary>
  std::string getAppId() const;
  void setAppId(std::string const &value);
  bool appIdIsSet() const;
  void unsetAppId();
  /// <summary>
  ///
  /// </summary>
  std::string getDnn() const;
  void setDnn(std::string const &value);
  bool dnnIsSet() const;
  void unsetDnn();
  /// <summary>
  ///
  /// </summary>
  Snssai getSnssai() const;
  void setSnssai(Snssai const &value);
  bool snssaiIsSet() const;
  void unsetSnssai();
  /// <summary>
  ///
  /// </summary>
  std::string getInterGroupId() const;
  void setInterGroupId(std::string const &value);
  bool interGroupIdIsSet() const;
  void unsetInterGroupId();
  /// <summary>
  ///
  /// </summary>
  std::string getSupi() const;
  void setSupi(std::string const &value);
  bool supiIsSet() const;
  void unsetSupi();
  /// <summary>
  /// string identifying a Ipv4 address formatted in the \&quot;dotted
  /// decimal\&quot; notation as defined in IETF RFC 1166.
  /// </summary>
  std::string getUeIpv4() const;
  void setUeIpv4(std::string const &value);
  bool ueIpv4IsSet() const;
  void unsetUeIpv4();
  /// <summary>
  /// string identifying a Ipv6 address formatted according to clause 4 in
  /// IETF RFC 5952. The mixed Ipv4 Ipv6 notation according to clause 5 of
  /// IETF RFC 5952 shall not be used.
  /// </summary>
  std::string getUeIpv6() const;
  void setUeIpv6(std::string const &value);
  bool ueIpv6IsSet() const;
  void unsetUeIpv6();
  /// <summary>
  ///
  /// </summary>
  std::string getUeMac() const;
  void setUeMac(std::string const &value);
  bool ueMacIsSet() const;
  void unsetUeMac();
  /// <summary>
  ///
  /// </summary>
  bool isAnyUeInd() const;
  void setAnyUeInd(bool const value);
  bool anyUeIndIsSet() const;
  void unsetAnyUeInd();
  /// <summary>
  ///
  /// </summary>
  std::string getParamOverPc5() const;
  void setParamOverPc5(std::string const &value);
  bool paramOverPc5IsSet() const;
  void unsetParamOverPc5();
  /// <summary>
  ///
  /// </summary>
  std::string getParamOverUu() const;
  void setParamOverUu(std::string const &value);
  bool paramOverUuIsSet() const;
  void unsetParamOverUu();
  /// <summary>
  ///
  /// </summary>
  std::string getSuppFeat() const;
  void setSuppFeat(std::string const &value);
  bool suppFeatIsSet() const;
  void unsetSuppFeat();
  /// <summary>
  ///
  /// </summary>
  std::string getResUri() const;
  void setResUri(std::string const &value);
  bool resUriIsSet() const;
  void unsetResUri();

  friend void to_json(nlohmann::json &j, const ServiceParameterData &o);
  friend void from_json(const nlohmann::json &j, ServiceParameterData &o);

protected:
  std::string m_AppId;
  bool m_AppIdIsSet;
  std::string m_Dnn;
  bool m_DnnIsSet;
  Snssai m_Snssai;
  bool m_SnssaiIsSet;
  std::string m_InterGroupId;
  bool m_InterGroupIdIsSet;
  std::string m_Supi;
  bool m_SupiIsSet;
  std::string m_UeIpv4;
  bool m_UeIpv4IsSet;
  std::string m_UeIpv6;
  bool m_UeIpv6IsSet;
  std::string m_UeMac;
  bool m_UeMacIsSet;
  bool m_AnyUeInd;
  bool m_AnyUeIndIsSet;
  std::string m_ParamOverPc5;
  bool m_ParamOverPc5IsSet;
  std::string m_ParamOverUu;
  bool m_ParamOverUuIsSet;
  std::string m_SuppFeat;
  bool m_SuppFeatIsSet;
  std::string m_ResUri;
  bool m_ResUriIsSet;
};

} // namespace oai::udr::model

#endif /* ServiceParameterData_H_ */
