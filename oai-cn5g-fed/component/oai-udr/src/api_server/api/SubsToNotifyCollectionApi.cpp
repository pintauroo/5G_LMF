/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudr_DataRepository API OpenAPI file
 * Unified Data Repository Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SubsToNotifyCollectionApi.h"

#include "Helpers.h"
#include "udr_config.hpp"

extern oai::udr::config::udr_config udr_cfg;

namespace oai::udr::api {

using namespace oai::udr::helpers;
using namespace oai::udr::model;

SubsToNotifyCollectionApi::SubsToNotifyCollectionApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void SubsToNotifyCollectionApi::init() { setupRoutes(); }

void SubsToNotifyCollectionApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Get(
      *router,
      base + udr_cfg.nudr.api_version + "/subscription-data/subs-to-notify",
      Routes::bind(&SubsToNotifyCollectionApi::query_subs_to_notify_handler,
                   this));
  Routes::Delete(
      *router,
      base + udr_cfg.nudr.api_version + "/subscription-data/subs-to-notify",
      Routes::bind(&SubsToNotifyCollectionApi::
                       remove_multiple_subscription_data_subscriptions_handler,
                   this));
  Routes::Post(
      *router,
      base + udr_cfg.nudr.api_version + "/subscription-data/subs-to-notify",
      Routes::bind(
          &SubsToNotifyCollectionApi::subscription_data_subscriptions_handler,
          this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &SubsToNotifyCollectionApi::subs_to_notify_collection_api_default_handler,
      this));
}

void SubsToNotifyCollectionApi::query_subs_to_notify_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the query params
  auto ueIdQuery = request.query().get("ue-id");
  Pistache::Optional<std::string> ueId;
  if (!ueIdQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(ueIdQuery.get(), valueQuery_instance)) {
      ueId = Pistache::Some(valueQuery_instance);
    }
  }
  auto supportedFeaturesQuery = request.query().get("supported-features");
  Pistache::Optional<std::string> supportedFeatures;
  if (!supportedFeaturesQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(supportedFeaturesQuery.get(), valueQuery_instance)) {
      supportedFeatures = Pistache::Some(valueQuery_instance);
    }
  }

  try {
    this->query_subs_to_notify(ueId, supportedFeatures, response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError &e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void SubsToNotifyCollectionApi::
    remove_multiple_subscription_data_subscriptions_handler(
        const Pistache::Rest::Request &request,
        Pistache::Http::ResponseWriter response) {
  // Getting the query params
  auto ueIdQuery = request.query().get("ue-id");
  Pistache::Optional<std::string> ueId;
  if (!ueIdQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(ueIdQuery.get(), valueQuery_instance)) {
      ueId = Pistache::Some(valueQuery_instance);
    }
  }
  auto nfInstanceIdQuery = request.query().get("nf-instance-id");
  Pistache::Optional<std::string> nfInstanceId;
  if (!nfInstanceIdQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(nfInstanceIdQuery.get(), valueQuery_instance)) {
      nfInstanceId = Pistache::Some(valueQuery_instance);
    }
  }
  auto deleteAllNfsQuery = request.query().get("delete-all-nfs");
  Pistache::Optional<bool> deleteAllNfs;
  if (!deleteAllNfsQuery.isEmpty()) {
    bool valueQuery_instance;
    if (fromStringValue(deleteAllNfsQuery.get(), valueQuery_instance)) {
      deleteAllNfs = Pistache::Some(valueQuery_instance);
    }
  }
  auto implicitUnsubscribeIndicationQuery =
      request.query().get("implicit-unsubscribe-indication");
  Pistache::Optional<bool> implicitUnsubscribeIndication;
  if (!implicitUnsubscribeIndicationQuery.isEmpty()) {
    bool valueQuery_instance;
    if (fromStringValue(implicitUnsubscribeIndicationQuery.get(),
                        valueQuery_instance)) {
      implicitUnsubscribeIndication = Pistache::Some(valueQuery_instance);
    }
  }

  try {
    this->remove_multiple_subscription_data_subscriptions(
        ueId, nfInstanceId, deleteAllNfs, implicitUnsubscribeIndication,
        response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError &e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void SubsToNotifyCollectionApi::subscription_data_subscriptions_handler(
    const Pistache::Rest::Request &request,
    Pistache::Http::ResponseWriter response) {
  // Getting the body param

  SubscriptionDataSubscriptions subscriptionDataSubscriptions;

  try {
    nlohmann::json::parse(request.body()).get_to(subscriptionDataSubscriptions);
    this->subscription_data_subscriptions(subscriptionDataSubscriptions,
                                          response);
  } catch (nlohmann::detail::exception &e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError &e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception &e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void SubsToNotifyCollectionApi::subs_to_notify_collection_api_default_handler(
    const Pistache::Rest::Request &, Pistache::Http::ResponseWriter response) {
  response.send(Pistache::Http::Code::Not_Found,
                "The requested method does not exist");
}

} // namespace oai::udr::api
