/**
 * AUSF API
 * AUSF UE Authentication Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 *file except in compliance with the License. You may obtain a copy of the
 *License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */

#include "AuthenticationResultDeletionApi.h"
#include "Helpers.h"
#include "logger.hpp"
#include <iostream>

using namespace std;

namespace oai {
namespace ausf_server {
namespace api {

using namespace oai::ausf_server::helpers;
using namespace oai::ausf_server::model;

AuthenticationResultDeletionApi::AuthenticationResultDeletionApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void AuthenticationResultDeletionApi::init() {
  setupRoutes();
}

void AuthenticationResultDeletionApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Delete(
      *router, base + "/ue-authentications/:authCtxId/5g-aka-confirmation",
      Routes::bind(
          &AuthenticationResultDeletionApi::
              delete5g_aka_authentication_result_handler,
          this));
  Routes::Delete(
      *router, base + "/ue-authentications/:authCtxId/eap-session",
      Routes::bind(
          &AuthenticationResultDeletionApi::
              delete_eap_authentication_result_handler,
          this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &AuthenticationResultDeletionApi::
          authentication_result_deletion_api_default_handler,
      this));
}

void AuthenticationResultDeletionApi::
    delete5g_aka_authentication_result_handler(
        const Pistache::Rest::Request& request,
        Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto authCtxId = request.param(":authCtxId").as<std::string>();

  try {
    this->delete5g_aka_authentication_result(authCtxId, response);
  } catch (nlohmann::detail::exception& e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError& e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception& e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}
void AuthenticationResultDeletionApi::delete_eap_authentication_result_handler(
    const Pistache::Rest::Request& request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto authCtxId = request.param(":authCtxId").as<std::string>();

  try {
    this->delete_eap_authentication_result(authCtxId, response);
  } catch (nlohmann::detail::exception& e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError& e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception& e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void AuthenticationResultDeletionApi::
    authentication_result_deletion_api_default_handler(
        const Pistache::Rest::Request&,
        Pistache::Http::ResponseWriter response) {
  Logger::ausf_server().info(
      "Authentication_result_deletion_api_default_handler");
  response.send(
      Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}  // namespace api
}  // namespace ausf_server
}  // namespace oai
