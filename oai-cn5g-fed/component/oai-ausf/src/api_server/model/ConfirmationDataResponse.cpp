/**
 * AUSF API
 * AUSF UE Authentication Service. Â© 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 *file except in compliance with the License. You may obtain a copy of the
 *License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */

#include "ConfirmationDataResponse.h"

namespace oai {
namespace ausf_server {
namespace model {

ConfirmationDataResponse::ConfirmationDataResponse() {
  m_Supi       = {};
  m_SupiIsSet  = false;
  m_Kseaf      = {};
  m_KseafIsSet = false;
  m_AuthResult = false;
}

ConfirmationDataResponse::~ConfirmationDataResponse() {}

void ConfirmationDataResponse::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json& j, const ConfirmationDataResponse& o) {
  j               = nlohmann::json();
  j["authResult"] = o.m_AuthResult;
  if (o.supiIsSet()) j["supi"] = o.m_Supi;
  if (o.kseafIsSet()) j["kseaf"] = o.m_Kseaf;
}

void from_json(const nlohmann::json& j, ConfirmationDataResponse& o) {
  j.at("authResult").get_to(o.m_AuthResult);
  if (j.find("supi") != j.end()) {
    j.at("supi").get_to(o.m_Supi);
    o.m_SupiIsSet = true;
  }
  if (j.find("kseaf") != j.end()) {
    j.at("kseaf").get_to(o.m_Kseaf);
    o.m_KseafIsSet = true;
  }
}

// AuthResult ConfirmationDataResponse::getAuthResult() const
// {
//     return m_AuthResult;
// }
// void ConfirmationDataResponse::setAuthResult(AuthResult const& value)
// {
//     m_AuthResult = value;
// }
bool ConfirmationDataResponse::getAuthResult() const {
  return m_AuthResult;
}
void ConfirmationDataResponse::setAuthResult(bool const& value) {
  m_AuthResult = value;
}
std::string ConfirmationDataResponse::getSupi() const {
  return m_Supi;
}
void ConfirmationDataResponse::setSupi(std::string const& value) {
  m_Supi      = value;
  m_SupiIsSet = true;
}
bool ConfirmationDataResponse::supiIsSet() const {
  return m_SupiIsSet;
}
void ConfirmationDataResponse::unsetSupi() {
  m_SupiIsSet = false;
}
std::string ConfirmationDataResponse::getKseaf() const {
  return m_Kseaf;
}
void ConfirmationDataResponse::setKseaf(std::string const& value) {
  m_Kseaf      = value;
  m_KseafIsSet = true;
}
bool ConfirmationDataResponse::kseafIsSet() const {
  return m_KseafIsSet;
}
void ConfirmationDataResponse::unsetKseaf() {
  m_KseafIsSet = false;
}

}  // namespace model
}  // namespace ausf_server
}  // namespace oai
