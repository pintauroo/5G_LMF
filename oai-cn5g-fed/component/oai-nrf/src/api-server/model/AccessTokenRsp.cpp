/**
 * NRF OAuth2
 * NRF OAuth2 Authorization. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AccessTokenRsp.h"

namespace oai {
namespace nrf {
namespace model {

AccessTokenRsp::AccessTokenRsp() {
  m_Access_token    = "";
  m_Token_type      = "";
  m_Expires_in      = 0;
  m_Expires_inIsSet = false;
  m_Scope           = "";
  m_ScopeIsSet      = false;
}

AccessTokenRsp::~AccessTokenRsp() {}

void AccessTokenRsp::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json& j, const AccessTokenRsp& o) {
  j                 = nlohmann::json();
  j["access_token"] = o.m_Access_token;
  j["token_type"]   = o.m_Token_type;
  if (o.expiresInIsSet()) j["expires_in"] = o.m_Expires_in;
  if (o.scopeIsSet()) j["scope"] = o.m_Scope;
}

void from_json(const nlohmann::json& j, AccessTokenRsp& o) {
  j.at("access_token").get_to(o.m_Access_token);
  j.at("token_type").get_to(o.m_Token_type);
  if (j.find("expires_in") != j.end()) {
    j.at("expires_in").get_to(o.m_Expires_in);
    o.m_Expires_inIsSet = true;
  }
  if (j.find("scope") != j.end()) {
    j.at("scope").get_to(o.m_Scope);
    o.m_ScopeIsSet = true;
  }
}

std::string AccessTokenRsp::getAccessToken() const {
  return m_Access_token;
}
void AccessTokenRsp::setAccessToken(std::string const& value) {
  m_Access_token = value;
}
std::string AccessTokenRsp::getTokenType() const {
  return m_Token_type;
}
void AccessTokenRsp::setTokenType(std::string const& value) {
  m_Token_type = value;
}
int32_t AccessTokenRsp::getExpiresIn() const {
  return m_Expires_in;
}
void AccessTokenRsp::setExpiresIn(int32_t const value) {
  m_Expires_in      = value;
  m_Expires_inIsSet = true;
}
bool AccessTokenRsp::expiresInIsSet() const {
  return m_Expires_inIsSet;
}
void AccessTokenRsp::unsetExpires_in() {
  m_Expires_inIsSet = false;
}
std::string AccessTokenRsp::getScope() const {
  return m_Scope;
}
void AccessTokenRsp::setScope(std::string const& value) {
  m_Scope      = value;
  m_ScopeIsSet = true;
}
bool AccessTokenRsp::scopeIsSet() const {
  return m_ScopeIsSet;
}
void AccessTokenRsp::unsetScope() {
  m_ScopeIsSet = false;
}

}  // namespace model
}  // namespace nrf
}  // namespace oai
