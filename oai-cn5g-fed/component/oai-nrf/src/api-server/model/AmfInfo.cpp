/**
 * NRF NFManagement Service
 * NRF NFManagement Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AmfInfo.h"

namespace oai {
namespace nrf {
namespace model {

AmfInfo::AmfInfo() {
  m_AmfSetId                  = "";
  m_AmfRegionId               = "";
  m_TaiListIsSet              = false;
  m_TaiRangeListIsSet         = false;
  m_BackupInfoAmfFailureIsSet = false;
  m_BackupInfoAmfRemovalIsSet = false;
  m_N2InterfaceAmfInfoIsSet   = false;
}

AmfInfo::~AmfInfo() {}

void AmfInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json& j, const AmfInfo& o) {
  j                = nlohmann::json();
  j["amfSetId"]    = o.m_AmfSetId;
  j["amfRegionId"] = o.m_AmfRegionId;
  j["guamiList"]   = o.m_GuamiList;
  if (o.taiListIsSet() || !o.m_TaiList.empty()) j["taiList"] = o.m_TaiList;
  if (o.taiRangeListIsSet() || !o.m_TaiRangeList.empty())
    j["taiRangeList"] = o.m_TaiRangeList;
  if (o.backupInfoAmfFailureIsSet() || !o.m_BackupInfoAmfFailure.empty())
    j["backupInfoAmfFailure"] = o.m_BackupInfoAmfFailure;
  if (o.backupInfoAmfRemovalIsSet() || !o.m_BackupInfoAmfRemoval.empty())
    j["backupInfoAmfRemoval"] = o.m_BackupInfoAmfRemoval;
  if (o.n2InterfaceAmfInfoIsSet())
    j["n2InterfaceAmfInfo"] = o.m_N2InterfaceAmfInfo;
}

void from_json(const nlohmann::json& j, AmfInfo& o) {
  j.at("amfSetId").get_to(o.m_AmfSetId);
  j.at("amfRegionId").get_to(o.m_AmfRegionId);
  j.at("guamiList").get_to(o.m_GuamiList);
  if (j.find("taiList") != j.end()) {
    j.at("taiList").get_to(o.m_TaiList);
    o.m_TaiListIsSet = true;
  }
  if (j.find("taiRangeList") != j.end()) {
    j.at("taiRangeList").get_to(o.m_TaiRangeList);
    o.m_TaiRangeListIsSet = true;
  }
  if (j.find("backupInfoAmfFailure") != j.end()) {
    j.at("backupInfoAmfFailure").get_to(o.m_BackupInfoAmfFailure);
    o.m_BackupInfoAmfFailureIsSet = true;
  }
  if (j.find("backupInfoAmfRemoval") != j.end()) {
    j.at("backupInfoAmfRemoval").get_to(o.m_BackupInfoAmfRemoval);
    o.m_BackupInfoAmfRemovalIsSet = true;
  }
  if (j.find("n2InterfaceAmfInfo") != j.end()) {
    j.at("n2InterfaceAmfInfo").get_to(o.m_N2InterfaceAmfInfo);
    o.m_N2InterfaceAmfInfoIsSet = true;
  }
}

std::string AmfInfo::getAmfSetId() const {
  return m_AmfSetId;
}
void AmfInfo::setAmfSetId(std::string const& value) {
  m_AmfSetId = value;
}
std::string AmfInfo::getAmfRegionId() const {
  return m_AmfRegionId;
}
void AmfInfo::setAmfRegionId(std::string const& value) {
  m_AmfRegionId = value;
}
std::vector<Guami>& AmfInfo::getGuamiList() {
  return m_GuamiList;
}
void AmfInfo::setGuamiList(std::vector<Guami> const& value) {
  m_GuamiList = value;
}
std::vector<Tai>& AmfInfo::getTaiList() {
  return m_TaiList;
}
void AmfInfo::setTaiList(std::vector<Tai> const& value) {
  m_TaiList      = value;
  m_TaiListIsSet = true;
}
bool AmfInfo::taiListIsSet() const {
  return m_TaiListIsSet;
}
void AmfInfo::unsetTaiList() {
  m_TaiListIsSet = false;
}
std::vector<TaiRange>& AmfInfo::getTaiRangeList() {
  return m_TaiRangeList;
}
void AmfInfo::setTaiRangeList(std::vector<TaiRange> const& value) {
  m_TaiRangeList      = value;
  m_TaiRangeListIsSet = true;
}
bool AmfInfo::taiRangeListIsSet() const {
  return m_TaiRangeListIsSet;
}
void AmfInfo::unsetTaiRangeList() {
  m_TaiRangeListIsSet = false;
}
std::vector<Guami>& AmfInfo::getBackupInfoAmfFailure() {
  return m_BackupInfoAmfFailure;
}
void AmfInfo::setBackupInfoAmfFailure(std::vector<Guami> const& value) {
  m_BackupInfoAmfFailure      = value;
  m_BackupInfoAmfFailureIsSet = true;
}
bool AmfInfo::backupInfoAmfFailureIsSet() const {
  return m_BackupInfoAmfFailureIsSet;
}
void AmfInfo::unsetBackupInfoAmfFailure() {
  m_BackupInfoAmfFailureIsSet = false;
}
std::vector<Guami>& AmfInfo::getBackupInfoAmfRemoval() {
  return m_BackupInfoAmfRemoval;
}
void AmfInfo::setBackupInfoAmfRemoval(std::vector<Guami> const& value) {
  m_BackupInfoAmfRemoval      = value;
  m_BackupInfoAmfRemovalIsSet = true;
}
bool AmfInfo::backupInfoAmfRemovalIsSet() const {
  return m_BackupInfoAmfRemovalIsSet;
}
void AmfInfo::unsetBackupInfoAmfRemoval() {
  m_BackupInfoAmfRemovalIsSet = false;
}
N2InterfaceAmfInfo AmfInfo::getN2InterfaceAmfInfo() const {
  return m_N2InterfaceAmfInfo;
}
void AmfInfo::setN2InterfaceAmfInfo(N2InterfaceAmfInfo const& value) {
  m_N2InterfaceAmfInfo      = value;
  m_N2InterfaceAmfInfoIsSet = true;
}
bool AmfInfo::n2InterfaceAmfInfoIsSet() const {
  return m_N2InterfaceAmfInfoIsSet;
}
void AmfInfo::unsetN2InterfaceAmfInfo() {
  m_N2InterfaceAmfInfoIsSet = false;
}

}  // namespace model
}  // namespace nrf
}  // namespace oai
