/**
 * NRF NFManagement Service
 * NRF NFManagement Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * NFProfile.h
 *
 *
 */

#ifndef NFProfile_H_
#define NFProfile_H_

#include "BsfInfo.h"
#include "PcfInfo.h"
#include "NrfInfo.h"
#include "UdmInfo.h"
#include "UpfInfo.h"
#include "ChfInfo.h"
#include "SmfInfo.h"
#include <string>
#include "DefaultNotificationSubscription.h"
#include "Ipv6Addr.h"
#include "NFStatus.h"
#include "NFService.h"
#include "PlmnId.h"
#include "Snssai.h"
#include <vector>
#include "AmfInfo.h"
#include "UdrInfo.h"
//#include "NFType.h"
//#include "Object.h"
#include "PlmnSnssai.h"
#include "AusfInfo.h"
#include "NwdafInfo.h"
#include <nlohmann/json.hpp>

namespace oai {
namespace nrf {
namespace model {

/// <summary>
///
/// </summary>
class NFProfile {
 public:
  NFProfile();
  virtual ~NFProfile();

  void validate();

  /////////////////////////////////////////////
  /// NFProfile members

  /// <summary>
  ///
  /// </summary>
  std::string getNfInstanceId() const;
  void setNfInstanceId(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getNfInstanceName() const;
  void setNfInstanceName(std::string const& value);
  bool nfInstanceNameIsSet() const;
  void unsetNfInstanceName();
  /// <summary>
  ///
  /// </summary>
  std::string getNfType() const;
  void setNfType(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getNfStatus() const;
  void setNfStatus(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  int32_t getHeartBeatTimer() const;
  void setHeartBeatTimer(int32_t const value);
  bool heartBeatTimerIsSet() const;
  void unsetHeartBeatTimer();
  /// <summary>
  ///
  /// </summary>
  std::vector<PlmnId>& getPlmnList();
  void setPlmnList(std::vector<PlmnId> const& value);
  bool plmnListIsSet() const;
  void unsetPlmnList();
  /// <summary>
  ///
  /// </summary>
  std::vector<Snssai> getSNssais() const;
  void setSNssais(std::vector<Snssai> const& value);
  bool sNssaisIsSet() const;
  void unsetSNssais();
  /// <summary>
  ///
  /// </summary>
  std::vector<PlmnSnssai>& getPerPlmnSnssaiList();
  void setPerPlmnSnssaiList(std::vector<PlmnSnssai> const& value);
  bool perPlmnSnssaiListIsSet() const;
  void unsetPerPlmnSnssaiList();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string>& getNsiList();
  void setNsiList(std::vector<std::string> const& value);
  bool nsiListIsSet() const;
  void unsetNsiList();
  /// <summary>
  ///
  /// </summary>
  std::string getFqdn() const;
  void setFqdn(std::string const& value);
  bool fqdnIsSet() const;
  void unsetFqdn();
  /// <summary>
  ///
  /// </summary>
  std::string getInterPlmnFqdn() const;
  void setInterPlmnFqdn(std::string const& value);
  bool interPlmnFqdnIsSet() const;
  void unsetInterPlmnFqdn();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string> getIpv4Addresses() const;
  void setIpv4Addresses(std::vector<std::string> const& value);
  bool ipv4AddressesIsSet() const;
  void unsetIpv4Addresses();
  /// <summary>
  ///
  /// </summary>
  std::vector<Ipv6Addr>& getIpv6Addresses();
  void setIpv6Addresses(std::vector<Ipv6Addr> const& value);
  bool ipv6AddressesIsSet() const;
  void unsetIpv6Addresses();
  /// <summary>
  ///
  /// </summary>
  std::vector<PlmnId>& getAllowedPlmns();
  void setAllowedPlmns(std::vector<PlmnId> const& value);
  bool allowedPlmnsIsSet() const;
  void unsetAllowedPlmns();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string>& getAllowedNfTypes();
  void setAllowedNfTypes(std::vector<std::string> const& value);
  bool allowedNfTypesIsSet() const;
  void unsetAllowedNfTypes();
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string>& getAllowedNfDomains();
  void setAllowedNfDomains(std::vector<std::string> const& value);
  bool allowedNfDomainsIsSet() const;
  void unsetAllowedNfDomains();
  /// <summary>
  ///
  /// </summary>
  std::vector<Snssai>& getAllowedNssais();
  void setAllowedNssais(std::vector<Snssai> const& value);
  bool allowedNssaisIsSet() const;
  void unsetAllowedNssais();
  /// <summary>
  ///
  /// </summary>
  int32_t getPriority() const;
  void setPriority(int32_t const value);
  bool priorityIsSet() const;
  void unsetPriority();
  /// <summary>
  ///
  /// </summary>
  int32_t getCapacity() const;
  void setCapacity(int32_t const value);
  bool capacityIsSet() const;
  void unsetCapacity();
  /// <summary>
  ///
  /// </summary>
  int32_t getLoad() const;
  void setLoad(int32_t const value);
  bool loadIsSet() const;
  void unsetLoad();
  /// <summary>
  ///
  /// </summary>
  std::string getLocality() const;
  void setLocality(std::string const& value);
  bool localityIsSet() const;
  void unsetLocality();
  /// <summary>
  ///
  ///
  /// </summary>
  UdrInfo getUdrInfo() const;
  void setUdrInfo(UdrInfo const& value);
  bool udrInfoIsSet() const;
  void unsetUdrInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<UdrInfo>& getUdrInfoExt();
  void setUdrInfoExt(std::vector<UdrInfo> const& value);
  bool udrInfoExtIsSet() const;
  void unsetUdrInfoExt();
  /// <summary>
  ///
  /// </summary>
  UdmInfo getUdmInfo() const;
  void setUdmInfo(UdmInfo const& value);
  bool udmInfoIsSet() const;
  void unsetUdmInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<UdmInfo>& getUdmInfoExt();
  void setUdmInfoExt(std::vector<UdmInfo> const& value);
  bool udmInfoExtIsSet() const;
  void unsetUdmInfoExt();
  /// <summary>
  ///
  /// </summary>
  AusfInfo getAusfInfo() const;
  void setAusfInfo(AusfInfo const& value);
  bool ausfInfoIsSet() const;
  void unsetAusfInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<AusfInfo>& getAusfInfoExt();
  void setAusfInfoExt(std::vector<AusfInfo> const& value);
  bool ausfInfoExtIsSet() const;
  void unsetAusfInfoExt();
  /// <summary>
  ///
  /// </summary>
  AmfInfo getAmfInfo() const;
  void setAmfInfo(AmfInfo const& value);
  bool amfInfoIsSet() const;
  void unsetAmfInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<AmfInfo>& getAmfInfoExt();
  void setAmfInfoExt(std::vector<AmfInfo> const& value);
  bool amfInfoExtIsSet() const;
  void unsetAmfInfoExt();
  /// <summary>
  ///
  /// </summary>
  SmfInfo getSmfInfo() const;
  void setSmfInfo(SmfInfo const& value);
  bool smfInfoIsSet() const;
  void unsetSmfInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<SmfInfo>& getSmfInfoExt();
  void setSmfInfoExt(std::vector<SmfInfo> const& value);
  bool smfInfoExtIsSet() const;
  void unsetSmfInfoExt();
  /// <summary>
  ///
  /// </summary>
  UpfInfo getUpfInfo() const;
  void setUpfInfo(UpfInfo const& value);
  bool upfInfoIsSet() const;
  void unsetUpfInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<UpfInfo>& getUpfInfoExt();
  void setUpfInfoExt(std::vector<UpfInfo> const& value);
  bool upfInfoExtIsSet() const;
  void unsetUpfInfoExt();
  /// <summary>
  ///
  /// </summary>
  PcfInfo getPcfInfo() const;
  void setPcfInfo(PcfInfo const& value);
  bool pcfInfoIsSet() const;
  void unsetPcfInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<PcfInfo>& getPcfInfoExt();
  void setPcfInfoExt(std::vector<PcfInfo> const& value);
  bool pcfInfoExtIsSet() const;
  void unsetPcfInfoExt();
  /// <summary>
  ///
  /// </summary>
  BsfInfo getBsfInfo() const;
  void setBsfInfo(BsfInfo const& value);
  bool bsfInfoIsSet() const;
  void unsetBsfInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<BsfInfo>& getBsfInfoExt();
  void setBsfInfoExt(std::vector<BsfInfo> const& value);
  bool bsfInfoExtIsSet() const;
  void unsetBsfInfoExt();
  /// <summary>
  ///
  /// </summary>
  ChfInfo getChfInfo() const;
  void setChfInfo(ChfInfo const& value);
  bool chfInfoIsSet() const;
  void unsetChfInfo();
  /// <summary>
  ///
  /// </summary>
  std::vector<ChfInfo>& getChfInfoExt();
  void setChfInfoExt(std::vector<ChfInfo> const& value);
  bool chfInfoExtIsSet() const;
  void unsetChfInfoExt();
  /// <summary>
  ///
  /// </summary>
  NrfInfo getNrfInfo() const;
  void setNrfInfo(NrfInfo const& value);
  bool nrfInfoIsSet() const;
  void unsetNrfInfo();
  /// <summary>
  ///
  /// </summary>
  NwdafInfo getNwdafInfo() const;
  void setNwdafInfo(NwdafInfo const& value);
  bool nwdafInfoIsSet() const;
  void unsetNwdafInfo();
  /// <summary>
  ///
  /// </summary>
  // Object getCustomInfo() const;
  // void setCustomInfo(Object const& value);
  // bool customInfoIsSet() const;
  // void unsetCustomInfo();
  /// <summary>
  ///
  /// </summary>
  std::string getRecoveryTime() const;
  void setRecoveryTime(std::string const& value);
  bool recoveryTimeIsSet() const;
  void unsetRecoveryTime();
  /// <summary>
  ///
  /// </summary>
  bool isNfServicePersistence() const;
  void setNfServicePersistence(bool const value);
  bool nfServicePersistenceIsSet() const;
  void unsetNfServicePersistence();
  /// <summary>
  ///
  /// </summary>
  std::vector<NFService> getNfServices() const;
  void setNfServices(std::vector<NFService> const& value);
  bool nfServicesIsSet() const;
  void unsetNfServices();
  /// <summary>
  ///
  /// </summary>
  bool isNfProfileChangesSupportInd() const;
  void setNfProfileChangesSupportInd(bool const value);
  bool nfProfileChangesSupportIndIsSet() const;
  void unsetNfProfileChangesSupportInd();
  /// <summary>
  ///
  /// </summary>
  bool isNfProfileChangesInd() const;
  void setNfProfileChangesInd(bool const value);
  bool nfProfileChangesIndIsSet() const;
  void unsetNfProfileChangesInd();
  /// <summary>
  ///
  /// </summary>
  std::vector<DefaultNotificationSubscription>&
  getDefaultNotificationSubscriptions();
  void setDefaultNotificationSubscriptions(
      std::vector<DefaultNotificationSubscription> const& value);
  bool defaultNotificationSubscriptionsIsSet() const;
  void unsetDefaultNotificationSubscriptions();

  friend void to_json(nlohmann::json& j, const NFProfile& o);
  friend void from_json(const nlohmann::json& j, NFProfile& o);

 protected:
  std::string m_NfInstanceId;

  std::string m_NfInstanceName;
  bool m_NfInstanceNameIsSet;
  std::string m_NfType;

  std::string m_NfStatus;

  int32_t m_HeartBeatTimer;
  bool m_HeartBeatTimerIsSet;
  std::vector<PlmnId> m_PlmnList;
  bool m_PlmnListIsSet;
  std::vector<Snssai> m_SNssais;
  bool m_SNssaisIsSet;
  std::vector<PlmnSnssai> m_PerPlmnSnssaiList;
  bool m_PerPlmnSnssaiListIsSet;
  std::vector<std::string> m_NsiList;
  bool m_NsiListIsSet;
  std::string m_Fqdn;
  bool m_FqdnIsSet;
  std::string m_InterPlmnFqdn;
  bool m_InterPlmnFqdnIsSet;
  std::vector<std::string> m_Ipv4Addresses;
  bool m_Ipv4AddressesIsSet;
  std::vector<Ipv6Addr> m_Ipv6Addresses;
  bool m_Ipv6AddressesIsSet;
  std::vector<PlmnId> m_AllowedPlmns;
  bool m_AllowedPlmnsIsSet;
  std::vector<std::string> m_AllowedNfTypes;
  bool m_AllowedNfTypesIsSet;
  std::vector<std::string> m_AllowedNfDomains;
  bool m_AllowedNfDomainsIsSet;
  std::vector<Snssai> m_AllowedNssais;
  bool m_AllowedNssaisIsSet;
  int32_t m_Capacity;
  bool m_CapacityIsSet;
  int32_t m_Load;
  bool m_LoadIsSet;
  std::string m_Locality;
  bool m_LocalityIsSet;
  int32_t m_Priority;
  bool m_PriorityIsSet;
  UdrInfo m_UdrInfo;
  bool m_UdrInfoIsSet;
  std::vector<UdrInfo> m_UdrInfoExt;
  bool m_UdrInfoExtIsSet;
  UdmInfo m_UdmInfo;
  bool m_UdmInfoIsSet;
  std::vector<UdmInfo> m_UdmInfoExt;
  bool m_UdmInfoExtIsSet;
  AusfInfo m_AusfInfo;
  bool m_AusfInfoIsSet;
  std::vector<AusfInfo> m_AusfInfoExt;
  bool m_AusfInfoExtIsSet;
  AmfInfo m_AmfInfo;
  bool m_AmfInfoIsSet;
  std::vector<AmfInfo> m_AmfInfoExt;
  bool m_AmfInfoExtIsSet;
  SmfInfo m_SmfInfo;
  bool m_SmfInfoIsSet;
  std::vector<SmfInfo> m_SmfInfoExt;
  bool m_SmfInfoExtIsSet;
  UpfInfo m_UpfInfo;
  bool m_UpfInfoIsSet;
  std::vector<UpfInfo> m_UpfInfoExt;
  bool m_UpfInfoExtIsSet;
  PcfInfo m_PcfInfo;
  bool m_PcfInfoIsSet;
  std::vector<PcfInfo> m_PcfInfoExt;
  bool m_PcfInfoExtIsSet;
  BsfInfo m_BsfInfo;
  bool m_BsfInfoIsSet;
  std::vector<BsfInfo> m_BsfInfoExt;
  bool m_BsfInfoExtIsSet;
  ChfInfo m_ChfInfo;
  bool m_ChfInfoIsSet;
  std::vector<ChfInfo> m_ChfInfoExt;
  bool m_ChfInfoExtIsSet;
  NrfInfo m_NrfInfo;
  bool m_NrfInfoIsSet;
  NwdafInfo m_NwdafInfo;
  bool m_NwdafInfoIsSet;
  // Object m_CustomInfo;
  // bool m_CustomInfoIsSet;
  std::string m_RecoveryTime;
  bool m_RecoveryTimeIsSet;
  bool m_NfServicePersistence;
  bool m_NfServicePersistenceIsSet;
  std::vector<NFService> m_NfServices;
  bool m_NfServicesIsSet;
  bool m_NfProfileChangesSupportInd;
  bool m_NfProfileChangesSupportIndIsSet;
  bool m_NfProfileChangesInd;
  bool m_NfProfileChangesIndIsSet;
  std::vector<DefaultNotificationSubscription>
      m_DefaultNotificationSubscriptions;
  bool m_DefaultNotificationSubscriptionsIsSet;
};

}  // namespace model
}  // namespace nrf
}  // namespace oai

#endif /* NFProfile_H_ */
