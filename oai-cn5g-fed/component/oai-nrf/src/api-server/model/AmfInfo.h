/**
 * NRF NFManagement Service
 * NRF NFManagement Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AmfInfo.h
 *
 *
 */

#ifndef AmfInfo_H_
#define AmfInfo_H_

#include "N2InterfaceAmfInfo.h"
#include "Tai.h"
#include <string>
#include "TaiRange.h"
#include <vector>
#include "Guami.h"
#include <nlohmann/json.hpp>

namespace oai {
namespace nrf {
namespace model {

/// <summary>
///
/// </summary>
class AmfInfo {
 public:
  AmfInfo();
  virtual ~AmfInfo();

  void validate();

  /////////////////////////////////////////////
  /// AmfInfo members

  /// <summary>
  ///
  /// </summary>
  std::string getAmfSetId() const;
  void setAmfSetId(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getAmfRegionId() const;
  void setAmfRegionId(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::vector<Guami>& getGuamiList();
  void setGuamiList(std::vector<Guami> const& value);
  /// <summary>
  ///
  /// </summary>
  std::vector<Tai>& getTaiList();
  void setTaiList(std::vector<Tai> const& value);
  bool taiListIsSet() const;
  void unsetTaiList();
  /// <summary>
  ///
  /// </summary>
  std::vector<TaiRange>& getTaiRangeList();
  void setTaiRangeList(std::vector<TaiRange> const& value);
  bool taiRangeListIsSet() const;
  void unsetTaiRangeList();
  /// <summary>
  ///
  /// </summary>
  std::vector<Guami>& getBackupInfoAmfFailure();
  void setBackupInfoAmfFailure(std::vector<Guami> const& value);
  bool backupInfoAmfFailureIsSet() const;
  void unsetBackupInfoAmfFailure();
  /// <summary>
  ///
  /// </summary>
  std::vector<Guami>& getBackupInfoAmfRemoval();
  void setBackupInfoAmfRemoval(std::vector<Guami> const& value);
  bool backupInfoAmfRemovalIsSet() const;
  void unsetBackupInfoAmfRemoval();
  /// <summary>
  ///
  /// </summary>
  N2InterfaceAmfInfo getN2InterfaceAmfInfo() const;
  void setN2InterfaceAmfInfo(N2InterfaceAmfInfo const& value);
  bool n2InterfaceAmfInfoIsSet() const;
  void unsetN2InterfaceAmfInfo();

  friend void to_json(nlohmann::json& j, const AmfInfo& o);
  friend void from_json(const nlohmann::json& j, AmfInfo& o);

 protected:
  std::string m_AmfSetId;

  std::string m_AmfRegionId;

  std::vector<Guami> m_GuamiList;

  std::vector<Tai> m_TaiList;
  bool m_TaiListIsSet;
  std::vector<TaiRange> m_TaiRangeList;
  bool m_TaiRangeListIsSet;
  std::vector<Guami> m_BackupInfoAmfFailure;
  bool m_BackupInfoAmfFailureIsSet;
  std::vector<Guami> m_BackupInfoAmfRemoval;
  bool m_BackupInfoAmfRemovalIsSet;
  N2InterfaceAmfInfo m_N2InterfaceAmfInfo;
  bool m_N2InterfaceAmfInfoIsSet;
};

}  // namespace model
}  // namespace nrf
}  // namespace oai

#endif /* AmfInfo_H_ */
