/**
 * NRF NFManagement Service
 * NRF NFManagement Service. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "NwdafInfo.h"

namespace oai {
namespace nrf {
namespace model {

NwdafInfo::NwdafInfo() {
  m_EventIdsIsSet     = false;
  m_NwdafEventsIsSet  = false;
  m_TaiListIsSet      = false;
  m_TaiRangeListIsSet = false;
}

NwdafInfo::~NwdafInfo() {}

void NwdafInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json& j, const NwdafInfo& o) {
  j = nlohmann::json();
  if (o.eventIdsIsSet() || !o.m_EventIds.empty()) j["eventIds"] = o.m_EventIds;
  if (o.nwdafEventsIsSet() || !o.m_NwdafEvents.empty())
    j["nwdafEvents"] = o.m_NwdafEvents;
  if (o.taiListIsSet() || !o.m_TaiList.empty()) j["taiList"] = o.m_TaiList;
  if (o.taiRangeListIsSet() || !o.m_TaiRangeList.empty())
    j["taiRangeList"] = o.m_TaiRangeList;
}

void from_json(const nlohmann::json& j, NwdafInfo& o) {
  if (j.find("eventIds") != j.end()) {
    j.at("eventIds").get_to(o.m_EventIds);
    o.m_EventIdsIsSet = true;
  }
  if (j.find("nwdafEvents") != j.end()) {
    j.at("nwdafEvents").get_to(o.m_NwdafEvents);
    o.m_NwdafEventsIsSet = true;
  }
  if (j.find("taiList") != j.end()) {
    j.at("taiList").get_to(o.m_TaiList);
    o.m_TaiListIsSet = true;
  }
  if (j.find("taiRangeList") != j.end()) {
    j.at("taiRangeList").get_to(o.m_TaiRangeList);
    o.m_TaiRangeListIsSet = true;
  }
}

std::vector<EventId>& NwdafInfo::getEventIds() {
  return m_EventIds;
}
void NwdafInfo::setEventIds(std::vector<EventId> const& value) {
  m_EventIds      = value;
  m_EventIdsIsSet = true;
}
bool NwdafInfo::eventIdsIsSet() const {
  return m_EventIdsIsSet;
}
void NwdafInfo::unsetEventIds() {
  m_EventIdsIsSet = false;
}
std::vector<NwdafEvent>& NwdafInfo::getNwdafEvents() {
  return m_NwdafEvents;
}
void NwdafInfo::setNwdafEvents(std::vector<NwdafEvent> const& value) {
  m_NwdafEvents      = value;
  m_NwdafEventsIsSet = true;
}
bool NwdafInfo::nwdafEventsIsSet() const {
  return m_NwdafEventsIsSet;
}
void NwdafInfo::unsetNwdafEvents() {
  m_NwdafEventsIsSet = false;
}
std::vector<Tai>& NwdafInfo::getTaiList() {
  return m_TaiList;
}
void NwdafInfo::setTaiList(std::vector<Tai> const& value) {
  m_TaiList      = value;
  m_TaiListIsSet = true;
}
bool NwdafInfo::taiListIsSet() const {
  return m_TaiListIsSet;
}
void NwdafInfo::unsetTaiList() {
  m_TaiListIsSet = false;
}
std::vector<TaiRange>& NwdafInfo::getTaiRangeList() {
  return m_TaiRangeList;
}
void NwdafInfo::setTaiRangeList(std::vector<TaiRange> const& value) {
  m_TaiRangeList      = value;
  m_TaiRangeListIsSet = true;
}
bool NwdafInfo::taiRangeListIsSet() const {
  return m_TaiRangeListIsSet;
}
void NwdafInfo::unsetTaiRangeList() {
  m_TaiRangeListIsSet = false;
}

}  // namespace model
}  // namespace nrf
}  // namespace oai
