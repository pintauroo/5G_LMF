/**
 * NRF OAuth2
 * NRF OAuth2 Authorization. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AccessTokenClaims.h"

namespace oai {
namespace nrf {
namespace model {

AccessTokenClaims::AccessTokenClaims() {
  m_Iss                 = "";
  m_Sub                 = "";
  m_Scope               = "";
  m_Exp                 = 0;
  m_ConsumerPlmnIdIsSet = false;
  m_ProducerPlmnIdIsSet = false;
}

AccessTokenClaims::~AccessTokenClaims() {}

void AccessTokenClaims::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json& j, const AccessTokenClaims& o) {
  j          = nlohmann::json();
  j["iss"]   = o.m_Iss;
  j["sub"]   = o.m_Sub;
  j["aud"]   = o.m_Aud;
  j["scope"] = o.m_Scope;
  j["exp"]   = o.m_Exp;
  if (o.consumerPlmnIdIsSet()) j["consumerPlmnId"] = o.m_ConsumerPlmnId;
  if (o.producerPlmnIdIsSet()) j["producerPlmnId"] = o.m_ProducerPlmnId;
}

void from_json(const nlohmann::json& j, AccessTokenClaims& o) {
  j.at("iss").get_to(o.m_Iss);
  j.at("sub").get_to(o.m_Sub);
  j.at("aud").get_to(o.m_Aud);
  j.at("scope").get_to(o.m_Scope);
  j.at("exp").get_to(o.m_Exp);
  if (j.find("consumerPlmnId") != j.end()) {
    j.at("consumerPlmnId").get_to(o.m_ConsumerPlmnId);
    o.m_ConsumerPlmnIdIsSet = true;
  }
  if (j.find("producerPlmnId") != j.end()) {
    j.at("producerPlmnId").get_to(o.m_ProducerPlmnId);
    o.m_ProducerPlmnIdIsSet = true;
  }
}

std::string AccessTokenClaims::getIss() const {
  return m_Iss;
}
void AccessTokenClaims::setIss(std::string const& value) {
  m_Iss = value;
}
std::string AccessTokenClaims::getSub() const {
  return m_Sub;
}
void AccessTokenClaims::setSub(std::string const& value) {
  m_Sub = value;
}
audience_t AccessTokenClaims::getAud() const {
  return m_Aud;
}
void AccessTokenClaims::setAud(audience_t const& value) {
  m_Aud = value;
}
std::string AccessTokenClaims::getScope() const {
  return m_Scope;
}
void AccessTokenClaims::setScope(std::string const& value) {
  m_Scope = value;
}
int32_t AccessTokenClaims::getExp() const {
  return m_Exp;
}
void AccessTokenClaims::setExp(int32_t const value) {
  m_Exp = value;
}
PlmnId AccessTokenClaims::getConsumerPlmnId() const {
  return m_ConsumerPlmnId;
}
void AccessTokenClaims::setConsumerPlmnId(PlmnId const& value) {
  m_ConsumerPlmnId      = value;
  m_ConsumerPlmnIdIsSet = true;
}
bool AccessTokenClaims::consumerPlmnIdIsSet() const {
  return m_ConsumerPlmnIdIsSet;
}
void AccessTokenClaims::unsetConsumerPlmnId() {
  m_ConsumerPlmnIdIsSet = false;
}
PlmnId AccessTokenClaims::getProducerPlmnId() const {
  return m_ProducerPlmnId;
}
void AccessTokenClaims::setProducerPlmnId(PlmnId const& value) {
  m_ProducerPlmnId      = value;
  m_ProducerPlmnIdIsSet = true;
}
bool AccessTokenClaims::producerPlmnIdIsSet() const {
  return m_ProducerPlmnIdIsSet;
}
void AccessTokenClaims::unsetProducerPlmnId() {
  m_ProducerPlmnIdIsSet = false;
}

}  // namespace model
}  // namespace nrf
}  // namespace oai
