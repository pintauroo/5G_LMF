/**
 * NRF OAuth2
 * NRF OAuth2 Authorization. Â© 2019, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.0.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * AccessTokenClaims.h
 *
 *
 */

#ifndef AccessTokenClaims_H_
#define AccessTokenClaims_H_

#include <string>
//#include "AnyOfNFTypearray.h"
#include "PlmnId.h"
#include <nlohmann/json.hpp>

namespace oai {
namespace nrf {
namespace model {

/// <summary>
///
/// </summary>

typedef struct audience_s {
  uint8_t type;
  union {
    uint8_t nf_type;
    std::vector<std::string> nf_instances;
  };

  audience_s() : type(0) { nf_type = 0; }

  audience_s(uint8_t t) : type(t) { nf_type = 0; };

  audience_s(const audience_s& a) : audience_s() {
    type = a.type;
    switch (a.type) {
      case 0:
        nf_type = a.nf_type;
        break;
      case 1:
        nf_instances = a.nf_instances;
        break;
      default:
        break;
    }
  }

  audience_s& operator=(const audience_s& a) {
    type = a.type;
    switch (a.type) {
      case 0: {
        nf_type = a.nf_type;
      } break;

      case 1: {
        nf_instances = a.nf_instances;
      } break;
      default: {
        // TODO:
      }
    }
    return *this;
    // TODO:
  }

  virtual ~audience_s(){};

  friend void to_json(nlohmann::json& j, const audience_s& a) {
    switch (a.type) {
      case 0: {
        j["nf_type"] = a.nf_type;
      } break;
      case 1: {
        j["nf_instances"] = nlohmann::json::array();
        for (auto i : a.nf_instances) {
          j["nf_instances"].push_back(i);
        }
      } break;

      default: {
      }
    }
  }

  friend void from_json(const nlohmann::json& j, audience_s& a) {
    if (j.find("nf_type") != j.end()) {
      j.at("nf_type").get_to(a.nf_type);
      a.type = 0;
    }

    if (j.find("nf_instances") != j.end()) {
      j.at("nf_instances").get_to(a.nf_instances);
      a.type = 1;
    }
  }

} audience_t;

class AccessTokenClaims {
 public:
  AccessTokenClaims();
  virtual ~AccessTokenClaims();

  void validate();

  /////////////////////////////////////////////
  /// AccessTokenClaims members

  /// <summary>
  ///
  /// </summary>
  std::string getIss() const;
  void setIss(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getSub() const;
  void setSub(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  audience_t getAud() const;
  void setAud(audience_t const& value);
  /// <summary>
  ///
  /// </summary>
  std::string getScope() const;
  void setScope(std::string const& value);
  /// <summary>
  ///
  /// </summary>
  int32_t getExp() const;
  void setExp(int32_t const value);
  /// <summary>
  ///
  /// </summary>
  PlmnId getConsumerPlmnId() const;
  void setConsumerPlmnId(PlmnId const& value);
  bool consumerPlmnIdIsSet() const;
  void unsetConsumerPlmnId();
  /// <summary>
  ///
  /// </summary>
  PlmnId getProducerPlmnId() const;
  void setProducerPlmnId(PlmnId const& value);
  bool producerPlmnIdIsSet() const;
  void unsetProducerPlmnId();

  friend void to_json(nlohmann::json& j, const AccessTokenClaims& o);
  friend void from_json(const nlohmann::json& j, AccessTokenClaims& o);

 protected:
  std::string m_Iss;

  std::string m_Sub;

  audience_t m_Aud;

  std::string m_Scope;

  int32_t m_Exp;

  PlmnId m_ConsumerPlmnId;
  bool m_ConsumerPlmnIdIsSet;
  PlmnId m_ProducerPlmnId;
  bool m_ProducerPlmnIdIsSet;
};

}  // namespace model
}  // namespace nrf
}  // namespace oai

#endif /* AccessTokenClaims_H_ */
