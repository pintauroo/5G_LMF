/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudm_UECM
 * Nudm Context Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UECMRegistrationInfoRetrievalApi.h"

#include "Helpers.h"
#include "udm_config.hpp"

extern oai::udm::config::udm_config udm_cfg;

namespace oai::udm::api {

using namespace oai::udm::helpers;
using namespace oai::udm::model;
using namespace oai::udm::config;

UECMRegistrationInfoRetrievalApi::UECMRegistrationInfoRetrievalApi(
    std::shared_ptr<Pistache::Rest::Router> rtr) {
  router = rtr;
}

void UECMRegistrationInfoRetrievalApi::init() {
  setupRoutes();
}

void UECMRegistrationInfoRetrievalApi::setupRoutes() {
  using namespace Pistache::Rest;

  Routes::Get(
      *router, base + udm_cfg.sbi.api_version + "/:ueId/registrations",
      Routes::bind(
          &UECMRegistrationInfoRetrievalApi::get_registrations_handler, this));

  // Default handler, called when a route is not found
  router->addCustomHandler(Routes::bind(
      &UECMRegistrationInfoRetrievalApi::
          uecm_registration_info_retrieval_api_default_handler,
      this));
}

void UECMRegistrationInfoRetrievalApi::get_registrations_handler(
    const Pistache::Rest::Request& request,
    Pistache::Http::ResponseWriter response) {
  // Getting the path params
  auto ueId = request.param(":ueId").as<std::string>();

  // Getting the query params
  auto supportedFeaturesQuery = request.query().get("supported-features");
  Pistache::Optional<std::string> supportedFeatures;
  if (!supportedFeaturesQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(supportedFeaturesQuery.get(), valueQuery_instance)) {
      supportedFeatures = Pistache::Some(valueQuery_instance);
    }
  }
  auto registrationDatasetNamesQuery =
      request.query().get("registration-dataset-names");
  Pistache::Optional<std::vector<RegistrationDataSetName>>
      registrationDatasetNames;
  if (!registrationDatasetNamesQuery.isEmpty()) {
    std::vector<RegistrationDataSetName> valueQuery_instance;
    // if(fromStringValue(registrationDatasetNamesQuery.get(),
    // valueQuery_instance)){
    //    registrationDatasetNames = Pistache::Some(valueQuery_instance);
    //}
  }
  auto singleNssaiQuery = request.query().get("single-nssai");
  Pistache::Optional<Snssai> singleNssai;
  if (!singleNssaiQuery.isEmpty()) {
    Snssai valueQuery_instance;
    // if(fromStringValue(singleNssaiQuery.get(), valueQuery_instance)){
    //    singleNssai = Pistache::Some(valueQuery_instance);
    //}
  }
  auto dnnQuery = request.query().get("dnn");
  Pistache::Optional<std::string> dnn;
  if (!dnnQuery.isEmpty()) {
    std::string valueQuery_instance;
    if (fromStringValue(dnnQuery.get(), valueQuery_instance)) {
      dnn = Pistache::Some(valueQuery_instance);
    }
  }

  try {
    // this->get_registrations(ueId, registrationDatasetNames,
    // supportedFeatures, singleNssai, dnn, response);
  } catch (nlohmann::detail::exception& e) {
    // send a 400 error
    response.send(Pistache::Http::Code::Bad_Request, e.what());
    return;
  } catch (Pistache::Http::HttpError& e) {
    response.send(static_cast<Pistache::Http::Code>(e.code()), e.what());
    return;
  } catch (std::exception& e) {
    // send a 500 error
    response.send(Pistache::Http::Code::Internal_Server_Error, e.what());
    return;
  }
}

void UECMRegistrationInfoRetrievalApi::
    uecm_registration_info_retrieval_api_default_handler(
        const Pistache::Rest::Request&,
        Pistache::Http::ResponseWriter response) {
  response.send(
      Pistache::Http::Code::Not_Found, "The requested method does not exist");
}

}  // namespace oai::udm::api
