/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudm_EE
 * Nudm Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * DeleteEESubscriptionApi.h
 *
 *
 */

#ifndef DeleteEESubscriptionApi_H_
#define DeleteEESubscriptionApi_H_

#include <pistache/http.h>
#include <pistache/router.h>
#include <pistache/http_headers.h>

#include <optional>
#include <utility>

#include "ProblemDetails.h"
#include <string>

namespace oai::udm::api {

class DeleteEESubscriptionApi {
 public:
  explicit DeleteEESubscriptionApi(
      const std::shared_ptr<Pistache::Rest::Router>& rtr);
  virtual ~DeleteEESubscriptionApi() = default;
  void init();

  static const std::string base;

 private:
  void setupRoutes();

  void delete_ee_subscription_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);
  void delete_ee_subscription_api_default_handler(
      const Pistache::Rest::Request& request,
      Pistache::Http::ResponseWriter response);

  const std::shared_ptr<Pistache::Rest::Router> router;

  /// <summary>
  /// Helper function to handle unexpected Exceptions during Parameter parsing
  /// and validation. May be overridden to return custom error formats. This is
  /// called inside a catch block. Important: When overriding, do not call
  /// `throw ex;`, but instead use `throw;`.
  /// </summary>
  virtual std::pair<Pistache::Http::Code, std::string> handleParsingException(
      const std::exception& ex) const noexcept;

  /// <summary>
  /// Helper function to handle unexpected Exceptions during processing of the
  /// request in handler functions. May be overridden to return custom error
  /// formats. This is called inside a catch block. Important: When overriding,
  /// do not call `throw ex;`, but instead use `throw;`.
  /// </summary>
  virtual std::pair<Pistache::Http::Code, std::string> handleOperationException(
      const std::exception& ex) const noexcept;

  /// <summary>
  /// Unsubscribe
  /// </summary>
  /// <remarks>
  ///
  /// </remarks>
  /// <param name="ueIdentity">Represents the scope of the UE for which the
  /// subscription is applied. Contains the GPSI of the user or the external
  /// group ID or any UE.</param> <param name="subscriptionId">Id of the EE
  /// Subscription</param>
  virtual void delete_ee_subscription(
      const std::string& ueIdentity, const std::string& subscriptionId,
      Pistache::Http::ResponseWriter& response) = 0;
};

}  // namespace oai::udm::api

#endif /* DeleteEESubscriptionApi_H_ */
