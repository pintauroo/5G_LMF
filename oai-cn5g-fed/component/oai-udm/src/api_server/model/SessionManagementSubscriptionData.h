/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2019, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * SessionManagementSubscriptionData.h
 *
 *
 */

#ifndef SessionManagementSubscriptionData_H_
#define SessionManagementSubscriptionData_H_

#include <map>
#include <nlohmann/json.hpp>
#include <string>
#include <vector>

#include "DnnConfiguration.h"
#include "OdbPacketServices.h"
#include "Snssai.h"
#include "TraceData.h"

using namespace oai::udm::model;

namespace oai {
namespace udm {
namespace model {

/// <summary>
///
/// </summary>
class SessionManagementSubscriptionData {
 public:
  SessionManagementSubscriptionData();
  virtual ~SessionManagementSubscriptionData();

  void validate();

  /////////////////////////////////////////////
  /// SessionManagementSubscriptionData members

  /// <summary>
  ///
  /// </summary>
  Snssai getSingleNssai() const;
  void setSingleNssai(Snssai const& value);
  /// <summary>
  /// A map (list of key-value pairs where Dnn serves as key) of
  /// DnnConfigurations
  /// </summary>
  std::map<std::string, DnnConfiguration>& getDnnConfigurations();
  bool dnnConfigurationsIsSet() const;
  void unsetDnnConfigurations();

  void insertDnnConfiguration(std::string, DnnConfiguration);
  DnnConfiguration getDnnConfiguration(std::string);
  /// <summary>
  ///
  /// </summary>
  std::vector<std::string>& getInternalGroupIds();
  bool internalGroupIdsIsSet() const;
  void unsetInternalGroupIds();
  /// <summary>
  ///
  /// </summary>
  std::string getSharedDnnConfigurationsId() const;
  void setSharedDnnConfigurationsId(std::string const& value);
  bool sharedDnnConfigurationsIdIsSet() const;
  void unsetSharedDnnConfigurationsId();
  /// <summary>
  ///
  /// </summary>
  OdbPacketServices getOdbPacketServices() const;
  void setOdbPacketServices(OdbPacketServices const& value);
  bool odbPacketServicesIsSet() const;
  void unsetOdbPacketServices();
  /// <summary>
  ///
  /// </summary>
  TraceData getTraceData() const;
  void setTraceData(TraceData const& value);
  bool traceDataIsSet() const;
  void unsetTraceData();
  /// <summary>
  ///
  /// </summary>
  std::string getSharedTraceDataId() const;
  void setSharedTraceDataId(std::string const& value);
  bool sharedTraceDataIdIsSet() const;
  void unsetSharedTraceDataId();

  friend void to_json(
      nlohmann::json& j, const SessionManagementSubscriptionData& o);
  friend void from_json(
      const nlohmann::json& j, SessionManagementSubscriptionData& o);

 protected:
  Snssai m_SingleNssai;

  std::map<std::string, DnnConfiguration> m_DnnConfigurations;
  bool m_DnnConfigurationsIsSet;
  std::vector<std::string> m_InternalGroupIds;
  bool m_InternalGroupIdsIsSet;
  std::string m_SharedDnnConfigurationsId;
  bool m_SharedDnnConfigurationsIdIsSet;
  OdbPacketServices m_OdbPacketServices;
  bool m_OdbPacketServicesIsSet;
  TraceData m_TraceData;
  bool m_TraceDataIsSet;
  std::string m_SharedTraceDataId;
  bool m_SharedTraceDataIdIsSet;
};

}  // namespace model
}  // namespace udm
}  // namespace oai

#endif /* SessionManagementSubscriptionData_H_ */
