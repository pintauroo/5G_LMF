/**
 * Nudm_EE
 * Nudm Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * MonitoringConfiguration.h
 *
 *
 */

#ifndef MonitoringConfiguration_H_
#define MonitoringConfiguration_H_

#include "LocationReportingConfiguration.h"
#include "PduSessionStatusCfg.h"
#include <string>
#include "DatalinkReportingConfiguration.h"
#include "EventType.h"
#include "LossConnectivityCfg.h"
#include "AssociationType.h"
#include "ReachabilityForSmsConfiguration.h"
#include "ReachabilityForDataConfiguration.h"
#include <nlohmann/json.hpp>

namespace oai::udm::model {

/// <summary>
///
/// </summary>
class MonitoringConfiguration {
 public:
  MonitoringConfiguration();
  virtual ~MonitoringConfiguration() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  bool operator==(const MonitoringConfiguration& rhs) const;
  bool operator!=(const MonitoringConfiguration& rhs) const;

  /////////////////////////////////////////////
  /// MonitoringConfiguration members

  /// <summary>
  ///
  /// </summary>
  EventType getEventType() const;
  void setEventType(EventType const& value);
  /// <summary>
  ///
  /// </summary>
  bool isImmediateFlag() const;
  void setImmediateFlag(bool const value);
  bool immediateFlagIsSet() const;
  void unsetImmediateFlag();
  /// <summary>
  ///
  /// </summary>
  LocationReportingConfiguration getLocationReportingConfiguration() const;
  void setLocationReportingConfiguration(
      LocationReportingConfiguration const& value);
  bool locationReportingConfigurationIsSet() const;
  void unsetLocationReportingConfiguration();
  /// <summary>
  ///
  /// </summary>
  AssociationType getAssociationType() const;
  void setAssociationType(AssociationType const& value);
  bool associationTypeIsSet() const;
  void unsetAssociationType();
  /// <summary>
  ///
  /// </summary>
  DatalinkReportingConfiguration getDatalinkReportCfg() const;
  void setDatalinkReportCfg(DatalinkReportingConfiguration const& value);
  bool datalinkReportCfgIsSet() const;
  void unsetDatalinkReportCfg();
  /// <summary>
  ///
  /// </summary>
  LossConnectivityCfg getLossConnectivityCfg() const;
  void setLossConnectivityCfg(LossConnectivityCfg const& value);
  bool lossConnectivityCfgIsSet() const;
  void unsetLossConnectivityCfg();
  /// <summary>
  ///
  /// </summary>
  int32_t getMaximumLatency() const;
  void setMaximumLatency(int32_t const value);
  bool maximumLatencyIsSet() const;
  void unsetMaximumLatency();
  /// <summary>
  ///
  /// </summary>
  int32_t getMaximumResponseTime() const;
  void setMaximumResponseTime(int32_t const value);
  bool maximumResponseTimeIsSet() const;
  void unsetMaximumResponseTime();
  /// <summary>
  ///
  /// </summary>
  int32_t getSuggestedPacketNumDl() const;
  void setSuggestedPacketNumDl(int32_t const value);
  bool suggestedPacketNumDlIsSet() const;
  void unsetSuggestedPacketNumDl();
  /// <summary>
  ///
  /// </summary>
  PduSessionStatusCfg getPduSessionStatusCfg() const;
  void setPduSessionStatusCfg(PduSessionStatusCfg const& value);
  bool pduSessionStatusCfgIsSet() const;
  void unsetPduSessionStatusCfg();
  /// <summary>
  ///
  /// </summary>
  ReachabilityForSmsConfiguration getReachabilityForSmsCfg() const;
  void setReachabilityForSmsCfg(ReachabilityForSmsConfiguration const& value);
  bool reachabilityForSmsCfgIsSet() const;
  void unsetReachabilityForSmsCfg();
  /// <summary>
  ///
  /// </summary>
  std::string getMtcProviderInformation() const;
  void setMtcProviderInformation(std::string const& value);
  bool mtcProviderInformationIsSet() const;
  void unsetMtcProviderInformation();
  /// <summary>
  ///
  /// </summary>
  std::string getAfId() const;
  void setAfId(std::string const& value);
  bool afIdIsSet() const;
  void unsetAfId();
  /// <summary>
  ///
  /// </summary>
  ReachabilityForDataConfiguration getReachabilityForDataCfg() const;
  void setReachabilityForDataCfg(ReachabilityForDataConfiguration const& value);
  bool reachabilityForDataCfgIsSet() const;
  void unsetReachabilityForDataCfg();

  friend void to_json(nlohmann::json& j, const MonitoringConfiguration& o);
  friend void from_json(const nlohmann::json& j, MonitoringConfiguration& o);

 protected:
  EventType m_EventType;

  bool m_ImmediateFlag;
  bool m_ImmediateFlagIsSet;
  LocationReportingConfiguration m_LocationReportingConfiguration;
  bool m_LocationReportingConfigurationIsSet;
  AssociationType m_AssociationType;
  bool m_AssociationTypeIsSet;
  DatalinkReportingConfiguration m_DatalinkReportCfg;
  bool m_DatalinkReportCfgIsSet;
  LossConnectivityCfg m_LossConnectivityCfg;
  bool m_LossConnectivityCfgIsSet;
  int32_t m_MaximumLatency;
  bool m_MaximumLatencyIsSet;
  int32_t m_MaximumResponseTime;
  bool m_MaximumResponseTimeIsSet;
  int32_t m_SuggestedPacketNumDl;
  bool m_SuggestedPacketNumDlIsSet;
  PduSessionStatusCfg m_PduSessionStatusCfg;
  bool m_PduSessionStatusCfgIsSet;
  ReachabilityForSmsConfiguration m_ReachabilityForSmsCfg;
  bool m_ReachabilityForSmsCfgIsSet;
  std::string m_MtcProviderInformation;
  bool m_MtcProviderInformationIsSet;
  std::string m_AfId;
  bool m_AfIdIsSet;
  ReachabilityForDataConfiguration m_ReachabilityForDataCfg;
  bool m_ReachabilityForDataCfgIsSet;

  // Helper overload for validate. Used when one model stores another model and
  // calls it's validate.
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;
};

}  // namespace oai::udm::model

#endif /* MonitoringConfiguration_H_ */
