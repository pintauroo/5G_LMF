/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudm_UECM
 * Nudm Context Management Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "AmfNon3GppAccessRegistrationModification.h"

namespace oai::udm::model {

AmfNon3GppAccessRegistrationModification::
    AmfNon3GppAccessRegistrationModification() {
  m_PurgeFlag          = false;
  m_PurgeFlagIsSet     = false;
  m_Pei                = "";
  m_PeiIsSet           = false;
  m_ImsVoPsIsSet       = false;
  m_BackupAmfInfoIsSet = false;
}

AmfNon3GppAccessRegistrationModification::
    ~AmfNon3GppAccessRegistrationModification() {}

void AmfNon3GppAccessRegistrationModification::validate() {
  // TODO: implement validation
}

void to_json(
    nlohmann::json& j, const AmfNon3GppAccessRegistrationModification& o) {
  j          = nlohmann::json();
  j["guami"] = o.m_Guami;
  if (o.purgeFlagIsSet()) j["purgeFlag"] = o.m_PurgeFlag;
  if (o.peiIsSet()) j["pei"] = o.m_Pei;
  if (o.imsVoPsIsSet()) j["imsVoPs"] = o.m_ImsVoPs;
  if (o.backupAmfInfoIsSet() || !o.m_BackupAmfInfo.empty())
    j["backupAmfInfo"] = o.m_BackupAmfInfo;
}

void from_json(
    const nlohmann::json& j, AmfNon3GppAccessRegistrationModification& o) {
  j.at("guami").get_to(o.m_Guami);
  if (j.find("purgeFlag") != j.end()) {
    j.at("purgeFlag").get_to(o.m_PurgeFlag);
    o.m_PurgeFlagIsSet = true;
  }
  if (j.find("pei") != j.end()) {
    j.at("pei").get_to(o.m_Pei);
    o.m_PeiIsSet = true;
  }
  if (j.find("imsVoPs") != j.end()) {
    j.at("imsVoPs").get_to(o.m_ImsVoPs);
    o.m_ImsVoPsIsSet = true;
  }
  if (j.find("backupAmfInfo") != j.end()) {
    j.at("backupAmfInfo").get_to(o.m_BackupAmfInfo);
    o.m_BackupAmfInfoIsSet = true;
  }
}

Guami AmfNon3GppAccessRegistrationModification::getGuami() const {
  return m_Guami;
}
void AmfNon3GppAccessRegistrationModification::setGuami(Guami const& value) {
  m_Guami = value;
}
bool AmfNon3GppAccessRegistrationModification::isPurgeFlag() const {
  return m_PurgeFlag;
}
void AmfNon3GppAccessRegistrationModification::setPurgeFlag(bool const value) {
  m_PurgeFlag      = value;
  m_PurgeFlagIsSet = true;
}
bool AmfNon3GppAccessRegistrationModification::purgeFlagIsSet() const {
  return m_PurgeFlagIsSet;
}
void AmfNon3GppAccessRegistrationModification::unsetPurgeFlag() {
  m_PurgeFlagIsSet = false;
}
std::string AmfNon3GppAccessRegistrationModification::getPei() const {
  return m_Pei;
}
void AmfNon3GppAccessRegistrationModification::setPei(
    std::string const& value) {
  m_Pei      = value;
  m_PeiIsSet = true;
}
bool AmfNon3GppAccessRegistrationModification::peiIsSet() const {
  return m_PeiIsSet;
}
void AmfNon3GppAccessRegistrationModification::unsetPei() {
  m_PeiIsSet = false;
}
ImsVoPs AmfNon3GppAccessRegistrationModification::getImsVoPs() const {
  return m_ImsVoPs;
}
void AmfNon3GppAccessRegistrationModification::setImsVoPs(
    ImsVoPs const& value) {
  m_ImsVoPs      = value;
  m_ImsVoPsIsSet = true;
}
bool AmfNon3GppAccessRegistrationModification::imsVoPsIsSet() const {
  return m_ImsVoPsIsSet;
}
void AmfNon3GppAccessRegistrationModification::unsetImsVoPs() {
  m_ImsVoPsIsSet = false;
}
std::vector<BackupAmfInfo>&
AmfNon3GppAccessRegistrationModification::getBackupAmfInfo() {
  return m_BackupAmfInfo;
}
void AmfNon3GppAccessRegistrationModification::setBackupAmfInfo(
    std::vector<BackupAmfInfo> const& value) {
  m_BackupAmfInfo      = value;
  m_BackupAmfInfoIsSet = true;
}
bool AmfNon3GppAccessRegistrationModification::backupAmfInfoIsSet() const {
  return m_BackupAmfInfoIsSet;
}
void AmfNon3GppAccessRegistrationModification::unsetBackupAmfInfo() {
  m_BackupAmfInfoIsSet = false;
}

}  // namespace oai::udm::model
