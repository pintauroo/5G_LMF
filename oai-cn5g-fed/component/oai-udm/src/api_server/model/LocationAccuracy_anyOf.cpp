/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudm_EE
 * Nudm Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "LocationAccuracy_anyOf.h"
#include "Helpers.h"
#include <stdexcept>
#include <sstream>

namespace oai::udm::model {

LocationAccuracy_anyOf::LocationAccuracy_anyOf() {}

void LocationAccuracy_anyOf::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::udm::helpers::ValidationException(msg.str());
  }
}

bool LocationAccuracy_anyOf::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool LocationAccuracy_anyOf::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "LocationAccuracy_anyOf" : pathPrefix;

  if (m_value == LocationAccuracy_anyOf::eLocationAccuracy_anyOf::
                     INVALID_VALUE_OPENAPI_GENERATED) {
    success = false;
    msg << _pathPrefix << ": has no value;";
  }

  return success;
}

bool LocationAccuracy_anyOf::operator==(
    const LocationAccuracy_anyOf& rhs) const {
  return getValue() == rhs.getValue()

      ;
}

bool LocationAccuracy_anyOf::operator!=(
    const LocationAccuracy_anyOf& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const LocationAccuracy_anyOf& o) {
  j = nlohmann::json();

  switch (o.getValue()) {
    case LocationAccuracy_anyOf::eLocationAccuracy_anyOf::
        INVALID_VALUE_OPENAPI_GENERATED:
      j = "INVALID_VALUE_OPENAPI_GENERATED";
      break;
    case LocationAccuracy_anyOf::eLocationAccuracy_anyOf::CELL_LEVEL:
      j = "CELL_LEVEL";
      break;
    case LocationAccuracy_anyOf::eLocationAccuracy_anyOf::RAN_NODE_LEVEL:
      j = "RAN_NODE_LEVEL";
      break;
    case LocationAccuracy_anyOf::eLocationAccuracy_anyOf::TA_LEVEL:
      j = "TA_LEVEL";
      break;
    case LocationAccuracy_anyOf::eLocationAccuracy_anyOf::N3IWF_LEVEL:
      j = "N3IWF_LEVEL";
      break;
    case LocationAccuracy_anyOf::eLocationAccuracy_anyOf::UE_IP:
      j = "UE_IP";
      break;
    case LocationAccuracy_anyOf::eLocationAccuracy_anyOf::UE_PORT:
      j = "UE_PORT";
      break;
  }
}

void from_json(const nlohmann::json& j, LocationAccuracy_anyOf& o) {
  auto s = j.get<std::string>();
  if (s == "CELL_LEVEL") {
    o.setValue(LocationAccuracy_anyOf::eLocationAccuracy_anyOf::CELL_LEVEL);
  } else if (s == "RAN_NODE_LEVEL") {
    o.setValue(LocationAccuracy_anyOf::eLocationAccuracy_anyOf::RAN_NODE_LEVEL);
  } else if (s == "TA_LEVEL") {
    o.setValue(LocationAccuracy_anyOf::eLocationAccuracy_anyOf::TA_LEVEL);
  } else if (s == "N3IWF_LEVEL") {
    o.setValue(LocationAccuracy_anyOf::eLocationAccuracy_anyOf::N3IWF_LEVEL);
  } else if (s == "UE_IP") {
    o.setValue(LocationAccuracy_anyOf::eLocationAccuracy_anyOf::UE_IP);
  } else if (s == "UE_PORT") {
    o.setValue(LocationAccuracy_anyOf::eLocationAccuracy_anyOf::UE_PORT);
  } else {
    std::stringstream ss;
    ss << "Unexpected value " << s << " in json"
       << " cannot be converted to enum of type"
       << " LocationAccuracy_anyOf::eLocationAccuracy_anyOf";
    throw std::invalid_argument(ss.str());
  }
}

LocationAccuracy_anyOf::eLocationAccuracy_anyOf
LocationAccuracy_anyOf::getValue() const {
  return m_value;
}
void LocationAccuracy_anyOf::setValue(
    LocationAccuracy_anyOf::eLocationAccuracy_anyOf value) {
  m_value = value;
}

}  // namespace oai::udm::model
