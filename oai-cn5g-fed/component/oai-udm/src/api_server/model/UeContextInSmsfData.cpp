/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2019, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "UeContextInSmsfData.h"

namespace oai {
namespace udm {
namespace model {

UeContextInSmsfData::UeContextInSmsfData() {
  m_SmsfInfo3GppAccessIsSet    = false;
  m_SmsfInfoNon3GppAccessIsSet = false;
}

UeContextInSmsfData::~UeContextInSmsfData() {}

void UeContextInSmsfData::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json& j, const UeContextInSmsfData& o) {
  j = nlohmann::json();
  if (o.smsfInfo3GppAccessIsSet())
    j["smsfInfo3GppAccess"] = o.m_SmsfInfo3GppAccess;
  if (o.smsfInfoNon3GppAccessIsSet())
    j["smsfInfoNon3GppAccess"] = o.m_SmsfInfoNon3GppAccess;
}

void from_json(const nlohmann::json& j, UeContextInSmsfData& o) {
  if (j.find("smsfInfo3GppAccess") != j.end()) {
    j.at("smsfInfo3GppAccess").get_to(o.m_SmsfInfo3GppAccess);
    o.m_SmsfInfo3GppAccessIsSet = true;
  }
  if (j.find("smsfInfoNon3GppAccess") != j.end()) {
    j.at("smsfInfoNon3GppAccess").get_to(o.m_SmsfInfoNon3GppAccess);
    o.m_SmsfInfoNon3GppAccessIsSet = true;
  }
}

SmsfInfo UeContextInSmsfData::getSmsfInfo3GppAccess() const {
  return m_SmsfInfo3GppAccess;
}
void UeContextInSmsfData::setSmsfInfo3GppAccess(SmsfInfo const& value) {
  m_SmsfInfo3GppAccess      = value;
  m_SmsfInfo3GppAccessIsSet = true;
}
bool UeContextInSmsfData::smsfInfo3GppAccessIsSet() const {
  return m_SmsfInfo3GppAccessIsSet;
}
void UeContextInSmsfData::unsetSmsfInfo3GppAccess() {
  m_SmsfInfo3GppAccessIsSet = false;
}
SmsfInfo UeContextInSmsfData::getSmsfInfoNon3GppAccess() const {
  return m_SmsfInfoNon3GppAccess;
}
void UeContextInSmsfData::setSmsfInfoNon3GppAccess(SmsfInfo const& value) {
  m_SmsfInfoNon3GppAccess      = value;
  m_SmsfInfoNon3GppAccessIsSet = true;
}
bool UeContextInSmsfData::smsfInfoNon3GppAccessIsSet() const {
  return m_SmsfInfoNon3GppAccessIsSet;
}
void UeContextInSmsfData::unsetSmsfInfoNon3GppAccess() {
  m_SmsfInfoNon3GppAccessIsSet = false;
}

}  // namespace model
}  // namespace udm
}  // namespace oai
