/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudm_UEAU
 * UDM UE Authentication Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "ResynchronizationInfo.h"

namespace oai {
namespace udm {
namespace model {

ResynchronizationInfo::ResynchronizationInfo() {
  m_Rand = "";
  m_Auts = "";
}

ResynchronizationInfo::~ResynchronizationInfo() {}

void ResynchronizationInfo::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json& j, const ResynchronizationInfo& o) {
  j         = nlohmann::json();
  j["rand"] = o.m_Rand;
  j["auts"] = o.m_Auts;
}

void from_json(const nlohmann::json& j, ResynchronizationInfo& o) {
  j.at("rand").get_to(o.m_Rand);
  j.at("auts").get_to(o.m_Auts);
}

std::string ResynchronizationInfo::getRand() const {
  return m_Rand;
}
void ResynchronizationInfo::setRand(std::string const& value) {
  m_Rand = value;
}
std::string ResynchronizationInfo::getAuts() const {
  return m_Auts;
}
void ResynchronizationInfo::setAuts(std::string const& value) {
  m_Auts = value;
}

}  // namespace model
}  // namespace udm
}  // namespace oai
