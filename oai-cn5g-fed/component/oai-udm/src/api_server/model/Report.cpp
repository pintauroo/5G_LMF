/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudm_EE
 * Nudm Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "Report.h"
#include "Helpers.h"

#include <sstream>

namespace oai::udm::model {

Report::Report() {
  m_NewPei             = "";
  m_Roaming            = false;
  m_OldCnTypeIsSet     = false;
  m_OldCmInfoListIsSet = false;
}

void Report::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::udm::helpers::ValidationException(msg.str());
  }
}

bool Report::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool Report::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success                  = true;
  const std::string _pathPrefix = pathPrefix.empty() ? "Report" : pathPrefix;

  /* NewPei */ {
    const std::string& value           = m_NewPei;
    const std::string currentValuePath = _pathPrefix + ".newPei";
  }

  if (oldCmInfoListIsSet()) {
    const std::vector<std::string>& value = m_OldCmInfoList;
    const std::string currentValuePath    = _pathPrefix + ".oldCmInfoList";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    if (value.size() > 2) {
      success = false;
      msg << currentValuePath << ": must have at most 2 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
  }

  /* NewCmInfoList */ {
    const std::vector<std::string>& value = m_NewCmInfoList;
    const std::string currentValuePath    = _pathPrefix + ".newCmInfoList";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    if (value.size() > 2) {
      success = false;
      msg << currentValuePath << ": must have at most 2 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const std::string& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        i++;
      }
    }
  }

  return success;
}

bool Report::operator==(const Report& rhs) const {
  return true;
  // TODO
  /*


  (getNewPei() == rhs.getNewPei())
   &&

  (isRoaming() == rhs.isRoaming())
   &&

  (getNewServingPlmn() == rhs.getNewServingPlmn())
   &&

  (getNewCnType() == rhs.getNewCnType())
   &&


  ((!oldCnTypeIsSet() && !rhs.oldCnTypeIsSet()) || (oldCnTypeIsSet() &&
  rhs.oldCnTypeIsSet() && getOldCnType() == rhs.getOldCnType())) &&


  ((!oldCmInfoListIsSet() && !rhs.oldCmInfoListIsSet()) || (oldCmInfoListIsSet()
  && rhs.oldCmInfoListIsSet() && getOldCmInfoList() == rhs.getOldCmInfoList()))
  &&

  (getNewCmInfoList() == rhs.getNewCmInfoList())


  ;*/
}

bool Report::operator!=(const Report& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const Report& o) {
  j                   = nlohmann::json();
  j["newPei"]         = o.m_NewPei;
  j["roaming"]        = o.m_Roaming;
  j["newServingPlmn"] = o.m_NewServingPlmn;
  j["newCnType"]      = o.m_NewCnType;
  if (o.oldCnTypeIsSet()) j["oldCnType"] = o.m_OldCnType;
  if (o.oldCmInfoListIsSet() || !o.m_OldCmInfoList.empty())
    j["oldCmInfoList"] = o.m_OldCmInfoList;
  j["newCmInfoList"] = o.m_NewCmInfoList;
}

void from_json(const nlohmann::json& j, Report& o) {
  j.at("newPei").get_to(o.m_NewPei);
  j.at("roaming").get_to(o.m_Roaming);
  j.at("newServingPlmn").get_to(o.m_NewServingPlmn);
  j.at("newCnType").get_to(o.m_NewCnType);
  if (j.find("oldCnType") != j.end()) {
    j.at("oldCnType").get_to(o.m_OldCnType);
    o.m_OldCnTypeIsSet = true;
  }
  if (j.find("oldCmInfoList") != j.end()) {
    j.at("oldCmInfoList").get_to(o.m_OldCmInfoList);
    o.m_OldCmInfoListIsSet = true;
  }
  j.at("newCmInfoList").get_to(o.m_NewCmInfoList);
}

std::string Report::getNewPei() const {
  return m_NewPei;
}
void Report::setNewPei(std::string const& value) {
  m_NewPei = value;
}
bool Report::isRoaming() const {
  return m_Roaming;
}
void Report::setRoaming(bool const value) {
  m_Roaming = value;
}
PlmnId Report::getNewServingPlmn() const {
  return m_NewServingPlmn;
}
void Report::setNewServingPlmn(PlmnId const& value) {
  m_NewServingPlmn = value;
}
CnType Report::getNewCnType() const {
  return m_NewCnType;
}
void Report::setNewCnType(CnType const& value) {
  m_NewCnType = value;
}
CnType Report::getOldCnType() const {
  return m_OldCnType;
}
void Report::setOldCnType(CnType const& value) {
  m_OldCnType      = value;
  m_OldCnTypeIsSet = true;
}
bool Report::oldCnTypeIsSet() const {
  return m_OldCnTypeIsSet;
}
void Report::unsetOldCnType() {
  m_OldCnTypeIsSet = false;
}
std::vector<std::string> Report::getOldCmInfoList() const {
  return m_OldCmInfoList;
}
void Report::setOldCmInfoList(std::vector<std::string> const& value) {
  m_OldCmInfoList      = value;
  m_OldCmInfoListIsSet = true;
}
bool Report::oldCmInfoListIsSet() const {
  return m_OldCmInfoListIsSet;
}
void Report::unsetOldCmInfoList() {
  m_OldCmInfoListIsSet = false;
}
std::vector<std::string> Report::getNewCmInfoList() const {
  return m_NewCmInfoList;
}
void Report::setNewCmInfoList(std::vector<std::string> const& value) {
  m_NewCmInfoList = value;
}

}  // namespace oai::udm::model
