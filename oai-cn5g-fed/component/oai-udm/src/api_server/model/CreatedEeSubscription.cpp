/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudm_EE
 * Nudm Event Exposure Service. Â© 2021, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.3
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "CreatedEeSubscription.h"
#include "Helpers.h"

#include <sstream>

namespace oai::udm::model {

CreatedEeSubscription::CreatedEeSubscription() {
  m_NumberOfUes       = 0;
  m_NumberOfUesIsSet  = false;
  m_EventReportsIsSet = false;
  m_EpcStatusInd      = false;
  m_EpcStatusIndIsSet = false;
}

void CreatedEeSubscription::validate() const {
  std::stringstream msg;
  if (!validate(msg)) {
    throw oai::udm::helpers::ValidationException(msg.str());
  }
}

bool CreatedEeSubscription::validate(std::stringstream& msg) const {
  return validate(msg, "");
}

bool CreatedEeSubscription::validate(
    std::stringstream& msg, const std::string& pathPrefix) const {
  bool success = true;
  const std::string _pathPrefix =
      pathPrefix.empty() ? "CreatedEeSubscription" : pathPrefix;

  if (numberOfUesIsSet()) {
    const int32_t& value               = m_NumberOfUes;
    const std::string currentValuePath = _pathPrefix + ".numberOfUes";

    if (value < 0) {
      success = false;
      msg << currentValuePath << ": must be greater than or equal to 0;";
    }
  }

  if (eventReportsIsSet()) {
    const std::vector<MonitoringReport>& value = m_EventReports;
    const std::string currentValuePath         = _pathPrefix + ".eventReports";

    if (value.size() < 1) {
      success = false;
      msg << currentValuePath << ": must have at least 1 elements;";
    }
    {  // Recursive validation of array elements
      const std::string oldValuePath = currentValuePath;
      int i                          = 0;
      for (const MonitoringReport& value : value) {
        const std::string currentValuePath =
            oldValuePath + "[" + std::to_string(i) + "]";

        success =
            value.validate(msg, currentValuePath + ".eventReports") && success;

        i++;
      }
    }
  }

  return success;
}

bool CreatedEeSubscription::operator==(const CreatedEeSubscription& rhs) const {
  return

      (getEeSubscription() == rhs.getEeSubscription()) &&

      ((!numberOfUesIsSet() && !rhs.numberOfUesIsSet()) ||
       (numberOfUesIsSet() && rhs.numberOfUesIsSet() &&
        getNumberOfUes() == rhs.getNumberOfUes())) &&

      ((!eventReportsIsSet() && !rhs.eventReportsIsSet()) ||
       (eventReportsIsSet() && rhs.eventReportsIsSet() &&
        getEventReports() == rhs.getEventReports())) &&

      ((!epcStatusIndIsSet() && !rhs.epcStatusIndIsSet()) ||
       (epcStatusIndIsSet() && rhs.epcStatusIndIsSet() &&
        isEpcStatusInd() == rhs.isEpcStatusInd()))

          ;
}

bool CreatedEeSubscription::operator!=(const CreatedEeSubscription& rhs) const {
  return !(*this == rhs);
}

void to_json(nlohmann::json& j, const CreatedEeSubscription& o) {
  j                   = nlohmann::json();
  j["eeSubscription"] = o.m_EeSubscription;
  if (o.numberOfUesIsSet()) j["numberOfUes"] = o.m_NumberOfUes;
  if (o.eventReportsIsSet() || !o.m_EventReports.empty())
    j["eventReports"] = o.m_EventReports;
  if (o.epcStatusIndIsSet()) j["epcStatusInd"] = o.m_EpcStatusInd;
}

void from_json(const nlohmann::json& j, CreatedEeSubscription& o) {
  j.at("eeSubscription").get_to(o.m_EeSubscription);
  if (j.find("numberOfUes") != j.end()) {
    j.at("numberOfUes").get_to(o.m_NumberOfUes);
    o.m_NumberOfUesIsSet = true;
  }
  if (j.find("eventReports") != j.end()) {
    j.at("eventReports").get_to(o.m_EventReports);
    o.m_EventReportsIsSet = true;
  }
  if (j.find("epcStatusInd") != j.end()) {
    j.at("epcStatusInd").get_to(o.m_EpcStatusInd);
    o.m_EpcStatusIndIsSet = true;
  }
}

EeSubscription CreatedEeSubscription::getEeSubscription() const {
  return m_EeSubscription;
}
void CreatedEeSubscription::setEeSubscription(EeSubscription const& value) {
  m_EeSubscription = value;
}
int32_t CreatedEeSubscription::getNumberOfUes() const {
  return m_NumberOfUes;
}
void CreatedEeSubscription::setNumberOfUes(int32_t const value) {
  m_NumberOfUes      = value;
  m_NumberOfUesIsSet = true;
}
bool CreatedEeSubscription::numberOfUesIsSet() const {
  return m_NumberOfUesIsSet;
}
void CreatedEeSubscription::unsetNumberOfUes() {
  m_NumberOfUesIsSet = false;
}
std::vector<MonitoringReport> CreatedEeSubscription::getEventReports() const {
  return m_EventReports;
}
void CreatedEeSubscription::setEventReports(
    std::vector<MonitoringReport> const& value) {
  m_EventReports      = value;
  m_EventReportsIsSet = true;
}
bool CreatedEeSubscription::eventReportsIsSet() const {
  return m_EventReportsIsSet;
}
void CreatedEeSubscription::unsetEventReports() {
  m_EventReportsIsSet = false;
}
bool CreatedEeSubscription::isEpcStatusInd() const {
  return m_EpcStatusInd;
}
void CreatedEeSubscription::setEpcStatusInd(bool const value) {
  m_EpcStatusInd      = value;
  m_EpcStatusIndIsSet = true;
}
bool CreatedEeSubscription::epcStatusIndIsSet() const {
  return m_EpcStatusIndIsSet;
}
void CreatedEeSubscription::unsetEpcStatusInd() {
  m_EpcStatusIndIsSet = false;
}

}  // namespace oai::udm::model
