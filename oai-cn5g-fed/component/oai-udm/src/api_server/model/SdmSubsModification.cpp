/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudm_SDM
 * Nudm Subscriber Data Management Service. ï¿½ 2019, 3GPP Organizational Partners
 * (ARIB, ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 2.1.0.alpha-1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "SdmSubsModification.h"

namespace oai {
namespace udm {
namespace model {

SdmSubsModification::SdmSubsModification() {
  m_Expires                    = "";
  m_ExpiresIsSet               = false;
  m_MonitoredResourceUrisIsSet = false;
}

SdmSubsModification::~SdmSubsModification() {}

void SdmSubsModification::validate() {
  // TODO: implement validation
}

void to_json(nlohmann::json& j, const SdmSubsModification& o) {
  j = nlohmann::json();
  if (o.expiresIsSet()) j["expires"] = o.m_Expires;
  if (o.monitoredResourceUrisIsSet())
    j["monitoredResourceUris"] = o.m_MonitoredResourceUris;
}

void from_json(const nlohmann::json& j, SdmSubsModification& o) {
  if (j.find("expires") != j.end()) {
    j.at("expires").get_to(o.m_Expires);
    o.m_ExpiresIsSet = true;
  }
  if (j.find("monitoredResourceUris") != j.end()) {
    j.at("monitoredResourceUris").get_to(o.m_MonitoredResourceUris);
    o.m_MonitoredResourceUrisIsSet = true;
  }
}

std::string SdmSubsModification::getExpires() const {
  return m_Expires;
}
void SdmSubsModification::setExpires(std::string const& value) {
  m_Expires      = value;
  m_ExpiresIsSet = true;
}
bool SdmSubsModification::expiresIsSet() const {
  return m_ExpiresIsSet;
}
void SdmSubsModification::unsetExpires() {
  m_ExpiresIsSet = false;
}
std::vector<std::string>& SdmSubsModification::getMonitoredResourceUris() {
  return m_MonitoredResourceUris;
}
bool SdmSubsModification::monitoredResourceUrisIsSet() const {
  return m_MonitoredResourceUrisIsSet;
}
void SdmSubsModification::unsetMonitoredResourceUris() {
  m_MonitoredResourceUrisIsSet = false;
}

}  // namespace model
}  // namespace udm
}  // namespace oai
