/*
 * Licensed to the OpenAirInterface (OAI) Software Alliance under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The OpenAirInterface Software Alliance licenses this file to You under
 * the OAI Public License, Version 1.1  (the "License"); you may not use this
 * file except in compliance with the License. You may obtain a copy of the
 * License at
 *
 *      http://www.openairinterface.org/?page_id=698
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *-------------------------------------------------------------------------------
 * For more information about the OpenAirInterface (OAI) Software Alliance:
 *      contact@openairinterface.org
 */
/**
 * Nudm_UEAU
 * UDM UE Authentication Service. ï¿½ 2020, 3GPP Organizational Partners (ARIB,
 * ATIS, CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.2.0-alpha.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

#include "GenerateAuthDataApiImpl.h"
#include "logger.hpp"

namespace oai {
namespace udm {
namespace api {

using namespace oai::udm::config;
using namespace oai::udm::model;

GenerateAuthDataApiImpl::GenerateAuthDataApiImpl(
    std::shared_ptr<Pistache::Rest::Router> rtr, udm_app* udm_app_inst,
    std::string address)
    : GenerateAuthDataApi(rtr) {}

void GenerateAuthDataApiImpl::generate_auth_data(
    const std::string& supiOrSuci,
    const AuthenticationInfoRequest& authenticationInfoRequest,
    Pistache::Http::ResponseWriter& response) {
  Logger::udm_ueau().info("Handle generate_auth_data()");

  std::string reponse_from_udr;
  nlohmann::json auth_info_response = {};
  Pistache::Http::Code code         = {};
  long http_code                    = 0;

  m_udm_app->handle_generate_auth_data_request(
      supiOrSuci, authenticationInfoRequest, auth_info_response, http_code);

  code = static_cast<Pistache::Http::Code>(http_code);

  // Set content type
  if ((code == Pistache::Http::Code::Created) or
      (code == Pistache::Http::Code::Accepted) or
      (code == Pistache::Http::Code::Ok) or
      (code == Pistache::Http::Code::No_Content)) {
    response.headers().add<Pistache::Http::Header::ContentType>(
        Pistache::Http::Mime::MediaType("application/json"));
  } else {
    response.headers().add<Pistache::Http::Header::ContentType>(
        Pistache::Http::Mime::MediaType("application/problem+json"));
  }

  Logger::udm_ueau().info("Send response to AUSF");
  response.send(code, auth_info_response.dump().c_str());

  Logger::udm_ueau().info("Update sqn in Database");
}

}  // namespace api
}  // namespace udm
}  // namespace oai
